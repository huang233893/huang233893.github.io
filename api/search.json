[{"title":"酥米小站微信小程序即将上线","slug":"其他/sumiblogappsup","url":"/其他/sumiblogappsup/","content":"\n# 前提\n\n最近看到彬红茶大佬更新了博客App，突发奇想（其实是眼馋了🌚），也想做一个属于Hexo的静态博客软件。\n\n静态博客最被人诟病的是页面的刷新不及时，获取信息的速度没有动态博客快，于是我选择了ryanuo大佬的hexo-wx-api项目，通过直接抓取hexo-generator-restful生成的json文件，这样小程序里的文章更新就会比博客网站及时。俺选择微信小程序的原因是方便，不需要特别的打理，也不需要考虑多端适配，只需要打开微信搜索小程序就行了，方便了开发者也方便了用户。\n\n\n# 启动！开干！\n\n于是我花了大概8hours+，基于ryanuo大佬的hexo-wx-api项目，制作出了这个博客。修改了原项目70%+的代码，目前实现了基础功能\n\n## 截图\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/wx-1.jpg)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/wx-2.jpg)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/wx-3.jpg)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/wx-4.jpg)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/wx-5.jpg)\n\n# 进度\n\n## 目前可以使用的功能\n\n- 文章阅读\n- 留言板\n- 分类功能\n- 博客实时刷新\n\n## 未来完成的功能\n\n- [ ] 暗色模式适配\n- [ ] Twikoo评论区\n- [ ] 友链页面\n- [ ] 文章界面优化\n- [x] 添加登录功能（已经通过微信登录实现）\n- [ ] 微信文章通知（不知道静态博客可不可以实现，想试试）\n- [ ] 博客文章分享\n- [ ] 搜索功能（目前是半废状态，所以去除了）\n\n\n## 问题\n- 有部分功能尚未完工，正在抓紧补全\n- 部分ui出现拉伸情况，正在修复\n- 搜索半废（去掉了）\n\n# 遗憾\n\n本人差半个月成年，暂时无法进行小程序的发布，所以发布日期会在月底至下个月，大家敬请期待哦~\n\n# 链接\n感谢ryanuo大佬编写的hexo-wx-api项目，让静态博客小程序化成为了可能，谢谢您！\n\n原项目：\n\n{% link ryanuo/hexo-wx-api,GitHub,https://github.com/ryanuo/hexo-wx-api %}","tags":["博客"],"categories":["其他"]},{"title":"Windows 11 Insider Preview Build 26220.6780 更新日志：AI助手与拖拽托盘升级","slug":"Windows/win11dev4","url":"/Windows/win11dev4/","content":"\n# 版本信息\n系统版本：Windows 11 25H2\n\n内核版本：26220.6780\n\n频道：Dev Channel\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/1-5.jpg)\n\n> 微软于2025年10月11日面向Dev频道推送了Windows 11 Insider Preview Build 26220.6780 (KB5067103) 版本更新，此次更新重点强化了设置应用的AI助手能力，并为拖拽托盘带来多项实用改进。\n\n---\n\n# AI助手与设置优化\n\n本次更新中，设置应用新增了AI助手功能。这一功能目前**仅限于Copilot+PC**，能够根据用户的操作习惯，**推荐个性化的设置选项**，帮助用户快速修改最近调整过的设置项。\n\n设置应用的搜索功能也得到了增强。搜索界面会显示更多结果，方便用户更快找到并修改设置项。如果某些设置无法进一步调整，系统会弹出对话框说明原因，并提供相应的修改选项。\n\n# 拖拽托盘与Click to Do功能升级\n\n拖拽托盘功能获得了多项实用改进：\n\n*   **多文件支持**：用户现在可以**拖拽多个文件**到托盘中，并作为一个整体进行移动或分享\n*   **智能应用推荐**：托盘会**更智能地推荐相关应用**，提高目标应用（如邮件、Teams、Slack、OneDrive等）的显示优先级\n*   **无缝文件夹移动**：将文件拖到拖拽托盘后选择文件夹，会执行**直接移动操作**，无需额外的复制/确认步骤\n\n同时，Click to Do（预览版）也进行了改进，在启动时，系统会通过**视觉提示高亮显示关键实体**，点击这些元素即可触发智能操作。\n\n# 系统稳定性与Bug修复\n\n除了新功能的加入，本次更新还修复了多个Bug，涵盖了任务栏、文件资源管理器、开始菜单、搜索以及部分应用崩溃等问题。\n\n例如，修复了**按下Win+`键无法切换应用窗口的问题**，以及上个版本中导致部分预览体验成员频繁崩溃的问题。\n\n**管理员保护功能**也得到了重新启用，用户可以在Windows安全中心 > 帐户保护中重新启用该功能，增强了系统的安全性。\n\n# 深色模式与未来展望\n\n微软为\"运行\"功能**启用了深色模式**，但目前**仅限于少数Windows预览体验成员可见**，未来将扩大推送范围。\n\n# 已知问题\n\n微软正在调查此版本中存在的以下问题：\n\n*   **Click to Do**：通过右边缘手势在主显示器上启动Click to Do会导致滑动视觉效果显示在错误的显示器上\n*   **锁定和登录屏幕**：此版本中锁定屏幕上可能不显示媒体控件\n*   **任务栏**：由于问题，任务栏预览的新动画已被暂时禁用\n\n# 更新提示\n\n该版本通过**受控功能推送 (CFR)** 方式分发。建议Dev频道用户在\"设置\" > \"Windows更新\"中**开启\"在最新更新可用时立即获取\"** 切换开关，以逐步体验到所有新功能。\n\n{% note warning flat %}此版本为开发预览版，**稳定性无法与正式版相比**，不建议在生产环境中使用。部分新功能可能需要特定硬件支持，且推送范围可能受地区限制。{% endnote %}\n\n**【本文基于微软官方博客更新日志编写，具体功能体验可能因设备配置和区域设置而有所不同】**\n\n## Tips\n本文章使用Deepseek V3基于微软官方更新日志润色编写而成，具体功能体验可能因设备配置和区域设置而有所不同，如有错误，请指出，酥米将会及时更改。","tags":["系统","Windows"],"categories":["系统类"]},{"title":"自动备份你的Hexo博客","slug":"教程/blogbackup","url":"/教程/blogbackup/","content":"\n# 前提\n最近十分难绷，为了搞code-server远程编辑博客，把博客的依赖给刷掉了，还好之前有备份逃过一劫，这也让我萌生了一个想法，可不可以把hexo源代码备份到github仓库上面呢？于是我在万能的度娘寻找答案，还真给我找到了一个方法。\n\n# 原文章地址\n\n{% link 自动备份 Hexo 博客源文件,AISYUN's Blog,https://blog.cyida.com/2023/32DJ476.html %}\n\n感谢AISYUN大佬提供的方案，此文章只做记录留档，如侵犯到您的权利，请联系我下架此文章，谢谢~\n\n# 正文\n\n## 将Hexo目录加入到Git仓库中\n\n```\ngit init\ngit remote add origin git@github.com:Github用户名/项目名字.git\ngit pull origin main # 原教程中为Master，现已替换为main\n```\n\n建议在博客根目录中写入`.gitignore` 文件，填入以下内容：\n\n```\npublic/\n.deploy\n.deploy_git/\n*.log\n```\n这样可以防止编译过的网页以及log文件被上传到仓库里，提升备份速度\n\n然后再执行以下命令，手动将源代码首次推送至Github仓库中：\n\n```\ngit add .\ngit commit -m \"备份hexo源码文件\"\ngit push origin master\n```\n\n## 自动化实现\n\n首先安装shelljs\n\n```\nnpm install --save shelljs\n```\n\n然后在博客根目录/scripts（如果没有此文件夹，就创建一个）文件夹里，创建一个名为`auto_backup.js`的脚本\n\n并且填入以下内容：\n```\nrequire('shelljs/global');\ntry {\n    hexo.on('deployAfter', function() {//当deploy完成后执行备份\n        run();\n    });\n\n} catch (e) {\n    console.log(\"产生了一个错误啊<(￣3￣)> !，错误详情为：\" + e.toString());\n}\nfunction run() {\n    if (!which('git')) {\n        echo('Sorry, this script requires git');\n        exit(1);\n    } else {\n        echo(\"======================Auto Backup Begin===========================\");\n        cd('Your Blog Folder');    //此处修改为Hexo根目录路径\n        if (exec('git add --all').code !== 0) {\n            echo('Error: Git add failed');\n            exit(1);\n        }\n        if (exec('git commit -am \"blog auto backup script\\'s commit\"').code !== 0) {\n            echo('Error: Git commit failed');\n            exit(1);\n        }\n        if (exec('git push origin main').code !== 0) {\n            echo('Error: Git push failed');\n            exit(1);\n        }\n        echo(\"==================Auto Backup Complete============================\")\n    }\n}\n\n```\n- Your Blog Folder处请改成自己博客的**绝对**目录路径如：D:/blog/\n- 如果你的仓库名称不是默认origin和分支不是main的话，需改成自己的仓库和相应分支名\n\n## 结果\n保存好脚本，在博客目录执行`hexo deploy`命令，在博客常规推送之后，会出现以下输出：\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht3-1.png)\n\n就证明博客代码推送成功啦~\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht3-2.png)\n\n此时查看Github仓库上也有相应的博客代码啦！","tags":["博客","教程"],"categories":["教程类"]},{"title":"番禺市桥游记：老城区的辉煌，从未落幕","slug":"酥米的碎碎念/番禺市桥游记","url":"/酥米的碎碎念/番禺市桥游记/","content":"\n# 前提\n\n其实这也是酥米第二次去市桥啦🌚~ 我骑着电动车，驶入这片土地，开始了一场探寻之旅，想看看这座承载着岁月记忆的市桥老城区，是否如一些人所说，辉煌已不再。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/pysq-6.jpg)\n\n在禺山市场后面充电，这里的充电桩有单次充电，而且太阳晒不到😂，离各个市桥著名的地方都不远，骑车推荐来这充电。\n\n# 在旅途中\n\n## 繁华与古韵交织的街景\n\n阳光透过澄澈的蓝天，洒在桥兴大道和大北路的街道上，给这座老城区镀上了一层温暖的光晕。\n\n走在市桥的主干道桥兴大道与大北路Y字口的天桥上，目光所及，是新旧建筑交织的独特画面。一侧是现代化的高楼大厦，玻璃幕墙在阳光下反射出耀眼的光芒，彰显着城市发展的蓬勃力量。像那矗立着的写字楼，外立面光洁如新，进出的人流行色匆匆，透着都市的快节奏。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/pysq-1.jpg)\n\n而另一侧，是带着岁月痕迹的老建筑。墙体有些斑驳，却有着别样的韵味。骑楼式的结构，仿佛在静静诉说着过往的商业繁华。沿街的商铺里，既有“百果园”这样连锁的新鲜水果店，色彩缤纷的水果整齐摆放，散发着诱人的香气；也有当地老字号的小店，卖着传统的小吃，那氤氲的热气里，满是熟悉的老味道。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/pysq-4.jpg)\n\n街道上车水马龙，秩序井然。轿车、电动车穿梭往来，却并不显得拥挤。路旁的绿化带里，树木郁郁葱葱，尤其是那盛放的三角梅，一簇簇、一丛丛，紫的、粉的，热烈地绽放在天桥上、街角旁，像是给城市披上了绚丽的花衣，为略显沉稳的老城区增添了几分活泼与烂漫。站在那座被三角梅簇拥的天桥上，俯瞰下方的车水马龙和周围的建筑，我能感受到一种时光的交融，新与旧在这里和谐共生，并非一方取代另一方，而是共同构成市桥独特的城市风貌。\n\n## 钻汇广场里的热闹烟火气\n\n走进钻汇广场，内部的景象更是让我感受到市桥的活力。色彩斑斓的彩色玻璃窗，有着欧式建筑的浪漫风情，阳光透过玻璃，在地面投下梦幻的光斑。\n\n广场内店铺林立，“诺蒂娜”等品牌店装修精致，吸引着年轻的消费者驻足挑选。而一些售卖本地特色小商品的摊位前，更是人头攒动。摊主热情地招呼着，介绍着那些充满巧思的小物件。孩子们被可爱的玩偶吸引，拉着家长的手不肯离去；年轻人则在潮流饰品店前，精心挑选着搭配衣物的配饰。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/pysq-8.jpg)\n\n耳边是此起彼伏的交谈声、欢笑声，还有店铺里传来的轻柔音乐，交织成一首充满烟火气的城市乐章。这里没有老城区的暮气，反而充满了生机与活力，是人们休闲、社交、消费的好去处，见证着市桥商业的持续繁荣。\n\n## 番禺老牌宾馆的岁月故事\n\n“番禺宾馆”几个醒目的大字，在阳光下格外耀眼。这座老牌宾馆，坐落在市桥中轴大北路旁边。作为市桥的老牌宾馆，它承载了太多人的记忆。那具有特色的建筑外观，虽历经岁月，却依然端庄大气。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/pysq-3.jpg)\n\n想象着过去，这里曾是市桥乃至番禺的重要接待场所，见证了无数的迎来送往，见证了城市发展的重要时刻。如今，它依然在运营，以一种沉稳的姿态，继续为往来的人们提供服务。或许，它的设施不再是最新潮的，但那份历史的厚重感，那份属于老城区的独特韵味，是新建的豪华酒店所无法替代的。它就像一位老者，默默守护着市桥，讲述着那些关于辉煌过往的故事，也见证着当下的平稳与发展。 \n\n## 老城区的辉煌，是持续的生长\n\n在市桥漫步，我看到的不是老城区辉煌的消逝，而是一种持续的生长与蜕变。它没有因循守旧，而是在保留自身历史文化底蕴的同时，积极拥抱现代化的发展。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/pysq-2.jpg)\n\n新的商业体不断涌现，为经济发展注入新的活力；老的建筑与街区，经过修缮与维护，依然散发着独特的魅力，吸引着人们去探寻、去感受。这里的人们，在快节奏的现代生活与慢时光的历史韵味中，找到了属于自己的平衡。\n\n# 真的落幕了吗\n\n市桥的辉煌，不是过去时，而是进行时。它就像一棵枝繁叶茂的大树，根系深植于历史的土壤，枝叶却在时代的风中，不断向着天空伸展，绽放出新的生机。那些关于老城区辉煌不再的说法，在我亲身感受过它的活力与韵味后，显得如此片面。市桥，这座老城区，正以它独有的方式，续写着属于自己的辉煌篇章。\n\n离开市桥时，夕阳的余晖温柔地洒在街道上，给一切都染上了一层金色。我知道，我会再次来到这里，因为这座老城区的故事，还在继续，它的辉煌，从未落幕。\n\n# 酥米的一点小小碎碎念\n\n这应该是10月份最后仅剩的游记了（大概吧😀）。最近暂时不会写游记了，本人并不是很擅长写长文章，目前写出来的文章都或多或少的使用了AI的润色，感觉自己要灵感枯竭了（其实是国庆去太多地方了）不知道写什么好，而且本人的写作水平也支撑不起写那么长的游记（望各位读者见谅啦）。下一次的游记得留到秋假的南海九江海寿岛之旅啦～敬请期待哦！\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/pysq-7.jpg)\n\n来回居然骑了106km，虽然从佛山骑到番禺人都麻了，但是过程还是很快乐滴~\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/pysq-5.jpg)\n\n还有好多国庆作业没写，呜呜呜明天就要上学了，希望今天能肝完吧😭😭😭🌚","tags":["长篇碎碎念"],"categories":["个人记录类"]},{"title":"Hexo博客添加2048","slug":"教程/blog2048plus","url":"/教程/blog2048plus/","content":"\n# 前提\n\n{% note orange 'anzhiyufont anzhiyu-icon-bullhorn' flat %}截稿前刚好到10月6日中秋节🌙，酥米祝各位中秋节快乐吖！😀{% endnote %}\n\n最近看到彩蛋页空着，于是突发奇想，做一个2048小游戏嵌入在里面，于是我”请教“了万能的豆包，得到了以下项目\n\n# Demo\n\n本站已经内嵌此项目，可以去康康哦~ \n\n{% link 2048小游戏,酥米的小站,/Fun/ %}\n\n# 优势\n\n- **完全隔离，不干扰博客**\n  - 所有元素和逻辑封装在独立容器 `game-2048-container` 中，通过内联样式和容器限定作用域，不会污染博客原有CSS和JS。\n  - 不依赖任何外部资源（无图片、无字体文件），纯原生HTML+CSS+JS实现，加载速度快，不增加博客加载负担。\n\n\n- **适配Hexo Anzhiyu主题**\n  - 明暗模式自动切换：通过检测主题 `html` 标签的 `dark` 类，动态调整方块颜色、背景色，确保在亮色/暗色模式下都有清晰的视觉对比（例如暗色模式下方块用深色背景+浅色文字，亮色模式相反）。\n  - 风格统一：使用主题内置CSS变量（`--card-bg` 卡片背景、`--text-color` 文字色等），与博客整体风格无缝融合。\n\n\n- **多设备交互友好**\n  - 键盘控制：支持方向键（↑↓←→）移动方块，操作符合原版2048习惯。\n  - 触屏优化：滑动屏幕（上下左右）可控制方块移动，滑动阈值合理（避免误触）。\n  - 核心优化：通过 `e.preventDefault()` 和 `touch-action: none` 阻止触屏滑动时触发整个博客页面的滚动，专注游戏操作。\n  - 操作反馈：按钮状态动态变化（如“撤回”按钮在无历史记录时禁用并半透明）。\n\n\n- **完整游戏功能**\n  - 核心玩法：随机生成2/4方块，滑动合并相同数字，目标合成2048。\n  - 撤回功能：通过历史记录栈保存最近10步的游戏状态（网格+分数），点击“撤回”可回到上一步，提升容错性。\n  - 状态判断：自动检测胜利（合成2048）和失败（无空位且无法合并），并弹窗提示。\n  - 分数系统：实时显示当前分数，合并方块时自动累加。\n\n\n- **轻量精简**\n  - 代码量约600行，逻辑清晰，无冗余代码。\n  - 棋盘使用CSS Grid布局，自适应容器大小，在手机、电脑上均可正常显示（默认最大宽度400px，可按需调整）。\n\n# 创建界面\n\n可以先使用指令单独创建一个2048的页面\n\n`hexo new pages \"页面名称\"`\n\n然后使用工具编辑`“页面名称”/index.md`\n\n# 使用方法\n\n直接将代码复制到Hexo的Markdown文章（`.md`文件）中，部署后即可在博客中运行，无需额外配置。如需调整大小，修改容器的`max-width`样式即可。\n\n# 代码\n\n```\n<div id=\"game-2048-container\" style=\"max-width: 400px; margin: 20px auto; padding: 15px; border-radius: 8px; transition: all 0.3s ease; background: var(--card-bg); touch-action: none;\">\n  <!-- 分数与控制区 -->\n  <div style=\"display: flex; justify-content: space-between; margin-bottom: 15px; font-family: 'Segoe UI', Arial;\">\n    <div style=\"font-size: 24px; font-weight: bold; color: var(--text-color);\">2048</div>\n    <div style=\"background: var(--primary-color); color: white; padding: 5px 10px; border-radius: 4px;\">\n      分数: <span id=\"score-2048\">0</span>\n    </div>\n    <div style=\"display: flex; gap: 5px;\">\n      <!-- 按钮增大点击区域并添加触摸反馈 -->\n      <button id=\"undo-2048\" style=\"background: var(--btn-bg); color: var(--btn-color); border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer; opacity: 0.5; touch-action: manipulation;\" disabled>\n        撤回\n      </button>\n      <button id=\"reset-2048\" style=\"background: var(--btn-bg); color: var(--btn-color); border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer; touch-action: manipulation;\">\n        重置\n      </button>\n    </div>\n  </div>\n  \n  <!-- 游戏棋盘 -->\n  <div id=\"game-2048-board\" style=\"display: grid; grid-template-columns: repeat(4, 1fr); gap: 10px;\"></div>\n  \n  <!-- 操作说明 -->\n  <div style=\"margin-top: 15px; font-size: 14px; color: var(--text-color); font-family: 'Segoe UI', Arial;\">\n    <p>操作：方向键或滑动屏幕移动方块，相同数字碰撞将合并</p>\n  </div>\n</div>\n\n<script>\nconst container = document.getElementById('game-2048-container');\nif (container) {\n  // 获取DOM元素\n  const boardEl = container.querySelector('#game-2048-board');\n  const scoreEl = container.querySelector('#score-2048');\n  const resetBtn = container.querySelector('#reset-2048');\n  const undoBtn = container.querySelector('#undo-2048');\n  \n  // 游戏配置\n  const SIZE = 4;\n  let grid = [];\n  let score = 0;\n  let isDarkMode = false;\n  let history = [];\n  let isTouching = false;\n  let touchTarget = null; // 记录触摸目标，区分按钮和棋盘\n  \n  // 颜色映射（保持不变）\n  const getColors = (value) => {\n    const colors = {\n      2: { bg: isDarkMode ? '#3a3a3a' : '#eee4da', text: isDarkMode ? '#fff' : '#776e65' },\n      4: { bg: isDarkMode ? '#4a4a4a' : '#ede0c8', text: isDarkMode ? '#fff' : '#776e65' },\n      8: { bg: isDarkMode ? '#ff9966' : '#f2b179', text: '#f9f6f2' },\n      16: { bg: isDarkMode ? '#ff7733' : '#f59563', text: '#f9f6f2' },\n      32: { bg: isDarkMode ? '#ff5500' : '#f67c5f', text: '#f9f6f2' },\n      64: { bg: isDarkMode ? '#ff3300' : '#f65e3b', text: '#f9f6f2' },\n      128: { bg: isDarkMode ? '#ffcc66' : '#edcf72', text: '#f9f6f2' },\n      256: { bg: isDarkMode ? '#ffbb33' : '#edcc61', text: '#f9f6f2' },\n      512: { bg: isDarkMode ? '#ffaa00' : '#edc850', text: '#f9f6f2' },\n      1024: { bg: isDarkMode ? '#ff9900' : '#edc53f', text: '#f9f6f2' },\n      2048: { bg: isDarkMode ? '#ff8800' : '#edc22e', text: '#f9f6f2' }\n    };\n    if (!colors[value]) {\n      colors[value] = { bg: isDarkMode ? '#ff5555' : '#3c3a32', text: '#f9f6f2' };\n    }\n    return colors[value];\n  };\n  \n  // 初始化网格（保持不变）\n  const initGrid = () => {\n    grid = Array(SIZE).fill().map(() => Array(SIZE).fill(0));\n    score = 0;\n    history = [];\n    scoreEl.textContent = '0';\n    addRandomNumber();\n    addRandomNumber();\n    updateUndoBtn();\n    renderGrid();\n  };\n  \n  // 保存历史记录（保持不变）\n  const saveHistory = () => {\n    const gridCopy = JSON.parse(JSON.stringify(grid));\n    history.push({ grid: gridCopy, score: score });\n    if (history.length > 10) history.shift();\n    updateUndoBtn();\n  };\n  \n  // 撤回操作（保持不变）\n  const undoMove = () => {\n    if (history.length === 0) return;\n    const lastState = history.pop();\n    grid = lastState.grid;\n    score = lastState.score;\n    scoreEl.textContent = score;\n    updateUndoBtn();\n    renderGrid();\n  };\n  \n  // 更新撤回按钮状态（保持不变）\n  const updateUndoBtn = () => {\n    undoBtn.disabled = history.length === 0;\n    undoBtn.style.opacity = history.length === 0 ? '0.5' : '1';\n  };\n  \n  // 随机生成数字（保持不变）\n  const addRandomNumber = () => {\n    const emptyCells = [];\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (grid[i][j] === 0) emptyCells.push({ i, j });\n      }\n    }\n    if (emptyCells.length === 0) return false;\n    const { i, j } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    grid[i][j] = Math.random() < 0.9 ? 2 : 4;\n    return true;\n  };\n  \n  // 渲染网格（保持不变）\n  const renderGrid = () => {\n    boardEl.innerHTML = '';\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        const cell = document.createElement('div');\n        const value = grid[i][j];\n        cell.style.width = '80px';\n        cell.style.height = '80px';\n        cell.style.borderRadius = '4px';\n        cell.style.display = 'flex';\n        cell.style.alignItems = 'center';\n        cell.style.justifyContent = 'center';\n        cell.style.fontWeight = 'bold';\n        cell.style.transition = 'all 0.2s ease';\n        cell.style.fontFamily = 'Arial, sans-serif';\n        \n        if (value === 0) {\n          cell.style.background = isDarkMode ? '#2a2a2a' : '#cdc1b4';\n          cell.style.color = 'transparent';\n        } else {\n          const { bg, text } = getColors(value);\n          cell.style.background = bg;\n          cell.style.color = text;\n          cell.style.fontSize = value < 100 ? '24px' : value < 1000 ? '20px' : '16px';\n          cell.textContent = value;\n        }\n        boardEl.appendChild(cell);\n      }\n    }\n  };\n  \n  // 移动逻辑（保持不变）\n  const moveLeft = () => {\n    let moved = false;\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 1; j < SIZE; j++) {\n        if (grid[i][j] !== 0) {\n          let k = j;\n          while (k > 0 && grid[i][k - 1] === 0) {\n            grid[i][k - 1] = grid[i][k];\n            grid[i][k] = 0;\n            k--;\n            moved = true;\n          }\n          if (k > 0 && grid[i][k - 1] === grid[i][k]) {\n            grid[i][k - 1] *= 2;\n            score += grid[i][k - 1];\n            grid[i][k] = 0;\n            moved = true;\n          }\n        }\n      }\n    }\n    return moved;\n  };\n  \n  const moveRight = () => {\n    let moved = false;\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = SIZE - 2; j >= 0; j--) {\n        if (grid[i][j] !== 0) {\n          let k = j;\n          while (k < SIZE - 1 && grid[i][k + 1] === 0) {\n            grid[i][k + 1] = grid[i][k];\n            grid[i][k] = 0;\n            k++;\n            moved = true;\n          }\n          if (k < SIZE - 1 && grid[i][k + 1] === grid[i][k]) {\n            grid[i][k + 1] *= 2;\n            score += grid[i][k + 1];\n            grid[i][k] = 0;\n            moved = true;\n          }\n        }\n      }\n    }\n    return moved;\n  };\n  \n  const moveUp = () => {\n    let moved = false;\n    for (let j = 0; j < SIZE; j++) {\n      for (let i = 1; i < SIZE; i++) {\n        if (grid[i][j] !== 0) {\n          let k = i;\n          while (k > 0 && grid[k - 1][j] === 0) {\n            grid[k - 1][j] = grid[k][j];\n            grid[k][j] = 0;\n            k--;\n            moved = true;\n          }\n          if (k > 0 && grid[k - 1][j] === grid[k][j]) {\n            grid[k - 1][j] *= 2;\n            score += grid[k - 1][j];\n            grid[k][j] = 0;\n            moved = true;\n          }\n        }\n      }\n    }\n    return moved;\n  };\n  \n  const moveDown = () => {\n    let moved = false;\n    for (let j = 0; j < SIZE; j++) {\n      for (let i = SIZE - 2; i >= 0; i--) {\n        if (grid[i][j] !== 0) {\n          let k = i;\n          while (k < SIZE - 1 && grid[k + 1][j] === 0) {\n            grid[k + 1][j] = grid[k][j];\n            grid[k][j] = 0;\n            k++;\n            moved = true;\n          }\n          if (k < SIZE - 1 && grid[k + 1][j] === grid[k][j]) {\n            grid[k + 1][j] *= 2;\n            score += grid[k + 1][j];\n            grid[k][j] = 0;\n            moved = true;\n          }\n        }\n      }\n    }\n    return moved;\n  };\n  \n  // 处理移动（保持不变）\n  const handleMove = (direction) => {\n    let moved;\n    switch (direction) {\n      case 'left': moved = moveLeft(); break;\n      case 'right': moved = moveRight(); break;\n      case 'up': moved = moveUp(); break;\n      case 'down': moved = moveDown(); break;\n      default: return;\n    }\n    \n    if (moved) {\n      saveHistory();\n      scoreEl.textContent = score;\n      addRandomNumber();\n      renderGrid();\n      checkGameState();\n    }\n  };\n  \n  // 检查游戏状态（保持不变）\n  const checkGameState = () => {\n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (grid[i][j] === 2048) {\n          setTimeout(() => alert('恭喜你赢了！'), 300);\n          return;\n        }\n      }\n    }\n    \n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE; j++) {\n        if (grid[i][j] === 0) return;\n      }\n    }\n    \n    for (let i = 0; i < SIZE; i++) {\n      for (let j = 0; j < SIZE - 1; j++) {\n        if (grid[i][j] === grid[i][j + 1]) return;\n      }\n    }\n    \n    for (let j = 0; j < SIZE; j++) {\n      for (let i = 0; i < SIZE - 1; i++) {\n        if (grid[i][j] === grid[i + 1][j]) return;\n      }\n    }\n    \n    setTimeout(() => alert('游戏结束！得分：' + score), 300);\n  };\n  \n  // 明暗模式适配（保持不变）\n  const checkThemeMode = () => {\n    isDarkMode = document.documentElement.classList.contains('dark');\n    renderGrid();\n  };\n  \n  const themeObserver = new MutationObserver(() => checkThemeMode());\n  themeObserver.observe(document.documentElement, { attributes: true });\n  \n  // 键盘控制（保持不变）\n  const handleKeydown = (e) => {\n    switch (e.key) {\n      case 'ArrowLeft': handleMove('left'); e.preventDefault(); break;\n      case 'ArrowRight': handleMove('right'); e.preventDefault(); break;\n      case 'ArrowUp': handleMove('up'); e.preventDefault(); break;\n      case 'ArrowDown': handleMove('down'); e.preventDefault(); break;\n      default: return;\n    }\n  };\n  \n  // 触屏控制（核心修复：区分按钮和棋盘触摸）\n  let touchStartX = 0, touchStartY = 0;\n  \n  // 触摸开始：记录目标元素\n  const handleTouchStart = (e) => {\n    touchTarget = e.target; // 记录触摸的元素（按钮或棋盘）\n    // 只有触摸棋盘时才处理滑动逻辑\n    if (touchTarget === boardEl || boardEl.contains(touchTarget)) {\n      isTouching = true;\n      touchStartX = e.touches[0].clientX;\n      touchStartY = e.touches[0].clientY;\n      e.preventDefault();\n    }\n    // 触摸按钮时不阻止默认行为，确保点击有效\n  };\n  \n  // 触摸移动：只在触摸棋盘时阻止滚动\n  const handleTouchMove = (e) => {\n    if (isTouching && (touchTarget === boardEl || boardEl.contains(touchTarget))) {\n      e.preventDefault(); // 仅棋盘滑动阻止滚动\n    }\n  };\n  \n  // 触摸结束：区分处理\n  const handleTouchEnd = (e) => {\n    if (isTouching) {\n      isTouching = false;\n      const touchEndX = e.changedTouches[0].clientX;\n      const touchEndY = e.changedTouches[0].clientY;\n      const diffX = touchEndX - touchStartX;\n      const diffY = touchEndY - touchStartY;\n      \n      if (Math.abs(diffX) > 30 || Math.abs(diffY) > 30) {\n        if (Math.abs(diffX) > Math.abs(diffY)) {\n          diffX > 0 ? handleMove('right') : handleMove('left');\n        } else {\n          diffY > 0 ? handleMove('down') : handleMove('up');\n        }\n      }\n      e.preventDefault();\n    }\n    touchTarget = null; // 重置触摸目标\n  };\n  \n  // 为按钮添加专门的触摸事件（解决移动端点击无反应）\n  const handleButtonTouch = (callback) => {\n    return (e) => {\n      e.stopPropagation(); // 阻止事件冒泡到容器\n      callback();\n    };\n  };\n  \n  // 事件绑定（优化版）\n  document.addEventListener('keydown', handleKeydown);\n  container.addEventListener('touchstart', handleTouchStart, { passive: false });\n  container.addEventListener('touchmove', handleTouchMove, { passive: false });\n  container.addEventListener('touchend', handleTouchEnd, { passive: false });\n  \n  // 按钮单独绑定触摸和点击事件，确保移动端响应\n  resetBtn.addEventListener('click', initGrid);\n  resetBtn.addEventListener('touchstart', handleButtonTouch(initGrid), { passive: true });\n  undoBtn.addEventListener('click', undoMove);\n  undoBtn.addEventListener('touchstart', handleButtonTouch(undoMove), { passive: true });\n  \n  // 初始化\n  checkThemeMode();\n  initGrid();\n}\n</script>\n```\n\n# 问题\n- 触控模式稍微有点bug，刷新一下能恢复\n\n# 截图\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/2048-1.jpg)\n\n# Tips\n本文章中的代码使用豆包AI修改而成，如有错误，请指出，酥米将会及时更改。","tags":["博客","教程"],"categories":["教程类"]},{"title":"顺德容桂游记：交响于渔人码头河边的复古与潮流","slug":"酥米的碎碎念/顺德容桂游记","url":"/酥米的碎碎念/顺德容桂游记/","content":"\n# 前提\n\n{% note orange 'anzhiyufont anzhiyu-icon-bullhorn' flat %}截稿前刚好到10月6日中秋节🌙，酥米祝各位中秋节快乐吖！😀{% endnote %}\n\n其实国庆节当天我就已经去了，选择现在发其实是本来想等南沙游记发出之后一起发，不过最终还是没有如愿（没写完😭），经过几天润色，今天终于是憋出来了哈哈。\n\n\n\n# 出发的动机\n\n其实一开始我并没有去容桂的想法，因为太远了，而且缺少轨道交通（容桂没有通地铁真的遗憾，佛山11号线也不知道要几年规划了）。不过国庆第一天在家里太无聊了，萌生了出去玩的想法，又突然记起来有那么个地方，于是自然而然去了。\n\n# 出发！\n\n于是我带上随身的包，飞奔出门，《赶》往目的地😉。因为容桂没有通地铁，并且考虑假期地铁高峰期，我直接乘搭公交车前往大良（顺德客运站），再转车前往容桂街道。我先乘搭佛236（九江方向）前往乐从公交中心，之后走去三乐路路口公交站乘坐341线前往顺德客运站。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/sdrg-5.jpg)\n\n乐从城区边上（佛山大道南）\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/sdrg-6.jpg)\n\n这里是三乐路和顺德快速路入口。\n\n当我慢慢走向路口公交站的时候，一台公交车缓缓开出路。是的，这台车就是我要坐的341公交车，也顾不上那么多了，我直接飞奔起步，抢着最后一步跑去公交车站上了车（差点没赶上）。\n当我气喘吁吁刷卡的时候，诶！怎么没反应，司机的声音突然出现：“你要去哪里啊？”喘的我差点忘了这辆公交是分段计费了😅，直接报上顺德客运站，需要四块钱，不过广佛通有公交优惠（是3.6块，南海禅城区的公交都打8折，4块车票仅需2.8，但是其他三个区只打九折，所以就要3.6啦）\n\n# 旅途之中\n\n顺德的快巴就是不一样，车辆在顺德快速路狂飙，遇到没有人的站直接飞。速度估计得有40-60km/h了（吐槽一句，禅城南海的公交一个比一个慢，比如桂城-禅城去佛山西站的G5公交车，需要一个小时才能摇完15km的路程🌚🌚）。途径经过北滘镇和伦教街道，还要跨过顺德水道，当车辆走过顺德立交桥的时候，就宣布进入了顺德大良（顺德中心城区啦），经过大约1小时15分钟的路程，我到达了顺德客运站\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/sdrg-7.jpg)\n\n之后，我要乘坐顺德318路公交车，前往容桂街道信德上城（渔人码头南）公交站\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/sdrg-8.jpg)\n\n约莫10分钟，车辆从客运站开出，我也顺利的坐上了公交车，途径顺峰山和大良派出所，跨过德胜河和容奇大桥后，到达了容桂街道。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/sdrg-9.jpg)\n\n40分钟后，我到达了渔人码头南站，一下车，我只望见许多的旅客往北闸大街走去（那里是渔人码头的入口），于是我跟随人流往里面走去\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/sdrg-10.jpg)\n\n里面人潮涌动，虽没有很拥挤，但也比较多人。空气里混杂着烟火气的气息（是烧烤！🤤），我继续往前走，里面有一个广场\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/sdrg-11.jpg)\n\n里面是复古风的商业街，不过想吐槽一句（本来想买杯瑞幸的，里面挤满了人，我怕等到回去了都没拿到饮料，遂作罢🤔）。从商业街穿出去，就能望到渔人码头的真实面貌\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/sdrg-4.jpg)\n\n河边，醒目的红色“I ❤️ SD”前，游人或驻足拍照，或凭栏眺望河面。河水悠悠，对岸的建筑在绿意掩映中若隐若现，一棵绿树旁，有人正以江景为幕，定格此刻的悠闲。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/sdrg-2.jpg)\n\n不远处，蓝白相间的灯塔矗立河边，像一位沉默的守护者。它与背后的现代高楼群形成奇妙对比，蓝天流云之下，江水、灯塔、楼宇共同勾勒出一幅动静相宜的画卷。江畔的小店外，有人在露台上闲坐，将这江景与人文交融的景致尽收眼底。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/sdrg-3.jpg)\n\n转角处，一栋建筑化身艺术画布：墙面上，猫咪、兔子的涂鸦灵动俏皮，屋顶上，大白与少年的巨型雕塑童趣满满，下方的麦当劳黄色M标识格外醒目，“渔人码头”的招牌诉说着这里的前世今生。新旧元素碰撞，让建筑成了网红打卡的吸睛点，往来人群涌动，或在店前驻足，或在巷间穿梭，烟火气十足。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/sdrg-1.jpg)\n\n再看那栋写着“顺德渔”的建筑，墙面的大字苍劲有力，屋顶的星巴克、各类商铺的招牌琳琅满目，肯德基、台球俱乐部、烤肉店……潮流业态与复古建筑碰撞出别样活力。楼下，人群熙攘，电动车停放整齐，补水站的蓝色帐篷为游人送上一丝清凉，处处是热闹的生活气息。\n\n岁月痕迹与新时代的潮流创意交织，江风裹挟着艺术、美食与人文的气息，让每一步慢步中都成了一场复古与潮流的惊喜碰撞，这便是容桂渔人码头独有的魅力。","tags":["长篇碎碎念"],"categories":["个人记录类"]},{"title":"南沙万顷沙游记：大湾区中的闪耀明珠","slug":"酥米的碎碎念/南沙游记","url":"/酥米的碎碎念/南沙游记/","content":"\n# 前提\n\n上半年其实就有想要去一趟南沙十九涌（其实是想看深中通道）的想法了，但是当时只是去那边兜了两圈，也没有到处去看看，况且当时旁边在修地铁，路也没有修好，路坑坑洼洼的，坐公交进去要了我半条命。\n\n（是的，这是第二次去南沙区万顷沙镇啦/doge）\n\n这是上一次的图片😀：\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ns-3.jpg)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ns-9.jpg)\n\n\n# 旅程启动！\n\n终于在年底国庆凑出了时间，那不得狠狠去一波看看深中通道（刚好在万顷沙尖尖的体育馆也在年中建好了），于是我约上了一位朋友，一齐前往大湾区体育中心，一窥深中通道的真容（是的上次去十九涌没看到深中通道我哭死😭）。\n\n从佛山出发，需要一共3小时的车程，原计划是进入广州市区（沥滘转乘**3号线**换乘**18号线**）。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ns-4.jpg)\n但是我并不想在国庆期间进入广州（因为今天正好碰巧琶洲在搞**CICF漫展**，三号线会被**挤爆**的🌚🌚），所以我们从祖庙搭乘**广佛线**，在魁奇路转乘**佛山2号线**到广州南站搭乘**22号线**，在番禺广场转乘湾区最速地铁🚝**18号线**\n\n（真的能跑到*160km*诶😍）\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ns-7.jpg)\n\n经过将近一小时20分的车程，我们到达了地铁横沥站（其实很快了，毕竟将近50km的距离，如果是从广州南站转**7号线**去大学城坐**4号线**去南沙需要2小时起步😅，而且还摇，谁坐谁无语）。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ns-5.jpg)\n\n之后我们需要转坐**南沙G1**公交车前往大湾区体育中心总站，这个过程又需要一个半小时啦~\n\n不过这次的乘车体验比上次好了好多好多哇，上次因为地铁在施工，路也没修好，一路上又颠簸带摇晃，摇的我都不舒服了，不过这次过来，新垦那边已经把路修个七七八八了，只剩下地铁的部分还在修路。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ns-8.jpg)\n\n车行在刚重建好的灵新大道上，视野格外开阔。南沙港快速的立交桥尤其壮观，灰白色的桥体架在连片绿地间，像一片翠绿平原上骤然绽开的花，线条利落又透着生机。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ns-1.jpg)\n\n\n从新垦出发后，约莫五十分钟车程，我们便到了大湾区体育中心站。刚推开车门，一股滚烫的热气就直扑过来——秋老虎的威力仍在，晒得路面都泛着微光，却丝毫不减抵达目的地的期待。\n\n\n# 终到\n\n我本以为这么偏僻的地方会人烟稀少，实则完全相反，坐公交的一路上也有许多与我们同行的游客，互相谈论着体育中心的景色，大家都期待着美景如画的体育中心。我转眼望去：\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ns-6.jpg)\n\n眼前的大湾区体育中心，以其独特的流线型外观惊艳目光——仿若一朵在阳光下舒展的巨形“木棉花”，金属质感的“花瓣”纹理细腻、弧度优雅，现代工艺与艺术美感交织，既透着建筑的厚重，又盈满灵动的活力，似在无声诉说湾区对体育激情的热忱追求。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ns-11.jpg)\n\n大湾区体育中心和深中通道一齐，共同织就一幅活力奔涌、前景璀璨的湾区画卷，让人沉醉于这片土地的创新与繁荣之中。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ns-2.jpg)\n\n此刻我站在大湾区的三角中心，吹着温凉的海风，看着屹立在海面上的深中通道。感叹着大湾区和祖国快速发展，心中自豪万分……\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ns-10.jpg)","tags":["长篇碎碎念"],"categories":["个人记录类"]},{"title":"Windows 11 Insider Preview Build 26220.6760 更新日志：新增任务栏网速测试与多项优化","slug":"Windows/win11dev3","url":"/Windows/win11dev3/","content":"\n# 版本信息\n系统版本：Windows 11 25H2\n\n内核版本：26220.6760\n\n频道：Dev Channel\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/1-4.jpg)\n\n> 微软于2025年9月29日向Dev频道的Windows Insider项目成员推送了Windows 11 Insider Preview Build 26220.6760 (KB5065793) 版本更新。本次更新为Windows 11版本25H2带来了多项实用功能改进，包括任务栏内置网速测试、语音访问延迟设置调整，以及针对文件资源管理器、表情符号和Copilot+ PC体验的多项优化和修复。\n\n---\n\n# 逐步推出的新功能与改进\n\n以下功能正逐步向开启了“在最新更新可用时立即获取”选项的Dev频道用户推送：\n\n## 1. 任务栏与系统托盘：内置网络速度测试\n\n*   新增内置**网络速度测试工具**，可直接从任务栏访问。\n*   启动方式：通过**Wi-Fi和蜂窝网络快速设置页面**，或右键单击系统托盘中的网络图标。\n*   该工具在默认浏览器中打开，支持测试**以太网、Wi-Fi和蜂窝网络连接**，帮助评估网络性能和排查问题。\n\n## 2. 入门应用与Microsoft 365 Copilot\n\n*   为受管理的商业设备（拥有有效的Microsoft 365订阅）在“入门”应用中新增**Microsoft 365 Copilot页面**。\n*   此体验旨在帮助用户更轻松地**发现和使用Microsoft 365 Copilot**，直接在入门流程中提供关键功能的快速访问和有用指导。\n\n## 3. Windows搜索（Copilot+ PC）\n\n*   针对Copilot+ PC改进了Windows搜索，更新了**文件资源管理器搜索框的占位符文本**，以提高对今年早些时候引入的改进版Windows搜索体验的认知度。\n\n# 面向所有Dev频道用户的更改与改进\n\n以下改进正向所有Dev频道用户逐步推出：\n\n## 1. 文件资源管理器\n\n*   新增**StorageProvider API**，允许云提供商与文件资源管理器主页集成。\n\n## 2. 表情符号\n\n*   **暂时移除了Emoji 16.0**，将在未来的版本中重新引入。\n\n## 3. 语音访问\n\n*   引入新的“**执行前等待时间**”设置，允许用户配置语音命令执行前的延迟。\n*   为**不同语速模式的用户**提供了更大的灵活性，无论说话慢还是快，都能实现更准确的识别。\n*   设置路径：语音访问设置 > 执行前等待时间，然后选择最适合的选项。\n\n# 逐步推出的修复\n\n以下修复正逐步向开启了“在最新更新可用时立即获取”选项的Dev频道用户推送：\n\n| 组件 | 修复描述 |\n| :--- | :--- |\n| **常规** | 修复了导致部分屏幕阅读器在最近更新后**无法读取屏幕内容**的底层问题。 |\n| **Click to Do (预览版)** | 修复了在Copilot+ PC上**有时按WIN + P会意外调用Click to Do**的问题。 |\n| **任务栏和系统托盘** | 修复了最近版本中**电池图标与实际充电状态不同步**的问题（例如，已插入电源却显示未充电）。 |\n| **文件资源管理器** | 修复了自定义文件夹视图（例如按名称排序文件或更改图标大小）后，这些设置**仅应用于特定导航路径的问题**。之前，从其他应用（如浏览器）打开同一文件夹时，设置不会保留，导致每次都需要手动重新应用。这在关闭了“按日期分组”的**下载文件夹**中尤为明显。 |\n| **锁定和登录屏幕** | 修复了最近版本中，**尽管支持媒体控制的应用正在播放媒体，但锁定屏幕上可能不显示媒体控件**的问题。 |\n| **Windows Update** | 修复了一个底层问题。 |\n\n# 已知问题\n\n微软正在调查此版本中存在的以下问题：\n\n*   **Click to Do**：通过右边缘手势在主显示器上启动Click to Do会导致**滑动视觉效果显示在错误的显示器上**。\n*   **锁定和登录屏幕**：此版本中**锁定屏幕上可能不显示媒体控件**。\n*   **任务栏**：由于问题，任务栏预览的**新动画已被暂时禁用**。\n\n# 更新提示\n\n*   该版本通过**受控功能推送 (CFR)** 方式分发。\n*   建议Dev频道用户在“设置”>“Windows更新”中**开启“在最新更新可用时立即获取”** 切换开关，以逐步体验到所有新功能。\n*   **Copilot+ PC 的特定功能需要符合相应规格的硬件支持**。\n\n{% note warning flat %}此版本为开发预览版，**稳定性无法与正式版相比**，不建议在生产环境中使用。部分新功能可能需要特定硬件支持，且推送范围可能受地区限制。{% endnote %}\n\n**【本文基于微软官方博客更新日志编写，具体功能体验可能因设备配置和区域设置而有所不同】**\n\n\n## Tips\n本文章使用Deepseek V3基于微软官方更新日志润色编写而成，具体功能体验可能因设备配置和区域设置而有所不同，如有错误，请指出，酥米将会及时更改。","tags":["系统","Windows"],"categories":["系统类"]},{"title":"Hexo博客添加电子木鱼","slug":"教程/blogelectronfish","url":"/教程/blogelectronfish/","content":"\n# 前提\n\n之前博客里面一直都有电子木鱼，但是之前是塞了一个单独的网页界面，文件都是分散开的，加载也很慢，主要的还是影响博客的加载速度，于是我使用豆包AI基于52JS大佬的项目大改了一下，目前不需要文件，只需要将代码嵌入到界面的index.md文件里面即可搞定电子木鱼界面。\n\n# Demo\n\n本站已经内嵌此项目，可以去康康哦~ \n\n{% link 电子木鱼,酥米的小站,/fish/ %}\n\n# 优势\n\n- 不需要引用文件\n\n- 尽量修复第一次点进去无法正常使用的问题（还是有概率出现用不了的问题，不过刷新一下就好了）\n\n- 适配anzhiyu深色亮色模式，会跟着一起切换\n\n- 总代码少，便于博客加载\n\n# 创建界面\n\n可以先使用指令单独创建一个电子木鱼的页面\n\n`hexo new pages \"页面名称\"`\n\n然后使用工具编辑`“页面名称”/index.md`\n\n# 代码\n\n代码如下：\n```index.md\n\n<!-- 隔离容器 - 确保样式不冲突 -->\n<div id=\"fish-container\" style=\"all: initial; display: block; margin: 20px auto; max-width: 600px; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 12px rgba(0,0,0,0.1);\">\n  <div class=\"centerContent\">\n    <div id=\"top\">\n      <div class=\"score\">\n        <div class=\"count\">0</div>\n        <div class=\"subtitle\">功德</div>\n      </div>\n    </div>\n    <div id=\"center\">\n      <svg class=\"myFish\" width=\"157pt\" height=\"126pt\" viewbox=\"0 0 247 197\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g id=\"fish-svg\">\n          <path class=\"fish-path\" d=\" M 109.12 6.53 C 124.09 4.27 139.37 2.82 154.47 4.79 C 173.07 7.14 191.38 14.02 206.02 25.89 C 217.01 34.77 225.17 46.63 231.55 59.13 C 237.81 72.25 241.16 86.53 243.92 100.74 C 225.49 104.75 206.58 105.76 187.77 106.20 C 186.21 100.02 183.12 93.94 177.74 90.25 C 172.00 85.96 163.98 84.19 157.26 87.18 C 145.99 91.69 139.62 105.22 142.63 116.85 C 145.12 127.39 154.97 136.11 166.05 135.69 C 176.18 134.97 184.61 126.81 187.19 117.22 C 192.74 116.73 198.32 116.63 203.89 116.32 C 217.57 115.26 231.14 113.14 244.82 111.98 C 245.52 121.28 246.13 130.75 244.11 139.94 C 242.32 149.02 239.23 158.07 233.39 165.39 C 224.88 176.55 212.15 183.64 199.01 187.98 C 187.42 191.86 175.20 193.41 163.05 194.29 C 140.40 195.87 117.64 195.62 94.99 194.19 C 74.79 192.81 54.55 190.78 34.79 186.17 C 27.91 184.54 21.07 182.47 14.77 179.21 C 8.58 175.93 4.23 169.71 2.72 162.92 C -0.48 151.41 3.00 139.09 9.20 129.21 C 14.61 119.75 27.61 116.88 30.81 105.83 C 35.50 90.01 37.28 73.40 42.87 57.82 C 47.56 45.36 54.34 33.26 64.82 24.75 C 77.25 14.19 93.24 9.04 109.12 6.53 Z\"></path>\n        </g>\n      </svg>\n    </div>\n    <div id=\"bottom\">\n      <div class=\"keyTips\">\n        <key>点击</key>积攒功德\n        <span id=\"autoClick\" class=\"autoClick\">自动点击</span>\n      </div>\n      <div class=\"leftRight\">\n        <div class=\"left\">敲电子木鱼，见机甲佛祖，修赛博真经。</div>\n        <div class=\"right\">\n          <a href=\"https://github.com/52js\" class=\"textButton\">\n            <div class=\"text\">@52js & Supermini233</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <style>\n    /* 基础样式 - 确保优先级 */\n    #fish-container {\n      --text-color: #eee;\n      --bg-color: #111;\n      --sub-color: #aaa;\n      --fish-color: #eee;\n      --key-bg: #444;\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif !important;\n      background: var(--bg-color) !important;\n      color: var(--text-color) !important;\n      padding: 20px !important;\n      transition: background-color 0.3s ease, color 0.3s ease !important;\n    }\n\n    /* 适配Anzhiyu亮色模式 */\n    html[data-theme=\"light\"] #fish-container,\n    body.light #fish-container {\n      --text-color: #333;\n      --bg-color: #f5f5f5;\n      --sub-color: #666;\n      --fish-color: #333;\n      --key-bg: #ddd;\n    }\n\n    /* 核心样式 */\n    #fish-container .centerContent {\n      width: 100% !important;\n      min-height: 300px !important;\n      display: flex !important;\n      flex-direction: column !important;\n      justify-content: space-between !important;\n      padding: 1rem 1rem !important;\n    }\n\n    #fish-container .score {\n      font-family: \"Helvetica Neue\", sans-serif !important;\n      text-align: center !important;\n      width: 100% !important;\n      margin: 20px 0 !important;\n    }\n\n    #fish-container .count {\n      text-align: center !important;\n      font-size: 6rem !important;\n      line-height: 1 !important;\n      transition: transform 0.1s ease !important;\n      color: var(--text-color) !important;\n    }\n\n    #fish-container .subtitle {\n      font-size: 1.5rem !important;\n      color: var(--sub-color) !important;\n      margin-top: 10px !important;\n    }\n\n    #fish-container #center {\n      display: flex !important;\n      justify-content: center !important;\n      align-items: center !important;\n      margin: 20px 0 !important;\n      position: relative !important;\n    }\n\n    #fish-container .myFish {\n      cursor: pointer !important;\n      margin: 0 auto !important;\n      pointer-events: auto !important;\n      transition: transform 0.1s ease !important;\n    }\n\n    #fish-container .fish-path {\n      fill: var(--fish-color) !important;\n      opacity: 1.00 !important;\n      transition: fill 0.3s ease !important;\n    }\n\n    #fish-container #bottom {\n      color: var(--sub-color) !important;\n      font-size: 0.9rem !important;\n      padding: 0 5px !important;\n      text-align: center !important;\n    }\n\n    #fish-container .keyTips {\n      display: flex !important;\n      justify-content: center !important;\n      align-items: center !important;\n      margin-bottom: 15px !important;\n    }\n\n    #fish-container .keyTips key {\n      color: var(--text-color) !important;\n      background-color: var(--key-bg) !important;\n      margin: 0.3rem 0.45rem !important;\n      border-radius: 0.3rem !important;\n      padding: 0.2rem 0.5rem !important;\n      font-size: 0.7rem !important;\n    }\n\n    #fish-container .leftRight {\n      display: flex !important;\n      justify-content: space-between !important;\n      align-items: center !important;\n    }\n\n    #fish-container .left {\n      font-size: 12px !important;\n    }\n\n    #fish-container .textButton {\n      color: var(--sub-color) !important;\n      text-decoration: none !important;\n      transition: color 0.2s ease !important;\n    }\n\n    #fish-container .textButton:hover {\n      color: var(--text-color) !important;\n    }\n\n    #fish-container #autoClick {\n      cursor: pointer !important;\n      margin-left: 10px !important;\n      transition: all 0.2s ease !important;\n    }\n\n    #fish-container #autoClick.confirm {\n      color: var(--text-color) !important;\n      text-decoration: underline !important;\n    }\n\n    #fish-container .subtitleCountTip {\n      position: absolute !important;\n      color: var(--text-color) !important;\n      animation: float 1s forwards !important;\n      opacity: 0 !important;\n      font-size: 16px !important;\n    }\n\n    @keyframes float {\n      from { transform: translateY(0); opacity: 1; }\n      to { transform: translateY(-30px); opacity: 0; }\n    }\n\n    /* 响应式调整 */\n    @media (max-width: 480px) {\n      #fish-container .count {\n        font-size: 4rem !important;\n      }\n    }\n  </style>\n\n  <script src=\"https://cdn.sumi233.top/npm/howler@2.2.3/dist/howler.min.js\"></script>\n  <script>\n    // 主题变化时更新样式\n    function updateTheme() {\n      const container = document.getElementById('fish-container');\n      if (!container) return;\n      \n      // 触发重绘\n      container.style.display = 'none';\n      setTimeout(() => {\n        container.style.display = 'block';\n      }, 0);\n    }\n\n    // 监听主题变化事件\n    if (window.matchMedia) {\n      const darkModeMedia = window.matchMedia('(prefers-color-scheme: dark)');\n      darkModeMedia.addEventListener('change', updateTheme);\n    }\n\n    // 监听DOM变化（Anzhiyu主题切换时会改变data-theme属性）\n    const observer = new MutationObserver((mutations) => {\n      mutations.forEach(mutation => {\n        if (mutation.attributeName === 'data-theme') {\n          updateTheme();\n        }\n      });\n    });\n\n    observer.observe(document.documentElement, { attributes: true });\n\n    // 初始化木鱼功能\n    function initFish() {\n      const maxRetries = 10;\n      let retries = 0;\n      \n      function tryInit() {\n        const container = document.getElementById('fish-container');\n        const countElement = container.querySelector('.count');\n        const myFishElement = container.querySelector('.myFish');\n        const centerElement = container.querySelector('#center');\n        const autoClickElement = container.querySelector('#autoClick');\n\n        if (!countElement || !myFishElement || !centerElement || !autoClickElement) {\n          retries++;\n          if (retries < maxRetries) {\n            setTimeout(tryInit, 100);\n            return;\n          } else {\n            console.error('无法加载电子木鱼元素');\n            return;\n          }\n        }\n\n        let count = 0;\n        let countFlag = false;\n        let autoClick = false;\n        let autoClickInterval = null;\n\n        try {\n          const saved = localStorage.getItem('count');\n          count = saved ? Number(saved) : 0;\n        } catch (e) {\n          count = 0;\n        }\n        countElement.textContent = count;\n\n        function startAnimate() {\n          countElement.style.transform = 'scale(1.1)';\n          myFishElement.style.transform = 'scale(0.95)';\n          const tip = document.createElement('div');\n          tip.className = 'subtitleCountTip';\n          tip.textContent = '功德 + 1';\n          centerElement.appendChild(tip);\n          setTimeout(() => tip.remove(), 1000);\n        }\n\n        function initAnimate() {\n          countElement.style.transform = 'scale(1)';\n          myFishElement.style.transform = 'scale(1)';\n        }\n\n        function counter() {\n          countFlag = true;\n          count++;\n          countElement.textContent = count;\n          startAnimate();\n          try {\n            localStorage.setItem('count', count);\n          } catch (e) {\n            console.log('无法保存到本地存储');\n          }\n        }\n\n        myFishElement.addEventListener('click', counter);\n        myFishElement.addEventListener('mousedown', () => {\n          setTimeout(initAnimate, 200);\n        });\n\n        document.addEventListener('keyup', (e) => {\n          if (e.key === ' ') {\n            e.preventDefault();\n            if (!countFlag) counter();\n          }\n        });\n\n        document.addEventListener('keydown', (e) => {\n          if (e.key === ' ') {\n            e.preventDefault();\n            countFlag = false;\n            initAnimate();\n          }\n        });\n\n        autoClickElement.addEventListener('click', () => {\n          autoClick = !autoClick;\n          if (autoClick) {\n            autoClickElement.classList.add('confirm');\n            autoClickInterval = setInterval(() => {\n              counter();\n              setTimeout(initAnimate, 200);\n            }, 500);\n          } else {\n            autoClickElement.classList.remove('confirm');\n            clearInterval(autoClickInterval);\n          }\n        });\n\n        console.log('电子木鱼初始化成功');\n      }\n\n      tryInit();\n    }\n\n    if (document.readyState === 'complete') {\n      initFish();\n    } else {\n      window.addEventListener('load', initFish);\n    }\n  </script>\n</div>\n\n```\n\n# 问题\n\n- 目前第一次打开还是会有概率无法使用（很小），刷新一次即可正常使用\n\n\n# 引用教程\n\n- 谢谢大佬们的无私贡献！\n\n{% link ElectronFish 电子木鱼,52JS,https://github.com/52js/ElectronFish %}\n\n\n# 最终实现效果\n\n## 深色模式\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht2-3.png)\n\n## 亮色模式\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht2-2.png)","tags":["博客","教程"],"categories":["教程类"]},{"title":"anzhiyu主题友链测速后端修复","slug":"教程/blogflinkcountfix","url":"/教程/blogflinkcountfix/","content":"\n# 前提\n最近在捣腾anzhiyu主题的友链延迟检测，前端使用了辰渊尘大佬的方法，后端则使用了LiuShen大佬的Github Action方法，但是大佬附带的友链提取js并不适配anzhiyu主题，提示格式错误，于是我投给豆包进行了修改。\n\n现已支持自动检测编码和自动修复并生成合适的友链json,也能检测出语法问题并且输出错误。\n\n脚本可以放在scripts文件夹也可以单独执行`node link.js`来生成\n\n**效果如图**：\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht1-1.png)\n\n# 代码\n代码如下：\n```node.js\nconst YML = require('yamljs');\nconst fs = require('fs').promises;\nconst path = require('path');\n\n// 路径配置\nconst LINK_YML_PATH = path.join('source', '_data', 'link.yml');\nconst OUTPUT_JSON_PATH = path.join('source', 'flink_count.json');\nconst TAKE_COUNT = 2;\n\nasync function processLinks() {\n  try {\n    // 读取文件（二进制方式）\n    const yamlBuffer = await fs.readFile(LINK_YML_PATH);\n    console.log('文件读取成功，大小:', yamlBuffer.length, '字节');\n    \n    // 处理UTF-8 BOM头（移除BOM）\n    let cleanBuffer = yamlBuffer;\n    if (yamlBuffer[0] === 0xef && yamlBuffer[1] === 0xbb && yamlBuffer[2] === 0xbf) {\n      console.warn('检测到UTF-8 BOM头，已自动移除');\n      cleanBuffer = yamlBuffer.slice(3); // 移除前3个BOM字节\n    }\n    \n    // 转换为字符串\n    const yamlContent = cleanBuffer.toString('utf8');\n    \n    // 显示文件前100个字符用于调试\n    console.log('文件前100字符:', yamlContent.substring(0, 100).replace(/\\n/g, '\\\\n'));\n    \n    // 更安全的YAML处理 - 只处理确实为空的rss字段\n    const processedContent = yamlContent\n      .replace(/^\\s*rss:\\s*$/gm, 'rss: \"\"')  // 处理空的rss字段\n      .replace(/\\t/g, '  ');  // 将制表符替换为两个空格（YAML不允许制表符缩进）\n    \n    // 保存处理后的内容用于调试\n    await fs.writeFile('processed_yaml_debug.yml', processedContent, 'utf8');\n    console.log('已保存处理后的YAML到 processed_yaml_debug.yml');\n    \n    // 尝试使用更严格的方式定位错误\n    try {\n      console.log('开始解析YAML...');\n      const data = YML.parse(processedContent);\n      console.log('YAML解析成功，根结构类型:', Array.isArray(data) ? '数组' : typeof data);\n      \n      if (!Array.isArray(data)) {\n        throw new Error('YAML文件的根结构不是数组');\n      }\n      \n      const linkList = [];\n      for (let i = 0; i < Math.min(TAKE_COUNT, data.length); i++) {\n        const item = data[i];\n        if (item && Array.isArray(item.link_list)) {\n          linkList.push(...item.link_list);\n        } else {\n          console.warn(`第${i+1}项不包含有效的link_list数组，已跳过`);\n        }\n      }\n      \n      const outputData = {\n        link_list: linkList,\n        length: linkList.length\n      };\n      \n      await fs.writeFile(\n        OUTPUT_JSON_PATH,\n        JSON.stringify(outputData, null, 2),\n        'utf8'\n      );\n      \n      console.log(`成功生成 ${OUTPUT_JSON_PATH}，共包含 ${linkList.length} 条友链`);\n      \n    } catch (parseError) {\n      console.error('\\n=== YAML解析错误 ===');\n      console.error('错误信息:', parseError.message);\n      \n      // 尝试定位错误行\n      if (parseError.parsedLine) {\n        console.error('错误位置: 第', parseError.parsedLine, '行');\n        // 输出错误行附近的内容\n        const lines = processedContent.split('\\n');\n        const errorLine = parseError.parsedLine - 1; // 转换为数组索引\n        // 显示错误行前后3行\n        for (let i = Math.max(0, errorLine - 3); i <= Math.min(lines.length - 1, errorLine + 3); i++) {\n          console.log(`${i + 1}: ${lines[i]}`);\n        }\n      } else {\n        console.error('错误位置: 未知（可能是文件开头附近）');\n      }\n      console.error('请检查 processed_yaml_debug.yml 文件是否有格式问题');\n    }\n    \n  } catch (error) {\n    console.error('\\n=== 处理过程出错 ===');\n    console.error('错误信息:', error.message);\n  }\n}\n\nprocessLinks();\n```\n\n运行脚本前请先安装yamljs `node install yamljs --save`\n\n# 后端Github Action修复方案\n\n{% note warning flat %}此修复方法仅经过本人测试正常运行，可否正常使用请自行测试{% endnote %}\n\n作者原版github actions运行后可能会出现找不到环境变量的问题，导致抓取失败。\n\n这里有个走偏门的方法，可以Fork后修改workflows文件夹里面的yaml文件夹的**check_links.yml**,将`env：`下面的\n\n`SOURCE_URL: ${{ secrets.SOURCE_URL }}`\n\n改成自己的URL，例如：\n\n`SOURCE_URL: https://www.sumi233.top/flink_count.json`\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht1-4.png)\n\n然后在项目的Github Actions再次运行workflows即可。\n\n# 引用教程\n- 谢谢大佬们的无私贡献！\n\n{% link Github Action实现友链状态检测,LiuShen,https://blog.liushen.fun/posts/c2262998/ %}\n\n{% link 安知鱼主题实现友链状态前端显示,辰渊尘の个人博客,https://blog.mcxiaochen.top/posts/p1c0fbc06/ %}\n\n# 最终实现效果\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht1-2.png)\n","tags":["博客","教程"],"categories":["教程类"]},{"title":"酥米的碎碎念（2）","slug":"酥米的碎碎念/酥米的碎碎念2","url":"/酥米的碎碎念/酥米的碎碎念2/","content":"\n### 前提\n就在前天，“桦加沙”来势汹汹的闯进了我国海域，24号将于广东省阳江市-珠海市登陆。本次台风尤为严重，风力达超17级；距离上一次超强台风还是“山竹”。全广东省地级市也开启了I级戒备，珠三角大部分城市也实行了“五停”。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/talk2-1.jpg)\n\n\n### 台风将来之际\n酥米在佛山市禅城区。从今天起也开始停课停工，我也在22号下午收到了班主任在群里发的停课通知，说实话当时还挺震惊的，因为很久没有遇见能让学校停课的台风了（上一次是山竹）。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/talk2-6.jpg)\n\n今天小区门口物业也一直在播注意台风安全的广播，可想而知这次台风的严重程度。23日整天佛山并没有太大的影响，只有在晚上下了一场雨。不过我看到新闻珠海已经海水上涨淹掉一些地方了（海边的小伙伴一定要注意安全哦！）。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/talk2-5.jpg)\n\n佛山市也已然进入戒备状态，23号21点起佛山地铁停运，高铁也停运了，甚至是大巴也跟着发说明停运了。高明和三水区部分桥梁也停止人/汽车通行。同时停工停课也在进行中。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/talk2-4.jpg)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/talk2-3.jpg)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/talk2-2.jpg)\n\n### 个人的小希望\n希望各位在和我一起在广东的小伙伴，能顺利的度过这次“桦加沙”的”摧残“，平平安安的上学上班。\n\n{% note danger flat %}广东靠海的小伙伴一定要注意安全哦！！！{% endnote %}\n\n也要提醒小伙伴们（尤其是珠海、江门、惠州、深圳、阳江一带的小伙伴！），台风期间非必要切勿随便出门，在外面如果遇到台风需到安全的建筑物下躲避。因为台风可能会导致下雨，也要注意洪涝和山体滑坡的风险哦~","tags":["长篇碎碎念"],"categories":["个人记录类"]},{"title":"Windows 11 Insider Preview Build 26220.6690 更新日志：Copilot 整合再深化","slug":"Windows/win11dev2","url":"/Windows/win11dev2/","content":"\n# 版本信息\n系统版本：Windows 11 25H2\n\n内核版本：26220.6690\n\n频道：Dev Channel\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/1-3.jpg)\n\n> 微软于2025年9月19日向Dev频道的Windows Insider项目成员推送了Windows 11 Insider Preview Build 26220.6690 (KB5065786) 版本更新。本次更新继续深化Copilot与系统壳层的整合，并带来多项体验优化和问题修复。\n\n---\n\n# 1. Click to Do (预览版) 翻译功能\n\n*   为 **Copilot+ PC** 引入了由 **Microsoft Copilot 提供支持的翻译功能**。\n*   当选择的文本与Windows显示语言或首选语言设置不同时，会**出现翻译建议**。\n*   选定的文本会发送到Copilot应用，并在体验中**无缝提供翻译**。\n*   ⚠️ 注意：此功能需要已在之前版本中推出的新Copilot提示框，且**目前尚未向欧洲经济区(EEA)或中国的Insiders推送**。\n\n# 2. 任务栏与系统托盘：分享到 Copilot\n\n*   鼠标悬停在任务栏上已打开的应用窗口时，会出现一个“**分享给 Copilot**”（Share with Copilot）选项。\n*   此功能允许快速与Copilot开始新对话，并使用 **Copilot Vision 扫描、分析**屏幕上的应用内容。\n\n# 3. Desktop Spotlight 上下文菜单选项\n\n*   若在“设置”>“个性化”>“背景”中选择 **Windows Spotlight 作为桌面背景**，右键单击桌面时，上下文菜单会添加“**了解有关此背景的更多信息**”和“**下一个桌面背景**”选项。\n\n# 4. 设置账户管理优化\n\n*   “设置”>“账户”下的“**电子邮件和账户**”部分现已更名为“**您的账户**”（Your accounts）。\n*   这反映了在Windows和应用中保持连接的**更统一和简化的方式**。\n\n# 逐步推出的修复\n\n以下修复正逐步向开启了“在最新更新可用时立即获取”选项的Dev频道用户推送：\n\n| 组件          | 修复描述                                                       |\n| :------------ | :------------------------------------------------------------- |\n| **文件资源管理器** | 修复了在地址栏中直接输入UNC服务器名称可能导致文件资源管理器**无响应的问题** |\n| **Windows Update** | 修复了近期部分Insider安装最新版本时**失败并出现错误0x80070002**的问题   |\n| **音频**        | 解决了近期更新后可能出现的**音频无法正常工作的问题**                   |\n| **设置**        | 修复了启用管理员保护后，“设置”>“系统”>“可选功能”>“添加可选功能”可能**无法加载的问题** |\n\n# 已知问题\n\n微软正在调查此版本中存在的以下问题：\n\n*   **Click to Do**：通过右边缘手势在主显示器上启动Click to Do会导致**滑动视觉效果显示在错误的显示器上**。\n*   **锁定和登录屏幕**：此版本中**锁定屏幕上可能不显示媒体控件**。\n*   **任务栏**：由于问题，任务栏预览的**新动画已被暂时禁用**。\n\n# 更新提示\n\n*   该版本通过**受控功能推送 (CFR)** 方式分发。\n*   建议Dev频道用户在“设置”>“Windows更新”中**开启“在最新更新可用时立即获取”** 切换开关，以逐步体验到所有新功能。\n*   **Copilot+ PC 的特定功能需要符合相应规格的硬件支持**。\n\n> ⚠️ **注意事项**：此版本为开发预览版，**稳定性无法与正式版相比**，不建议在生产环境中使用。部分新功能可能需要特定硬件支持，且推送范围可能受地区限制。\n\n\n## Tips\n本文章使用Deepseek V3基于微软官方更新日志润色编写而成，具体功能体验可能因设备配置和区域设置而有所不同，如有错误，请指出，酥米将会及时更改。","tags":["系统","Windows"],"categories":["系统类"]},{"title":"Windows 11 Insider Preview Build 26220.6682 更新日志：AI功能持续增强","slug":"Windows/win11dev1","url":"/Windows/win11dev1/","content":"\n# 版本信息\n系统版本：Windows 11 25H2\n\n内核版本：26220.6682\n\n频道：Dev Channel\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/1-2.jpg)\n\n> 微软今日向 Dev 频道的 Windows Insider 项目成员推送了 Windows 11 Insider Preview Build 26220.6682 (KB5065782) 版本更新。本次更新主要针对 Copilot+ PC 设备，进一步增强了 Click to Do 功能的实用性和智能化水平，同时对讲述人(Narrator)无障碍功能进行了优化。\n\n---\n\n# 1. Click to Do 功能增强（预览版）\n\n本次更新为 Copilot+ PC 带来了多项 Click to Do 功能的改进：\n\n**自定义指令输入**：现在在 Click to Do 的上下文菜单中可以直接输入自定义指令，与选定的屏幕内容一并发送给 Copilot，交互更加灵活。\n\n**本地 AI 推荐提示**：菜单下方会显示由设备端 Phi-Silica 模型生成的推荐提示（目前支持英文、西班牙文和法文），响应更快且保护隐私。\n\n**视觉动画优化**：使用屏幕右边缘手势触发 Click to Do 时，新增了流畅的视觉动画反馈，操作体验更加直观。\n\n**功能发现性提升**：上下文菜单中新增\"新建和热门\"动作标签，帮助用户更快发现实用功能。同时\"总结\"功能的输出结果更加简洁精炼。\n\n**开始菜单集成**：开始菜单的\"推荐\"区域会展示 Copilot 示例提示，引导用户体验 AI 功能。\n\n> ⚠️ 注意：上述 Click to Do 增强功能目前未向欧洲经济区(EEA)或中国的 Insiders 推送。\n\n# 2. 讲述人(Narrator)无障碍功能优化\n\n本次更新对讲述人功能进行了多项改进：\n\n*   **自然语音优化**：使用自然语音时，讲述人播报标题或语法错误时不再显著提高音调，减少听觉干扰\n*   **脚注导航改进**：新增脚注导航功能，可清晰听取脚注编号，便于处理参考文献类文档\n*   **阅读稳定性提升**：修复了讲述人可能在文档中间意外停止阅读的问题\n\n# 3. 新表情符号加入\n\n本次更新引入了 7 个新的 Emoji 16.0 表情符号：\n\n| 表情符号 | 名称               | 含义与使用场景                                 |\n| :------- | :----------------- | :------------------------------------------- |\n| 🫤       | 有眼袋的脸         | 表示**疲惫、倦怠**或需要休息                 |\n| 🫰       | 指纹               | 代表**身份、安全、解锁**或隐私相关话题         |\n| 🫚       | 根类蔬菜           | 代表**健康饮食、园艺**或烹饪                 |\n| 🫗       | 光秃秃的树         | 象征**冬天、休眠、空旷**或孤独感               |\n| 🫖       | 竖琴               | 表示**音乐、艺术**，或带有古老、优雅的意境           |\n| 🫕       | 铲子               | 用于**园艺、挖掘**，或比喻“摆脱困境” |\n| 🫔       | 飞溅               | 表达**创造力、混乱**或趣味性的泼洒               |\n\n> 💡 提示：这些新表情符号在系统表情面板中可用，但第三方应用可能需要更新才能正确显示。\n\n# 4. Xbox 控制器操作调整\n\n*   **短按** Xbox 按钮：打开 Game Bar\n*   **长按** Xbox 按钮：打开任务视图(Task View)\n*   **按住** Xbox 按钮：保持原有功能，关闭控制器\n\n# 问题修复\n\n本次更新包含了多项稳定性改进：\n\n*   提升了任务栏隐藏和取消隐藏的可靠性\n*   解决了文件资源管理器可能无响应的问题\n*   修复了使用 NDI 和显示捕获时 OBS 音频卡顿的问题\n*   改进了 Windows 沙盒的稳定性\n*   优化了语音访问和 Windows Hello 的体验\n\n# 已知问题\n\n*   Click to Do 可能无法为某些用户启动\n*   锁定屏幕上可能不显示媒体控件\n*   部分用户可能会遇到音频问题，设备管理器中可能出现黄色感叹号\n*   某些 PC 在休眠期间可能会遇到 bugcheck（绿屏错误）\n*   文件资源管理器主页中的\"共享\"部分对某些用户可能显示为空\n\n由于此版本是测试版，**稳定性可能受到影响**，不建议在生产环境中使用。\n\n## Tips\n本文章使用Deepseek V3基于微软官方更新日志润色编写而成，具体功能体验可能因设备配置和区域设置而有所不同，如有错误，请指出，酥米将会及时更改。","tags":["系统","Windows"],"categories":["系统类"]},{"title":"Windows 11 Insider Preview Build 26220.5790 更新日志：AI赋能更智能的PC体验","slug":"Windows/win11dev","url":"/Windows/win11dev/","content":"\n# 版本信息\n系统版本：Windows 11 25H2\n\n内核版本：26220.5790\n\n频道：Dev Channel\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/1-1.jpg)\n\n> 微软最新发布的Windows 11 25H2 Build 26220.5790预览版为Copilot+ PC带来了一系列AI驱动的新功能，让操作系统变得更加智能高效。\n\n近日，微软向Dev频道的Windows Insider项目成员发布了Windows 11 Insider Preview Build 26220.5790（KB5065779），作为即将到来的25H2版本的一部分。\n\n这个版本主要集中在提升Copilot+ PC的体验上，引入了智能语音听写、扩展的Studio Effects支持以及文件资源管理器的改进。\n\n---\n\n# 智能语音听写：更流畅的语音输入体验\n\nBuild 26220.5790 为Copilot+ PC带来了**流体听写（Fluid Dictation）** 功能。它通过设备端的小型语言模型（SLMs）实时自动纠正语法、标点符号和填充词，从而减少手动编辑的需要。\n\n这意味着用户在使用语音输入时可以获得更流畅、更智能的体验。\n\n此功能在任何支持文本输入的应用中都能工作，但在密码或PIN等安全字段中会自动禁用以保护隐私。目前流体听写支持**所有英语 locales**。\n\n要使用此功能，用户只需启动语音访问（Voice Access）并完成设置（如果是首次使用），流体听写默认即为启用状态。\n\n# Studio Effects扩展支持更多摄像头\n\n本次更新另一个亮点是 **Windows Studio Effects 开始支持更多类型的摄像头硬件**。\n\n此前Studio Effects主要限于集成式笔记本电脑摄像头，现在，在支持的Copilot+ PC上，用户可以在**额外的备用摄像头**（如USB网络摄像头或笔记本电脑的内置后置摄像头）上使用AI加持的摄像头增强功能了。\n\n要启用该功能，只需导航到 **“设置”>“蓝牙和设备”>“摄像头”**，从已连接的摄像头列表中选择首选摄像头，然后打开高级摄像头选项菜单，找到新的“使用Windows Studio Effects”切换开关即可。\n\n需要注意的是，该功能所需的Windows Studio Effects驱动程序更新将**首先推送给基于Intel的Copilot+ PC**，基于AMD和Snapdragon的Copilot+ PC则在未来几周内陆续获得支持。\n\n# 文件资源管理器的新悬停操作\n\n文件资源管理器的“主页”现在提供了**新的悬停操作**，以便更快地进行文件管理。\n\n当用户在文件资源管理器主页中将鼠标悬停在文件上时，会显示“打开文件位置”和“向Copilot询问此文件”等命令。这使得用户能更轻松地尝试Copilot集成并附加文件。\n\n不过此体验目前仅限使用**Microsoft帐户登录**的用户。对未来工作或学校账户（Entra ID）的支持将在未来的版本中推出，并且此更改尚未向欧洲经济区（EEA）的Windows Insider成员推出。\n\n# 底层优化和问题修复\n\n除了引入新功能，Build 26220.5790 也带来了一系列修复，提升了系统的稳定性和性能：\n\n*   **常规性修复**：解决了某些设备上各种场景中出现的意外延迟增加问题，包括与文件资源管理器和任务栏的交互（单击可能需要500毫秒才能处理）以及浏览器窗口（尤其是在观看视频时）。\n*   **任务栏和系统托盘**：修复了更改显示分辨率后，任务栏中的应用预览窗口可能与单击/悬停的应用图标**不对齐的问题**。\n*   **文件资源管理器**：修复了安装某些应用程序后，右键单击时上下文菜单可能在正常初始视图和“显示更多选项”之间意外切换的问题。\n*   **设置**：解决了“设置”>“系统”>“存储”>“临时文件”页面在文件扫描阶段**卡住的问题**。\n*   **其他**：修复了导致某些Insiders的事件查看器中出现“Microsoft Pluton加密提供程序未加载，因为初始化失败”并出现错误57的问题。\n\n# 已知问题\n\n目前仍存在一些已知问题，微软正在调查解决：\n\n*   一些PC在**休眠期间**可能会遇到bugcheck（绿屏），建议用户暂时避免使PC休眠。\n*   文件资源管理器主页中的“共享”部分对某些用户可能**显示为空**。\n*   一些Insiders遇到**音频问题**（音频停止工作，设备管理器中设备显示黄色感叹号），可尝试通过更新设备驱动程序来缓解。\n*   正在调查**通过蓝牙使用Xbox控制器**导致PC bugcheck的问题。\n\n---\n\nBuild 26220.5790预览版展现了Windows 11 25H2在**AI与操作系统深度融合**方面的探索。流体听写、扩展的Studio Effects以及更便捷的文件操作悬停菜单，都预示着更智能、更高效的个人计算体验。\n\n由于此版本是测试版，**稳定性可能受到影响**，不建议在生产环境中使用。\n\n## Tips\n本文章使用Deepseek V3润色而成，如有错误，请指出，酥米将会及时更改。","tags":["系统","Windows"],"categories":["系统类"]},{"title":"红米2？Linux？ | 手把手教你刷入PostmarketOS Linux！老机换新颜！","slug":"教程/redmi2linux","url":"/教程/redmi2linux/","content":"\n# 前言\n本期教程将小白式手把手教大家将红米2刷入PostmarketOS\n\n# 前期准备\n- 红米2（1g或者2g版都行，2a不支持刷入Linux）\n- 数据线\n- 正常使用的电脑（建议系统版本windows10以上）\n- 灵巧的手和脑子\n\n# 合并分区\n已升级安卓5.1的增强版机型可以跳过此步骤，非增强版或未升级安卓5.1的增强版请继续往下\n\n## 下载附件\n请按照以下机型下载线刷包\n\n{% link 线刷包,红米2移动版/2a,https://xiaomirom.com/download/redmi-2-redmi-2-pro-wt86047-stable-V9.2.3.0.LHJCNEK/#china-fastboot %}\n\n{% link 线刷包,红米2联通/电信版,https://xiaomirom.com/download/redmi-2-redmi-2-pro-wt88047-stable-V9.2.5.0.LHJMIEK/#global-fastboot %}\n\n{% link Miflash,Miflash刷机工具,https://miuiver.com/miflash/ %}\n\n## 更新最新版系统合并分区\n红米2官方系统安卓5.1版本往上会自动合并分区，仅需使用miflash线刷更新系统即可\n\n首先长按电源键+音量下键将红米2进入Fastboot，并且使用数据线与电脑连接\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20194026.png)\n解压下载好的miflash工具，打开点击左上角的driver选项，点击安装，显示完成后关闭\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20194247.png)\n解压线刷包，miflash中点击选择，选择刚解压的线刷包文件夹\n点击加载设备，让工具识别到设备，识别到了点击刷机等待进度条跑完。如未识别到设备请检测驱动是否安装。\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20194312.png)\n进度条跑完后手机会自动重启，此时即更新完成\n\n\n# 刷入PostmarketOS Linux\n## 下载附件\n请下载以下刷机包和附件\n\n红米2全系PostmarketOS下载：https://images.postmarketos.org/bpo/edge/xiaomi-wt88047/phosh\nADB，recovery，lk2nd等文件的下载地址：https://www.123pan.com/s/mIXlVv-I7PB.html 提取码:sumi\n\n## 开始刷入PostmarketOS\n首先长按电源键+音量下键将红米2进入Fastboot，并且使用数据线与电脑连接\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20194026.png)\n\n解压adb工具，打开cmd，cd到adb目录\n刷入fastboot device检测设备\n出现`xxxxxxxx  fastboot`即成功识别设备\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20194328.png)\n\n输入`fastboot flash recovery “刚下载的rec.img的文件地址”`以刷入Recovery\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20194045.png)\n\n之后手机长按电源键+音量上键进入工程模式，选择recovery模式进入\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20210211.png)\n\n进入rec后点击settings，更改成简体中文\n之后选择清除-高级清除，选择data、system、cache然后滑动清除进行格式化\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20194108.png)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20194140.png)\n\n之后选择格式化Data，输入yes清除，清除后按返回回到主界面\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20194151.png)\n\n选择重启-Bootloader模式进入线刷模式\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20194203.png)\n\n打开cmd，cd到adb目录\n输入`fastboot flash boot “刚下载的lk2nd.img的文件地址”`以刷入引导文件\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20194003.png)\n\n输入后fastboot reboot回车进入lk2nd\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20210821.png)\n\n输入以下命令刷入内核和rootfs\n```\nfastboot flash boot “刚下载的boot.img的文件地址”\nfastboot flash userdata “刚下载的rootfs.img的文件地址”\n```\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-08-19%20210752.png)\n\n刷入后输入fastboot reboot回车或者单击手机电源键即可进入PostmarketOS系统啦！\n\n## Tips\n系统默认密码为：147147\n由于postmarketOS基于alpine而并非常见发行版，软件源生态匮乏，建议使用flatpak安装部分软件\n## 部分截图\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/IMG_2290.jpg)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/IMG_2289.jpg)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/IMG_2275.jpg)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/IMG_2274.jpg)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/IMG_2291.jpg)\n## 视频版\n\n<iframe class=\"bilibili\" src=\"//player.bilibili.com/player.html?isOutside=true&aid=785369943&bvid=BV1E14y1m7xg&cid=1177972746&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\" > </iframe>","tags":["系统","刷机","教程"],"categories":["搞机类","教程类"]},{"title":"使用CloudFlare加速Github Pages","slug":"教程/dnscloudflare","url":"/教程/dnscloudflare/","content":"\n# 前言\n由于Github服务器在国外，导致国内用户总是打不开基于Github Pages的网站（或者抽风），于是在网上翻查了下，发现可以使用CloudFlare CDN进行加速，虽然服务器也在国外，但也好过没有（DOGE。\n\n# 准备事项\n- 一个正常使用的域名\n- 已经搭建好的GitHub Pages，并且绑定上域名\n- 灵活的脑子和手\n\n# 正文\n\n{% link Cloudflare,Cloudflare注册链接,https://dash.cloudflare.com/ %}\n\n打开cloudflare官网，进行注册。注册后点击右上角添加——连接域，输入你的主域名，默认选项继续。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/cloudflaredns%20(1).png)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/cloudflaredns%20(2).png)\n\n之后选择Free版计划，下一步会跳转到DNS记录。新增四个记录，类型为A，勾选代理，名称填写子域名，如要作为网站使用的域名为`www.xxxx.top`那子域名就是`www`，ipv4地址分别如下\n```\n185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153\n```\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/cloudflaredns%20(3).png)\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/cloudflaredns%20(6).png)\n\n之后点击激活，会显示出两个cloudflare的专用解析DNS地址，去域名运营商那修改DNS服务器\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/cloudflaredns%20(4).png)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/cloudflaredns%20(5).png)\n等待运营商域名刷新后就大功告成啦！\n\n\n## 小贴士\n- 域名的DNS修改后，整个域名的DNS解析功能将会迁移至CloudFlare，建议使用单独的域名食用或在cloudflare上重新解析其他子域名记录","tags":["网络"],"categories":["教程类"]},{"title":"每一步都是意外之外！荣耀平板5 10.1英寸版本的各种折腾 （总结篇）","slug":"刷机/Agassi2-W09BHN","url":"/刷机/Agassi2-W09BHN/","content":"\n# 前提\n三天前，我在闲鱼相中了一台荣耀平板5 10英寸，并且以155的低价购入屏幕带线版，当时卖家是说除了屏幕顶上有线其他正常，结果到手三天意外就发生了，屏幕直接被被竖纹给霸占，找商家追诉，返了55块\n![01](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(29).jpg)\n![02](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(26).jpg)\n\n小嘴一句，这个卖家本来还不想理我，直接未读但闲鱼在线，还把简介的非质量问题改成了不退不换，想耍闲鱼小花招，没门！我直接给他甩追差评+投诉+拉黑小连招，让卖家怂的返了一部分的钱款\n![03](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(24).jpg)\n\n# 麒麟659在鸿蒙下\n真的好卡！！！！！！我已经不能用言语形容卡顿，是那种没法正常用的卡顿，鸿蒙的对于老机型的优化真的很垃圾，我不明白套壳emui9为什么还能这么卡，在鸿蒙下没装软件滑动桌面都会卡，更别说了装了软件了，我还跑了个娱乐兔跑分，这颗u跑分在14-15w分左右，和625不分伯仲，但是这个价位要什么自行车？/doge\n![04](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(1).jpg)\n![05](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(2).jpg)\n\n\n# 降级\n## 官方渠道无法正常降级\nOKOK扯远了，回到正题，于是我就开启了我的难崩降级之旅，因为华为的解bl和刷机嘛，需要在emui下实现，所以得从鸿蒙降级下来。\n华为也很鸡贼，明明之前说好升了鸿蒙可以随便降回emui，但是从Harmony Next之后，华为就取消了所以老机型的降级通道，这意味着唯一的官方通道被彻底覆灭，我也尝试过像代理降级的办法，都是无法正常降级的\n\n# 三键强刷\n所幸，我在万维论坛找到了高维禁用的emui9强刷包，食用方法也很简单：\n\n- 下载之后直接解压dload放在sd卡目录（一定是sd卡或者otg，不能是内部存储）\n\n- 然后打开系统自带的计算器输入()()2846579()()进入工程菜单\n\n![06](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(3).jpg)\n\n- 选择软件升级——存储卡升级，平板就会重启到rec自动降级emui9.1了\n\n![07](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(27).jpg)\n\n- 注：由于万维论坛的注册是邀请制，并且限制分享，所以要强刷包下载链接的可以点击右下角三个选项中间的小气泡按钮找我要链接下载\n\n- 也可以使用代理法降级EMUI9（只能降最新的EMUI9.1），这里就不细说了，网上有很多教学视频\n\n\n## Bingo\n恭喜你完成第一步，降级EMUI9，降完级你会得到一个可以正常使用流畅度也还行的麒麟659设备\n（本来想降EMUI8的，但是官方彻底关降级通道了）\n\n# 拆机解锁BL\n但是还不够，我的终极目标是解锁BL刷入LineageOS GSI！达到真正的流畅使用！\n\n## 拆机\n本来是没那么早拆机的，但是因为屏幕迫使我的好奇心一看究竟。\n我讲下我的方法吧（过程全错，结果全对doge）\n\n需要的材料：吹风机、热风枪或者拆机台，镊子一个，翘机片若干，刀片x1\n\n## 步骤\n- 首先拿吹风机调热风或者热风枪调低温，有那个拆机台加热也可以，加热下屏幕四周，一定要热够时间！！！！而且要热一边拆一边，原装屏幕胶很黏，不热拆不下来（不然会像我一样，死活拆不下来，用刀片割胶）\n- 然后用刀片插进屏幕缝隙里翘翘，要慢慢来，不要心急，不要翘成下面的塑料支架，也别妄想从塑料支架上手（深刻的教训呜呜呜，塑料支架里面有螺丝固定）。翘的时候不要刀片朝屏幕方向刮翘，本人亲测会把屏幕边框刮掉色（血的教训呜呜呜！）\n- 如果觉得难拆就用翘片顶着刀片刮开松的地方，划过去，只要不刮到屏幕，使劲造，因为屏幕胶很厚，而且屏幕边底下是塑料支架，只要不要刮太深基本上刮不到里面的东西（指纹键除外，这个要注意不要把指纹键边上的玻璃搞断了）\n- 四个边都撬开就可以拿起屏幕了，到这里其实差不多了。但是因为要短接，屏幕挂着短接很麻烦，我的建议是可以把屏幕拆下来。\n拧下三颗螺丝拆下挡着电池排线和屏幕排线的盖板，把屏幕排线断开拆屏幕就完成了！\n由于拆机拆得太入迷了，所以只有拆完的图片doge\n\n![25](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(19).jpg)\n\n![26](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(7).jpg)\n\n## 解锁BL\n先下载链接里面的工具\n\n{% link 123PAN,刷机工具,https://www.123684.com/s/mIXlVv-LEOB %}\n\n提取码:1234\n\n- 先过开机向导\n- 打开自带计算器输入()()2846579()() 进入工程菜单\n![08](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(3).jpg)\n\n- 选择 后台设置——usb端口设置——选择生产模式\n- 安装华为的COM1.0驱动\n- 将设备关机，用镊子短接COM1.0刷机点和屏蔽罩，一边刷机点，一边屏蔽罩，然后插入数据线，具体短接点可以参考酷安@孙子烧烤 大佬给出的短接截图\n- 设备管理器中出现COM1.0设备就是成功进入啦\n![09](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(28).jpg)\n\n- 打开PotatoNV ，Target device选择刚刚的端口，Bootloader选择Kirin 65X（A），勾引Disable Fblock（关闭工厂解锁，使用用户级解锁，这是因为华为将BL解锁划分成了工程解锁和用户解锁，工程解锁可以访问全部分区，用户级则是system啥的普通分区，不建议使用工程解锁，把其他分区搞坏了没备份修复很麻烦）\n![10](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(4).png)\n\n- 选择start开始解锁！\n- 不一会就会解锁完成自动重启，软件也会显示解锁码，一定要妥善保存，升降EMUI有概率会自动锁上\n![11](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(2).png)\n\n- 解锁之后每次开机有提示是正常的，等五秒或者按电源键继续就行\n![12](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(11).jpg)\n\n至此，荣耀平板5的解锁BL就到这里了\n\n# 刷入LineageOS GSI\n## 前期准备\n- 平板和稳定的数据线\n- 基于Phh的类原生GSI。尽量不高于安卓12、13，高版本安卓比较卡顿，EMUI8选择Aonly分区的，EMUI9以后请选择A/B分区。（别问其他OEM GSI和SGSI能不能开机，答案是不能，原因应该是内核宽容）\n- Magisk 24以上，类原生需要24以上\n- 麒麟盘古工具箱（可以前往酷安@某贼 大佬那下载）\n- 一双灵巧的手（刚刚都完成拆机了应该不会不巧了吧/doge）\n准备好了让我们开始吧！\n\n## 开始刷机\n按住电源 + 音量上进入Fastboot 数据线链接电脑\n解锁BL（这步前面搞完的可以直接跳过）,使用盘古工具箱解锁BL，平板有提示按音量上然后按电源键确认解锁。解锁了会自动重启格式化，格式化失败是正常滴，直接强制重启再次进Fastboot就行\n![13](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(13).jpg)\n\n使用盘古工具箱刷入奇兔通用REC\n![14](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(5).jpg)\n\n重启平板,到警告页面的时候长按电源+ 进入eREC\n选择格式化，输入yes进入REC（由于华为设备系统分区的特殊性，双rec，这一步的目的是以格式化的名义欺骗eREC进入真正的rec，实际上并不会执行格式化命令）\n-然后就进入奇兔rec啦！\n![15](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(14).jpg)\n![16](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(15).jpg)\n\n选择清除，高级选项\n勾选内置存储，Data，System，Cache，Dalvik/ART Cache。滑动清除分区\n![17](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(16).jpg)\n\n完事儿后，回到主页面，重启，重启到Bootloader\n打开盘古工具箱，选择刷入自定义系统镜像，拖入下载的GSI，等待刷机完成\n![18](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(4).jpg)\n\n刷完后，重启等开机。Enjoy it! :)\n![19](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(12).jpg)\n\n## 刷入Magisk\n注：由于GSI SAR分区的特殊性，刷入Magisk会丢失REC，原来REC的分区会被Magisk用来引导带Root的系统\n\n- 从盘古工具箱提取出来奇兔rec镜像，和Magisk一起传进平板\n![20](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(1).png)\n\n- 平板安装Magisk，完成后打开\n- 点击右边的安装——安装到rec-选择一个文件修补然后选择刚刚的奇兔镜像进行修补就行啦\n![21](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(10).jpg)\n\n- 等输出显示All Done！后，链接电脑把平板内置存储Download目录的修补镜像导出电脑\n- 然后将平板进入Fastboot\n- 打开盘古工具箱选择刷入自定义REC拖入刚刚的rec镜像路径，回车等待刷入完成\n![22](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/honorpad5%20(9).jpg)\n\n- 刷入完成后盘古工具箱选择重启\n- 出现启动警告页面后长按三秒音量上键进入erec\n- 选择格式化，输入yes，诱骗erec进入root后的系统\n- 打开Magisk，如果有提示修补选重启修补就行\nMagisk到这里就刷完啦！这篇教程也快到尾声啦，俺还是第一次写这么长的文章，如果有文笔不仔细的地方，请各位见谅！","tags":["刷机","玩机"],"categories":["搞机类","教程类"]},{"title":"MacOS X 10.0 Developer Preview 3安装教程（附酥米的MacOS的小记说说）","slug":"教程/MacOSXDP3install","url":"/教程/MacOSXDP3install/","content":"\n### 前记\n\n在MacOS X之前的MacOS，是属于Classic系列的传统操作系统，由于历史包袱的原因，MacOS Classic对多任务的支持并不完善，采用的是基于程序的协作式多任务管理，把内存依托于应用程序分配，再且加上Classic中并没有所谓的内存保护，导致程序和系统处在同一内存空间中，这就导致一个问题，当程序发生崩溃时，整个系统也会随之崩溃。\n\n![MacOS Classic](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(1).jpg)\n\nApple尝试过修复或者完善这些“烂摊子”，但是由于系统历史包袱原因，系统框架过于老旧。再是后期推出的的系统扩展，系统扩展由第三方或官方提供，可以扩展系统功能或者添加驱动，这就导致一个问题，因为Classic所有的应用扩展驱动系统都是在一个空间内，没有进行隔离，如果扩展冲突或者报错，机子将会连系统一起’宕机‘。\n\n### 转折\n\n苹果也陆陆续续尝试过如copland和AU/X的全新内核的系统，但无一例外，都失败了。直到1997年，苹果收购NeXT公司，被遣退的乔布斯带着NeXTSTEP回到苹果掌舵，NeXTSTEP是乔布斯基于Mach和BSD研发的操作系统，具有完善的GUI，面向对象和Objective-C，强大的多媒体功能，这在当时是十分超前的的。苹果基于NeXTSTEP开发出了现MacOS X Darwin的前身XNU混合内核，之后在1997年中发布了Rhapsody预览开发版，这就是MacOS X的前身……\n\n![NeXTSTEP](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(2).jpg)\n\n之后的事情大家都知道，Rhapsody的大部分组件大幅度得到保留并且逐步完善，并且一步步成为现在的MacOS系统。\n\n### 安装\n\n好啦！酥米扯远了，接下来要体验的版本就是初代MacOS X10.0的预览版本DP3，说起这个预览版本还是很有趣的，DP1和DP2和Rhapsody差不多，用的也是Platinum的界面，还是NeXT+MacOS Classic的味道。但是来到DP3，事情将会截然不同起来，DP3引入了全新的Aqua界面，提升了系统的精致程度（顺带提一嘴，这个aqua界面修修补补用到现在的MacOS最新版）\n\n#### Qemu\n这次我们使用Qemu-system-ppc进行模拟安装\n镜像可以在WinWorldPC中下载\n下载链接：\n\n{% link WinWorldPC,镜像下载链接,http://www.emaculation.com/forum/viewtopic.php?f=34&t=9028 %}\n\n首先将qemu-system-pc解压在目录，然后编写一个Bat脚本用于启动qemu虚拟机\n```\nqemu-system-ppc.exe ^\n-L pc-bios ^\n-M g3beige ^\n-cpu G3 ^\n-m 512 ^\n-drive file=mac.img,format=raw,media=disk ^  ##虚拟磁盘地址，可以通过qemu-img创建，需8g以上\n-drive file=Mdp2.iso,format=raw,media=cdrom ^ ## 安装镜像地址\n-prom-env \"vga-ndrv?-true\" ^\n-prom-env \"boot-device=cd:9,\\\\:tbxi\" ^\n-usb ^\n-netdev user,id=network01 -device sungem,netdev=network01 ^\n-device VGA,edid=on ^\n-boot c\n```\n#### 磁盘分区\n由于DP版本没有磁盘管理工具，所以需要借助MacOS9的启动光盘进行分区,按照图中进行操作就行\n- 打开磁盘分区工具\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/082c7e3d-a76a-44da-94b3-561fed6a306d933d5c1c097fe20b.png)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/b3bede69-ba0e-4ab7-b395-6fca629d892d64f4b84c3853ac43.png)\n\n- 选中刚刚的虚拟磁盘，点击Initialize\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(5).png)\n\n- 再次选择Initialize\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/4d88753e-b7e5-4d36-b6d3-2dddf21b055d87520d3fb48e80d7.png)\n\n至此磁盘的分区步骤全部完毕，接下来就是安装系统啦！\n\n### 正式安装\n- 将虚拟机关机，更换光盘镜像，再次启动虚拟机，等待开机……\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(13).png)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/288631E8586752E8507D5DCC3B077CF7b3b611b98f705add.png)\n\n- 选择Continue继续\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(19).png)\n\n- 选择下一步并且Agree\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(16).png)\n\n- 然后选择硬盘下一步\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(3).png)\n\n- 然后按install进行安装\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(12).png)\n\n- 安装ing……\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/754908397BAF9C1028F57134BAA3C458600fdd045b1f72b8.png)\n\n- 安装完成啦！不要让模拟器自动重启哦，直接关闭模拟器，进行下一步操作\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/55abc630-feb1-4a66-b2b4-b89de93c2a30fb098cd1894a107a.png)\n#### 正式启动前的最后配置\n- 将虚拟机启动脚本的下列稍加修改，让模拟器使用硬盘启动\n\n修改前\n```\n-boot c # 启动设备\n-prom-env \"boot-device=cd:9,\\\\:tbxi\" ^ # 指定启动设备\n```\n修改后\n```\n-boot d #把c改成d，d为硬盘启动，c为从光盘启动\n# 去掉了指定启动设备语句\n```\n- 再次打开模拟器，就可以慢慢等待模拟器启动啦！\n- 进系统啦！第一次安装完会弹出设置助理\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(21).png)\n\n- 点击右下角的箭头下一步\n- 这里输入管理员的密码，然后下一步\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(20).png)\n\n- 这里网络设置直接跳过，选择下一步\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(22).png)\n\n- 这里直接下一步\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(9).png)\n\n- 这里是DNS和域名设置，不设置直接下一步\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(18).png)\n\n- 这里是远程登录，可开可不开，选完直接下一步\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(2).png)\n\n- 地区设置\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(17).png)\n\n- 时间设置\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(4).png)\n\n- 用户设置，选择Add可以创建用户\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(11).png)\n\n- 自动登录，可以选择自动并且输入账户密码，可选可不选\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(15).png)\n\n- 设置预览，没有问题就可以选择go ahead继续啦\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(10).png)\n\n#### 完成安装啦！\n- 重启之后就可以享受新界面带来的赏心悦目了，Enjoy it! :)\n附上一些系统截图\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/396F014F493B905FD9C40FFB95F1E9C242d67356d36b8391.png)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(8).png)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(1).png)\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/macosxdp%20(14).png)\n\n### 视频版\n#### 本教程根据视频版编写\n\n<iframe class=\"bilibili\" src=\"//player.bilibili.com/player.html?isOutside=true&aid=959704963&bvid=BV1rp4y1u7ep&cid=1298459925&p=1&autoplay=0\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" sandbox=\"allow-top-navigation allow-same-origin allow-forms allow-scripts\" > </iframe>","tags":["系统","苹果"],"categories":["教程类"]},{"title":"酥米的碎碎念（1）","slug":"酥米的碎碎念/酥米的碎碎念1","url":"/酥米的碎碎念/酥米的碎碎念1/","content":"\n### 前提\n唉 ……最近好纠结啊，自从去年加入竞赛队以来，由于我的性格原因（不太喜欢一直呆在一个地方），感觉哪哪都不舒服，学习竞赛内容时也不太得劲，老是集中不到精力，因为我是在网搭竞赛队嘛，而且我是负责网络部分的，每当我看到满当的市赛题题目，会产生一种恐惧感，甚至之前我自己都没意识到这样的感觉，久而久之，想退队的感觉也越来越强烈，我不再把全部身心投入到竞赛，而是带了一种摆烂性质的态度在学习内容。\n\n直到10月底，老师确定了具体的竞赛日期，是12.7-12.27左右竞赛，并且竞赛改革了，是三位同学一队去参加嘛（我被分到了二队），然后三个同学分工合作设计方案并且把方案实操出来。我本想和两位队友一起努力努力，市赛拿个三等奖啥的，然后我自己申请退队，回到教室学习。\n\n### 意外之外\n没想到，才过了一周不到，老师就告诉我们，我们这个项目没有开市赛，而是得等明年的省赛，于是我原来的打算也破裂了。而且最近考了期中考试，我的三科语文英语还好，但是数学已经低的不能再低了，三科总分450，我加起来才210分左右，退步很明显，我意识到我不能再这么下去了，下一年3+证书考试如果考不好真的连公办大专都没得上了。\n![成绩图](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/173224034086565091be367247aa6.png \"成绩图\")\n\n唉！我现在真的好纠结，是等明年的市赛，才是抽身退队回教室学习？或者说还有什么别的办法吗？","tags":["长篇碎碎念"],"categories":["个人记录类"]},{"title":"DHCP协议详解和配置","slug":"CCNP/CCNP交换 DHCP协议详解及配置","url":"/CCNP/CCNP交换 DHCP协议详解及配置/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## DHCP实施背景\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729165474365-eb0dcff1-1d39-4423-8a7f-d50f6cccc494.png)\n\n## 简介\n+ Dynamic Host Configuration Protocol\n+ 基于UDP协议 端口67及68\n+ bootPC:67（客户端端口号）；bootPS：68（服务端端口号）\n\n## 传输方式\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729166164894-3746dc53-16a4-4763-89f7-d07c779b2eae.png)\n\n## DHCP中继问题\n### 案例一\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729498106851-c554df3c-3861-47ee-b981-06b274a46d00.png)\n\n+ PC客户端与DHCP server不在同一个网段PC发出的广播DHCP discover包到达三层设备被三层接口丢弃，因此数据无法到达DHCP服务器\n\n### 案例二\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729498165849-924f9898-3555-4794-99e5-54ee26ea93f9.png)\n\n+ 在三层交换机(或路由器)上部署DHCP中继，使得DHCPserver能够收到Discover消息\n\n### 案例三\n![](https://cdn.nlark.com/yuque/0/2024/jpeg/44908083/1729498256138-90c814b3-f678-4c44-8db8-3b81f95deabb.jpeg)\n\n`cisco(config-if)# ip helper-address _address_`\n\n+ 激活中继功能，并为UDP广播包设置中继目标IP(单播包的目标IP地址)\n+ 注意是在接口上配置，该接口为沿途阻挡该广播消息的第一个接口\n\n`cisco(config)# ip forward-protocol { udp [ port ]}`\n\n+ 选择被中继的协议(可选)\n\n### 注意事项1\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729498637688-ede34ac4-38ae-472e-98e0-44d3c9108741.png)\n\n`cisco(config)# interface vlan 10`\n\n`cisco(config-if)# ip helper-address 192 168.200.200`\n\n### 注意事项2\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729498803330-8cc66a37-1efb-4664-8343-02bccde28ebf.png)\n\n```plain\ninterface fast0/0\nip helper-address 10.1.1.200\nip helper-address 10.1.2.200\nip helper-address 10.1.2.201\n!!每个地址都会发送一个单播\n```\n\n## Relay Agent Option Support\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729498968783-22fd05b0-fe27-4135-ae7d-8748bb83d552.png)\n\n+ 发送广播\n+ Option82插入remoteID及circuitID\n+ 如果识别option82，则查看插入的option值\n+ 除去option字段，实施策略，将IP分配给client\n+ 基于option值，返回IP address及策略\n\n## DHCP配置\n### 手工配置\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729499528933-45786e82-4126-41d6-9cf8-54dc67e32103.png)\n\n+ 手动绑定是手动映射到DHCP数据库中的主机的MAC地址的IP地址。手动绑定存储在DHCP服务器上的NVRAM中\n+ 绑定只是特殊的地址池。手动绑定数量没有限制，但每个主机池只能配置一个手动绑定的配置池\n\n`ip dhcp pool BIND`\n\n`host 192.168.1.111 255.255.255.0`\n\n`client-identifier unique-identifier`\n\n+ DHCP clients require client identifiers. The unique identification ofthe client is specified in dotted hexadecimal notation, for example.01b7.0813.8811.66,where 01 represents the Ethernet media type.（DHCP客户端需要客户端标识符。客户端的唯一标识符用点十六进制表示法指定，例如01b7.0813.8811.66，其中01表示以太网介质类型。）\n+ 也可以在服务器上通过show ip dhcp bingding抓取客户端的client-identifier","tags":["网络","CCNP"],"categories":["思科"]},{"title":"EtherChannal详解","slug":"CCNP/CCNP交换 EtherChannel","url":"/CCNP/CCNP交换 EtherChannel/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## 背景\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729210282296-45cab1db-f0cb-412a-9681-ea25c5371e44.png)\n\n+ 解决方案提供更多的带宽对类似链路进行逻辑聚合\n+ 看成一个逻辑链接\n+ 提供负载平衡和冗余支持\n+ 支持Switch ports和Routed ports\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729210552290-923b722e-fa59-400d-8ad0-01aeeb5febe7.png)\n\n## PAgP modes\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729211184779-0808aa71-e83c-42d3-a943-ba7fa545e288.png)\n\n+ On\t通道成员不协商(无协议)\n+ Desirable\t主动询问对方是否可以/将\n+ Auto\t被动等待对方询问\n+ Off\t未在接口上配置的 EtherChannel\n\n## LACP modes\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729211269400-1daba43d-af56-4eec-96ee-5d97aee5b79c.png)\n\n+ On\t通道成员不协商(无协议)\n+ Active\t主动询问对方是否可以/将\n+ Passive\t被动等待对方询问\n+ Off\t未在接口上配置的 EtherChannel\n\n### EtherChannel的配置\n+ 选择用于Channel的端口\n+ 选择PAgP或LACP\n+ 在接口上配置channel-group\n    - 设置channel-groupID\n    - 根据特定的协议，选择接口模式完成\n+ 上述步骤后，逻辑的etherchannel接口就建立好了。\n    - 可以进一步对这个逻辑的etherchannel接口进行配置\n\n## EtherChannel的实施要点\n+ **Port-channel接口一旦建立完成后，就形成了一个个逻辑的接口，后续针对该接口的配置在port-channel逻辑接口中完成**\n+ **最大支持8个端口做捆绑**\n+ **Port-channel接口不能成为SPAN的目的接口**\n+ **隶属于一个port-channel的物理接口需有相同的如下配置**\n    - 相同的speed和duplex\n    - 相同的接口模式(access、trunk)\n    - 如果是trunk模式，那么native vlan及allowed vlan需相同\n    - 如果是access模式，所属vlan需相同\n\n## EC的负载均衡\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729212993237-1a809b68-e3bc-4757-acee-38be5f7f66fe.png) \n\n+ EtherChannel支持在同一个port-channel的链路中执行负载均衡\n+ 负载均衡动作可以基于MAC、端口、IP(源IP、目的IP或两者)\n+ 默认的行为:源目IP地址对(src-dst-ip)\n\n`Switch(config)# port-channelload-balance type`\n\n`Switch# show etherchannelload-balance`\n\n## EC的配置\n```plain\nSwitch(config)# int range f0/1 - 2\t#进入接口范围\nSwitch(config-if-range)# switchport\t#将接口配置为二层接口\nSwitch(config-if-range)# switchport trunk encapsulation dot1q\t#trunk封装协议为dot1q\nSwitch(config-if-range)# switchport mode trunk\t#设置接口模式为Trunk模式\nSwitch(config-if-range)# channel-protocol pagp/lacp\nSwitch(config-if-range)# channel-group 1 mode desirable\t#配置etherchannel，ID为1，模式为desirable\n```","tags":["网络","CCNP"],"categories":["思科"]},{"title":"HSRP & VRRP & GLBP","slug":"CCNP/CCNP交换 HSRP VRRP GLBP","url":"/CCNP/CCNP交换 HSRP VRRP GLBP/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## 技术背景\n+ 一旦网络网关或关键节点出现故障，将对业务造成灾难性故障\n+ 链路失效无法检测，业务稳定性受到威胁\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729500335707-435129c9-bd7e-4f38-b119-d5de25de2a06.png)\n\n## HSRP部分\n### HSRP带来了什么？\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729509362499-499539a3-5928-4791-9d99-59e51b53948f.png)\n\n+ 利用HSRP，一组路由器(同一个LAN中的接口)协同工作，但只有一个处于Active状态。在一个HSRP组内的多个路由器共用一个虚拟的IP地址，该地址被作为局域网内所有主机的缺省网关地址\n+ HSRP决定哪个路由器被激活，该被激活的路由器负责接收发过来的数据包并进行路由。以及相应PC对于其网关的ARP请求\n+ 备份路由器侦听active路由器的状态，并准备随时接替Active router的工作\n\n### HSRP名词\n+ HSRP路由器\n    - 运行HSRP的路由器，一台HSRP路由器（的接口）可同时参与到多个HSRP组中，在不同的组中，一台HSRP路由器可以充当不同的角色\n+ HSRP组\n    - 由多个HSRP路由器组成，属于同一HSRP组的HSRP路由器互相交换信息，每一组由一个组ID进行标识\n+ 虚拟路由器\n    - 对于每一个HSRP组，抽象出来的一个逻辑路由器，该路由器充当网络用户的网关\n+ 虚拟IF地址、MAC地址\n    - 用于标识虚拟的路由器，该地址实际上就是用户的默认网关\n    - MAC地址为虚拟的\n+ Active、Standby路由器\n    - Active路由器：就是在HSRP组实际转发数据包的路由器，在每一个VRRP组中，仅有Active响应对虚拟IP地址的ARP请求\n    - Standby路由器：就是在HSRP组中处于监听状态的路由器，一旦Active路由器出现故障，Standby路由器就开始接替工作\n    - 选举依据：HSRP接口优先级和接口IP地址（比大）\n\n### 虚拟路由器MAC地址\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729510085320-82db06f3-14f2-4a97-858e-175ce2ce09da.png)\n\n+ HSRP使用一个格式为： 0000.0c07.acxx的MAC作为虚拟路由器的MAC，其中xx是该HSRP组的组ID\n\n### Active / Standby Router\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729510204882-1d45a331-3678-400a-bbd7-2025306e8adc.png)\n\n+ Active Router\n    - 响应底下PC对网关的ARP请求(使用虚拟MAC响应)\n    - 承担实际的流量转发任务\n    - 周期性发送Hello包以告知自己的存活情况\n+ Standby Router\n    - 侦听Active router发送的hello包\n    - 当Active Router出现问题的时候接替它的位置，成为Active router\n\n### HSRP状态机\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729510296618-b22b16a8-8238-4639-94bf-3a9dbcb27855.png)\n\nInitial（初始化状态）——Listen（学习状态）——Speak（发报状态【打招呼模式】）——Standby（坚守状态）——Active（活跃状态）\n\n### HSRP version\n+ HSRP version1（默认）\n    - 组ID范围：0-255\n    - 虚拟MAC：0000.0c07.acxx\n    - Hello包发送到224.0.0.2\n+ HSRP version2（要看具体的IOS版本）\n    - 组ID范围：0-4095\n    - 虚拟MAC：0000.0C9F。Fxxx\n    - Hello包发送到224.0.0.102\n    - HSRP v1及v2的报文类型不同\n    - Standby 1 version 2\n\n### HSRP的配置\n#### 基础配置\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729510472919-88f35300-8cdb-4884-a07c-ff8322cf0a63.png)\n\n+ 接口HSRP优先级默认为100\n+ 要注意HSRP group ID必须一致、虚拟IP必须一致\n\n```plain\nInterface fast0/0\nip address 10.1.1.253 255.255.255.0\nno shutdown\nstandby 1 ip 10.1.1.254\t#虚拟IP\nstandby 1 priority 120\t#优先级\n```\n\n```plain\nInterface fast0/0\nip address 10.1.1.252 255.255.255.0\nno shutdown\nstandby 1 ip 10.1.1.254\n```\n\n#### HSRP track\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729510845997-404129ea-46c6-4676-9a0b-55971f01f2a8.png)\n\n+ HSRP的track特性允许我们跟踪某个本地接口的up/down，当接口down掉后，HSRP自动减去一个自定义的值，从而让standby设备顶上\n\n```plain\nInterface fast0/0\nip address 10.1.1.253 255.255.255.0\nno shutdown\nstandby 1 ip 10.1.1.254\nstandby 1 priority 120\nstandby 1track serial 1/0 30\n```\n\n```plain\nInterface fast0/0\nip address 10.1.1.252 255.255.255.0\nno shutdown\nstandby 1 ip 10.1.1.254\nstandby 1 preempt\n```","tags":["网络","CCNP"],"categories":["思科"]},{"title":"VLAN间的路由及三层交换机的部署","slug":"CCNP/CCNP交换 VLAN间的路由及三层交换机的部署","url":"/CCNP/CCNP交换 VLAN间的路由及三层交换机的部署/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## Q & A\n### 如何满足不同VLAN的互访需求？\n+ 解决方案1：单臂路由\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729153334630-a8c6d042-08e1-4b43-87f8-aa6252bf8900.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729153355876-a7ca5fed-7f69-4e14-82d7-b5d7aa717043.png)\n\n## 路由 VS. 交换的园区网结构\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729162997065-d2ea58a5-246a-44d6-925d-3b16b41a0532.png)\n\n+ 在过去，交换是基于硬件的转发，而路由是基于软件的转发，因此园区网络更多的采用交换网络的设计\n+ 而如今，路由已经几乎与交换一样快，也能够基于硬件做转发，与此同时路由的设计很好的解决了交换网络的二层环路问题，以及LAN的隔离问题\n\n## Switch Virtual interface（SVI）\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729163085261-9648ecce-8584-479f-a56a-bf5679c5b3bf.png)\n\n## SVI autostate exclude command\n+ SVI口的Line-state在以下条件满足的情况下才会是UP\n    - SVI对应的VLAN必须在vlan database中存在并且是激活的\n    - Vlan interface存在并且不能说administratively down的\n    - 必须至少有一个二层接口（SVI对于VLAN的access接口或者trunk口）是UP的，而且必须是spanning-tree的forwarding状态\n+ SVI autostate exclude特性可以让特定接口跳出上述up-and-down的计算过程，也就是说该接口的up down与SVI口的up down无关了\n\n`Switch(config)# int f0/24`\n\n`Switch(config-if)# switchport auto-state exclude`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729164827120-91130c8c-63de-4e8f-8628-0259875e2c44.png)\n\n## 交换机管理VLAN\n### 二层交换机的管理VLAN\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729165022772-166a0a14-8a04-4f1f-be6f-226ecbf1918a.png)\n\n+ 交换机的管理VLAN用于交换机本身的设备管理\n+ 二层交换机只能有一个VLAN接口可以拥有IP地址，具体的VLAN可以根据实际需求选定\n+ 有了这个VLAN接口，PC就能够telnet到交换机上执行管理操作\n+ 用户VLAN与交换管理VLAN重叠会有什么问题？\n\n### 三层交换环境的管理VLAN\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729165215265-252a3155-b8c1-4065-9cc0-764a2291e798.png)\n\n## 三层交换机的端口模式\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729163463953-598b285c-b189-41f6-80b0-e3a5a7637588.png)\n\n+ 二层接口：access模式，trunk模式\n+ 三层接口：路由接口（no switchport或称为routed port）、SVI接口\n\n## 基础配置\n```plain\nSwitch(config)# ip routing\n#\t开启三层交换机路由功能\n\nSwitch(config)# vlan 10\nSwitch(config-vlan)# name name\n# 创建VLAN\n\nSwitch(config)# int vlan 10 \nSwitch(config-Vlanif10)# ip add x.x.x.x mask \nSwitch(config-Vlanif10)# no sh\n#\t配置VLAN对于SVI接口\n\nSwitch(config)# int f0/1\nSwitch(config-if)# no switchport\nSwitch(config-if)# ip add x.x.x.x mask\nSwitch(config-if)# no sh\n#\t配置no switchport（routed port）三层接口\n\nSwitch(config)# ip route 0.0.0.0 0.0.0.0 x.x.x.x\n#\t配置静态路由\n```","tags":["网络","CCNP"],"categories":["思科"]},{"title":"BGP详解","slug":"CCNP/CCNP路由 BGP","url":"/CCNP/CCNP路由 BGP/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## BGP概述\n+ BGP为BorderGateway Protgcol边界网关路由协议(路径矢量)\n+ 主要作用是在AS之间传递路由信息\n+ 目前BGR有4个版本:V1、V2、V4、V4+(即MBGP)\n+ 企业连接到SP\n    - 连接到两家或是多家ISP，提供链路的可靠性，连接方式如下\n    - 1.Single homed单宿:只连接到一家ISP且没有冗余链路\n    - 2.Dualhomed双宿:只连接到一家ISP，使用两条链路来提供冗余\n    - 3.Multihomed多宿:连接到多家ISP\n    - 4.DualMultihomed双多宿:连接到多家ISP，同时使用两条链路\n\n## 使用BGP的三大理由\n+ 大量路由需要承载，IGP只能容纳千条，而BGP可以容纳上万\n+ 支撑MPLS/VPN的应用，传递客户VPN路由\n+ 策略能力强，可以很好的实现路由决策与数据控制\n\n## IGP具有以下某些特性或者全部特性\n+ 执行拓扑发现\n+ 尽力完成快速收敛\n+ 需要周期性的更新来确保路由选择信息的精准性\n+ 受同一个管理机构的控制\n+ 采取共同的路由选择策略\n+ 提供了优先的策略控制能力\n\n## 关于BGP\n+ AS:autonomoussystem自治系统，指的是在同一个组织管理下使用相同策略的设备的集合\n+ 不同AS通过AS号区分，AS号取值范围1-65535，其中64512-65535是私有AS号。IANA负责AS号的分发。\n+ 中国电信163 AS号:4134\n+ 中国电信CN2 AS号:4809 \n+ 中国网通 AS号:9929\n\n## BGP的矢量特征\n![](https://cdn.nlark.com/yuque/0/2024/jpeg/44908083/1730806229082-7508981d-6da2-4ef1-a7a8-12d8b9d550a9.jpeg)\n\n+ 路径矢量信息中包含一个BGP自治系统列表\n+ BGP路由器不接受路径列表中包含其AS号的路由更新，是**无环路**的\n+ BGP支持对BGP自治系统路径应用路由策略\n+ BGP路由器只能将其使用的路由通告给邻接自治系统中的对等体\n\n## BGP特征\n+ BGP使用TCP为输出层协议，TCP端口号为179\n+ BGP路由器之间建立TCP连接，这些路由器称为BGP对等体也叫BGP邻居：**<font style=\"color:#DF2A3F;\">EBGP、IBGP</font>**\n+ 对等体之间交换整个BGP路由表\n+ BGP路由器只发送增量更新或者触发更新（不会周期性更新）\n+ 具有丰富的路径属性\n+ BGP通告成千上万的路由，可采用TCP滑动窗口的机制，停止并等待确认前，可以发送65576个字节\n\n## BGP packets\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730807035348-b0a84008-40e6-4ca5-b299-e9f24f59896e.png)\n\n\n\n### 报文类型\n| 报文名称 | 作用是什么 | 什么时候发包 |\n| --- | --- | --- |\n| OPEN | 协商BGP邻居的各项参数，建立邻居关系 | 通过TCP建立BGP连接，发送open报文 |\n| UPDATE | 进行路由信息的交换 | 连接建立后，有路由需要发送或路由变化时，发送UPDATE通告对端路由信息 |\n| NOTIFICATION | 报告错误，终止邻居关系 | 当BGP在运行时发现错误时，要发送NOTIFICATION报文通报BGP对端 |\n| KEEPALIVE | 维持邻居关系 | 定时发送KEEPALIVE报文以保持BGP邻居关系的有效性 |\n| Route-refresh | 为保证网络稳定，触发更新路由的机制 | 当路由策略发生变化时，触发请求邻居重新通告路由 |\n\n\n## BGP的有限状态机\n| Peer状态名称 | 发什么包 | 在做什么 |\n| --- | --- | --- |\n| Idle | 尝试建立TCP连接 | 准备开始TCP的连接并监视远程peer启动TCP连接，启用BGP时，要准备足够的资源 |\n| Connect | 发TCP包 | 正在进行TCP连接，等待完成中，认证都在TCP建立期间完成的。如果TCP连接不上则进入Active状态，反复尝试连接 |\n| Active | 发TCP包 | TCP连接没建立成功，反复尝试TCP连接 |\n| OpenSent | 发Open包 | TCP连接建立已经成功，开始发送Open包，Open包携带参数协商对等体的建立 |\n| OpenConfim | 发Keepalive包 | 参数、能力特性协商成功，开始自己发送Keepalive包 |\n| Established | 发Update包 | 已经收到对方的Keepalive包，双方能力特性一致，开始使用Update通告路由信息 |\n\n\n## BGP Peer\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730809493082-98e0e6ca-f4f0-4d60-921c-277b67c3c35c.png)\n\n+ 运行BGP的路由器被称为BGP speaker\n+ BGP对等体也叫BGP邻居，建立基于TCP的关系\n+ EBGP：BGP位于不同自治相同的路由器之间，称为EBGP\n+ 建立EBGP邻接关系，必须满足三个条件\n    - EBGP之间自治系统号不同\n    - 定义邻居建立TCP会话\n    - neighbor中指定的IP地址要可达\n\n## 中转AS中的IBGP路由传递\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730892076962-e019b9cc-49c5-4659-b378-ac6690db7cfa.png)\n\n### 全互联IBGP邻居关系\n+ IBGP全互联虽然能解决transit AS内的路由黑洞问题，但是却造成BGP路由器需要耗费大量资源维护大量BGP连接的新问题\n    - 路由反射器\n    - 联邦\n\n## IBGP水平分割原则\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730892484804-5d4f1364-9a3c-4165-bd3e-40e75f989e0c.png)\n\n+ BGP防环是通过AS_PATH实现的，而AS_PATH仅仅实在路由离开后AS才会被更改，因此再AS内，IBGP就没有EBGP的防环能力，为了防止环路的出现，BGP路由器不会将从IBGP邻居学习过来的路由再通告给自己其他IBGP邻居\n+ 由于水平分割原则存在，BGP要求AS内，需保证IBGP全互联（neighbor命令 指定）\n+ （根本原因是在AS内部，AS_PATH不会改变，无法使用AS_PATH防环，因此很容易出现环路）\n\n## BGP路由通告规则\n+ 当存在多条路径时，BGP router只选取最优的路由（BEST）来使用（没有负载的情况下）\n+ BGP只把自己使用的路由，也就是自己认为Best的路由传递给BGP Peer\n+ BGP Speaker从EBGP获得的路由会向它所有的BGP相邻体通告（包括EBGP和IBGP）\n+ BGP Speaker从IBGP获得的路由不向它的IBGP相邻体通告（避免循环，水平分割；存在路由RR的情况下除外）\n+ BGP Speaker从IBGP获得的路由是否通告给它的EBGP Peer要视IGP和BGP同步的情况来决定\n\n## BGP同步\n+ BGP同步规则指出，BGP路由器不应使用通过IBGP获悉的路由或将其通告给外部邻居，除非该路由是本地或者通过IGP获悉的\n+ 思科Cisco IOS默认关闭同步\n+ 同步关闭，则BGP可以将使用这样的路由，并将其通告给外部BGP邻居：从IBGP邻居那里获悉的且没有出现在本地路由表中的路由\n+ 同步开启，则路由器通过IBGP获悉路由后，将等待IGP将该路由传遍整个自治系统，然后再将其通告给外部对等体\n\n## Tables\n+ BGP邻居表：邻居列表\n+ BGP表：包含了从邻居学习的所有路由，以及到达目的网段的多个路径和属性\n+ 路由表：列出了到达目的网段的最佳路径，EBGP路由AD为20，IBGP路由AD为200\n\n## Next-Hop\n+ BGP是AS·by-AS的路由协议，而不是router-by-router的路由协议\n+ 在BGP中，next-hop并不意味着是下一台路由器，而是到达下一个AS的IP地址\n+ EBGP中，默认next-hop为发送更新的邻居路由器的IP地址\n+ IBGP中，从EBGP传来的next-hop属性在IBGP中保持不变的被传递\n\n### 修改next-hop\n+ 为了防止路由黑洞问题，R1、R2、R3建立IBGP全互联且均用各自的LOOPBACK接口建立IBGP关系\n\n## 配置BGP\n### 基础配置\n`**Router(config)# router bgp** _autonomous-system_`\n\n+ 仅仅执行router bgp不能再路由器上激活BGP，必须执行至少一个子命令才能再路由器激活BGP进程\n+ 在路由器上职能配置一个BGP实例\n\n### 指定BGP邻居及激活BGP会话\n`Router(config-router)# neighbor {ip-address | peer-group-name } remote-as autonomous-system`\n\n+ 邻居指定的ip地址必须路由可达\n+ BGP路由都需手工指定，不能像IGP那样通过协议自动发现\n+ AS决定与邻居建立的是EBGP还是IBGP会话\n\n### 指定BGP将通告的网络\n`Router(config-router)#network network-number [mask network-mask] [route-map map-tag]`\n\n+ network命今与IGP不同，BGP命令network为通告哪些IP路由进BGP进程，而不是在接口上启用BGP \n+ network支持无类前缀，前缀必须与路由表中的条目完全匹配\n+ 如果不指定mask，只通告主类网络号，而且仅当主类网络中至少有一个子网出现在IP路由表中，BGP才会将该主类网络作为一条BGP路由通告\n+ 指定了mask，则仅当路由选择表中有与该网络完全匹配的条目时才被通告出去\n\n### BGP同步\n`Router(config-router)# no synchronization`\n\n+ 关闭同步(默认关闭)\n\n`Router(config-router)# synchronization`\n\n+ 开启同步\n\n### BGP router-id\n`Router(config-router)# bgp router-id x.x.x.x`\n\n+ 手工设置BGP routerlD\n\n### 示例1\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730894784939-f4d16b2c-c930-4ab1-a48c-c47743e91c9d.png)\n\n### 指定更新源\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730894818299-aa7e1866-0994-4faa-88c4-156f792c9c65.png)\n\n### BGP身份验证\nRouter(config-router)# neighbor {ip-address | peer-group-name} password string\n\n+ BGP支持MD5邻居身份验证\n+ 启用身份验证后，将对通过的对等体之间的TCP连接传输所有的数据等进行验证\n+ 认证都是在TCP建立连接的时候完成的\n\n## 维护BGP\n+ 重置BGP会话\n+ 将新策略应用于所有路由，必须触发一个更新\n\n### 三种触发更新的方式\n+ 硬重置\n+ 软重置\n+ 路由刷新\n\n### 硬重置\n+ 断开相应TCP连接，通过这些会话收到的所有信息都将失效，并从BGP中删除\n+ （不建议优先使用硬路由，谨慎！这将删除数据，请三思而后行！！！！）\n    - `clear ip bgp {neighbor-address}`\n    - `clear ip bgp *`\n\n### 软重置\n+ 不拆除并重建TCP或者BGP连接，而是仅出发更新操作以便让新的路由策略生效\n+ 软重置可以仅由于出站或入站策略，也可同时用于出入站策略\n\n#### 出站软重置\n+ 不会拆除TCP连接，不会重置BGP会话，仅促发更新操作以便让新的路由策略生效（发送update消息）\n+ 需要修改出站策略时，建议使用该命令\n+ `clear ip bgp soft out`\n\n#### 入站软重置\n+ 本地发送route-refresh给所有的BGP邻居\n+ `clear ip bgp soft in`\n\n注：CISCOIOS 12.1开始全面支持入站路由的动态软重配置，但在之前的版本在使用入站软重配置之前必须首先在BGP进程中增加如下配置:neighbor x.x.x.x soft-reconfiguration inbound然后再使用clear ip bgp soft in命令这条命令会将x.x.x.x邻居发送过来的BGP路由存储在内存中，当配置入站软重置后，路由器不再向邻居发送更新请求，而是直接在内存中存储的路由中执行新配置的入站策略，以此来防止触发大批量的路由更新而造成资源的浪费，但是这种操作仍会耗费内存，因此在使用的时候要非常慎重。\n\n## BGP属性\n| 公认属性<br/>（Well-known） | 公认必遵<br/>（Well-known mandatory） | BGP 必须都能识别，且在更新消息必须包含 | Origin<br/>AS-Path<br/>Next hop |\n| --- | --- | --- | --- |\n| | 公认自决<br/>（Well-known discretionary） | BGP 必须都能识别，更新消息可包含可不包含 | Local-Preference<br/>ATOMIC_Aggregate |\n| 可选属性<br/>（Optional） | 可选传递<br/>（Optional transitive） | 可以不支持该属性，但即使不支持也应当接受包含该属性的路由并传递给其他邻居 | Community<br/>Aggregator |\n| | 可选非传递<br/>（Opinional non-transitive） | 可以不支持该属性，不识别的BGP进程可以忽略包含这个属性的更新消息，并且不传递给其他BGP邻居 | MED<br/>Originator_ID<br/>Cluster_list<br/>*Weight |\n\n\n## WEIGHT\n+ 在路由器本地配置，只提供本地路由策略，不会传播给任何BGP邻居\n+ 范围：0~65535；越大越优先\n+ 路由器本地始发的路径默认权重是32768，从其他BGP邻居学到的为0\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731410361179-24230caa-4101-4214-b7b2-e36684c17565.png)\n\n## LOCAL PREFERENCE\n+ **<font style=\"color:#DF2A3F;\">公认自由决定属性</font>**\n+ 告诉AS中的路由器，哪条路径是离开AS的首选路径\n+ LP越高路径越优\n+ 只发送给IBGP邻居，而不能传给EBGP邻居\n+ 默认本地优先级为100\n+ ![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731410490396-d8420a3c-2906-416b-944d-863e909fac07.png)\n\n## AS-Path（公认强制属性）\n+ 是前往目标网络的路由经过的自治系统号列表，通告该路由的自治系统号位于列表末尾\n+ 作用：确认无环，通告时给EBGP时会加上自己的AS号；通告给IBGP时不修改AS-Path\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731410691990-01881309-1058-46d1-a075-114e2b239fd1.png)\n\n### 四种类型\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731411052266-03328819-94f7-4586-8077-d5e506eee364.png)\n\n+ **<font style=\"color:#DF2A3F;\">AS_SET</font>**：一个去往特定目的地所经路径上的无序AS列表\n+ **<font style=\"color:#DF2A3F;\">AS_SEQENCE</font>**：一个有序的AS号列表\n+ **<font style=\"color:#DF2A3F;\">AS_CONFED_SEQUENCE</font>**：一个去往特地目的地所经路径上的有序AS号列表，其用法与AS_SEQENCE完全一样，区别于该列表的AS号属于本地联邦中的AS\n+ **<font style=\"color:#DF2A3F;\">AS_CONFED_SET</font>**：一个去往特定目的地上的无序AS号列表，其用法与AS_SET一样，区别在于列表中的AS号属于本地联邦中的AA\n\n## Origin（公认强制属性）\n+ 标识路由的起源，有下列三种可能：\n    - i\t通过BGP network，也就是起源于IGP，因为BGP network必须保证该网络在路由表中\n    - e\t是由EGP这种早期协议重发布而来\n    - ？\tIncomplete，从其他渠道学习到的，路由来源不完全（确认该路由来源的信息不完全）。（重发布的路由）\n+ 路由优选顺序：lowest origin code（IGP>EGP>Incomplete）\n\n## MED（可选非传递属性）\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731411803897-0b6bf6f9-e658-48a4-a306-7a8d455526f8.png)\n\n+ 是一种度量值，用于外部邻居指出进入AS的首选路径，即当入口有多个时，自治系统可以使用MED动态的影响其他AS如何选择进入路径\n+ 度量值越小路径越优\n+ MED是在AS之间切换，MED发送给EBGP对等体。这些路由器在AS内传播MED，不传递给下一个AS\n+ 默认情况下，仅当路径来自同一个AS中的不同EBGP邻居时，路由器才比较他们的MED属性\n+ MED影响进入AS的数据流:LP影响离开AS的数据流\n\n### 比较原则及配置注意事项\n+ 本地在将一条BGP路由通告给EBGP Peer时，是否携带MED值,需要根据以下条件进行判断(不对EBGP Peer使用Route-map的情况下)\n    - 如果该BGP路由是本地始发(network或redistribute)的,则携带MED值发送给EBGP Peer(如果MED为空,则设置为0)\n    - 如果该BGP路由是从其他BGP Peer学习过来的，那么将该路由通告给EBGPPeer时不携带MED\n+ 本地在将一条BGP路由通告给IBGPPeer时，一定会携带MED值\n    - 如果接收或产生的路由的MED为空,那么在向IBGP Peer通告时,将MED设置为0\n+ 总结1、2两点就是MED在IBGP之间传递没有问题(不会丢失)，但是在EBGP之间传递要看路由是否起源于自己。\n\n## NEXT_HOP（公认强制属性）2\n+ 如果路由传递自EBGP peer\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731412077866-bf31be10-26e7-4487-8738-b72ccc505e38.png)\n\n+ 如果路由传递自IBGP邻居，并描述的是AS外的目的地\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731412193230-54295d0a-b300-4fea-bf2b-203de0f4a3e0.png)\n\n+ 如果路由传递自IBGP邻居，并由AS内BGP路由器引入\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731412344784-f2e1be11-a76c-4738-9ecf-dc9a4e8884c9.png)\n\nTips：如果IBGP peer使用network或重发布的方式引入IGP路由，那么通告者将使用这些路由的IGP下一跳作为NH；如果这些路由是该IBGP peer配置的BGP汇总路由，则NH为其更新源IP。\n\n### On Shared Media\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731413016975-73d4cf2b-a590-4d19-a73b-aeef941be1d8.png)\n\n+ RouterB将路由100.100.100.0/24传递给A，NEXT_HOP为10.1.123.2\n+ RouterA将路由100.100.100.0/24传递给C，此时NEXT_HOP保持不变\n+ 如果路由器收到某条BGP路由，该路由的NEXT_HOP地址值与EBGP邻居(更新对象)同属一个网段，那么该条路由的NEXTHOP地址将保持不变并传递给它的BGP邻居\n\n### On NBMA\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731413248307-5df17964-315e-4c31-8d2b-5b159d9bcf53.png)\n\n+ 如果中间的多路访问不是Ethernet，而是帧中继（NBMA）呢？\n\n## COMMUNITY\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731458979252-74a8f3c5-cb61-494c-8820-44d1f21f23cf.png)\n\n+ 可选传递属性\n+ 一种标记，用于简化路由策略的执行\n+ 可以将某些路由分配一个特定的COMMUNITY属性，之后就可以基于COMMUNITY值而不是每条路由进行BGP属性的设置了\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731460387790-d039cfe4-b94c-44ce-a4f2-0d89f944d64a.png)\n\n### 几个众所周知的值\n```plain\nroute-map test permit 10\nset community ?\n<1-4294967295>\tcommunity number\naa:nn\t\t\t\t\t\tcommunity number in aa:nn format\nadditive\t\t\t\tAdd to the existing community\ninternet\t\t\t\tInternet (well-known community)\nlocal-AS\t\t\t\tDo not send outside local AS (well-known community)\nno-advertise\t\tDo not advertise to any peer (well-known community)\nno-export\t\t\t\tDo not export to next AS (well-known community)\nnone\t\t\t\t\t\tNo community attribute\n```\n\n\n\n**Route**\n\nCommunity=no-adv\n\nR2不会将该路由再通告给任何BGP peer\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731460836560-e5a0cea7-a8fa-4bd1-a0d9-bbefda45b523.png)\n\n## Atomi_Aggregate及aggregator\n172.16.0.0/16\n\n汇总路由丢失明确路由的路径属性\n\n需要给下游邻居告警，并提示“汇总点”及汇总地AS\n\n![](https://cdn.nlark.com/yuque/0/2024/jpeg/44908083/1731461244712-db15a1db-b381-40ae-8c8e-83d80a966bf6.jpeg)\n\n`aggregate-address 172.16.0.0 255.255.0.0 summary-only`\n\n```plain\nR4# show ip bgp 172.16.0.0\nBGP routing table entry for 172.16.0.0/16, version 4\nPaths:(1 available, best #1, table Default-lP-Routing-Table)\nFlag:0x820\nNot advertised to any peer\n300,(aggregated by 300 3.3.3.3)\n10.1.34.3 from 10.1.34.3 (3.3.3.3)\nOrigin lGP, metric 0, localpref 100, valid, external,atomic-aggregate, best\n```\n\n### 报文案例\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731461667500-f2c080c5-fc71-4b5c-984c-22dcd23c405a.png)\n\n## BGP自动汇总\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1731461782082-4df50a90-5604-4b26-93cd-52ae719c6130.png)\n\n+ 若R1开启auto-summary，并用重发布直连的方式引入1.1.1.0/24，则该子网会被汇总\n+ 若R1开启auto-summary,且network1.1.1.0 mask 255.255.255.0，则仍以明细更新\n+ 若R1开启auto-summary,且network1.0.0.0 mask 255.0.0.0,则该子网会被汇总\n+ 上面这条network等同于network 1.0.0.0(network的有类宣告)\n\n**<font style=\"color:#DF2A3F;\">因此BGP自动汇总(auto-summary)只汇总重发布引入的路由，以及使用network命令有类宣告方式引入的路由。目前CISCO IOS默认关闭自动汇总。</font>**\n\n## <font style=\"color:#000000;\">BGP手动汇总</font>\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733121752791-989f633a-4d0d-48dd-ac50-8335ac3782e9.png)\n\n+ 可以考虑在R3上创建静态的汇总路由\n\n`ip route 172.16.0.0 255.255.0.0 null0`\n\n+ 然后再将汇总路由network进BGP\n+ 不推荐此方法\n\n### 针对特定邻居取消抑制\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733121996017-8e7e4481-a185-40b9-85c2-3742644693c5.png)\n\n```plain\naccess-ist 1 permit 172.16.1.0\nroute-map unsupp permit 10\n  match ip address 11\nrouter bgp 300\n  neighbor 10.1.35.5 unsuppress-map unsupp\n  aggregate-address 172.16.0.0 255.255.0.0 as-set summary-only\n```\n\n### advertise-map\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733122218668-609b391f-86ce-4a69-9cd4-22e981484fd5.png)\n\n```plain\nip prefix-list list1 permit 172.16.1.0/24\nip prefix-list list1 permit 172.16.2.0/24\nroute-map adv permit 10\n  match ip address prefix-list list1\naggregate-address 172.16.0.0 255.255.0.0 summary-only as-set advertise-map adv\n```\n\n### attrubute-map\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733122395149-ba69abf1-caa8-4996-a318-f50e5741822e.png)\n\n```plain\nroute-map attr permit 10\n  set ?\naggregate-address 172.16.0.0 255.255.0.0 summary-only as-set attribute-map attr\n```\n\n### 终方案\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733122474434-007e0670-c4db-4dd8-9b54-e9c5ded166c2.png)\n\n```plain\naggregate-address 172.16.0.0 255.255.0.0 summary-only as-set\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733122543075-6fe96b97-2d36-4b13-9bd8-ec7c21098471.png)\n\n```plain\naccess-list 1 permit 172.16.2.0\naccess-list 1 permit 172.16.11.0\nroute-map suppmap permit 10\n  match ip address 1\naggregate-address 172.16.0.0 255.255.0.0 suppress-map suppmap\n```\n\n## 正则表达式\n+ 正则表达式（regular expresion）是按照一定的模板来匹配字符串的公式。\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733122792066-d45f8c40-28be-44fc-9ef2-fe1d61632c39.png)\n\n### 原子字符\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733122829384-9067e136-8d1b-4941-a29a-d059b397d1ce.png)\n\n#### 示例\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733122859463-f2706ecb-995d-434a-adcd-fb3603038c63.png)\n\n### 乘法字符\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733122918646-e2bfab69-bfb0-4d20-99e2-2e598f14cf10.png)\n\n#### 示例\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733122964843-3d32c0ca-e4f3-4de0-9ec0-3260d8a107af.png)\n\n+ 一个乘法字符可以应用于一个单字符或多个字符，如果用于多字符，需将字符串放入（ ）中\n\n### 范围字符\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733122937086-5335bee7-7d2d-4911-b02c-c4bd1c6cdc3a.png)\n\n#### 示例\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733123043302-ae7c2612-b283-4ed8-be08-c8ed67973230.png)\n\n### 使用正则表达式匹配AS_PATH\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733123094575-e9208cd3-efbf-46e1-92d6-728495dcb98d.png)\n\n+ AS_PATH可以当作字符串并使用正则表达式进行匹配\n+ String中的 \"__\" 为空格，这也是一个字符，也有可能被匹配\n\n#### 示例\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733123298715-383afd98-b548-4353-bc46-54d9ee5187f6.png)\n\n+ 注意as-path access-list也是默认含隐拒绝所有\n\n### 使用as-path access-list 匹配路由\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733123415356-86bd5433-a930-4f66-a9a1-7d144b63fec7.png)\n\n#### 示例1 搭配filter-list\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733123497581-877d75ef-a72f-4ab8-aa0a-e4a792edcf90.png)\n\n+ 在R3上可做策略\n\n```plain\nip as-path access-ist 1deny _600$\nip as-path access-list 1 permit .*\nrouter bgp 300\n  neighbor 10.1.23.2 filter-list 1 in\n```\n\n#### 示例2 搭配route-map\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733123628617-406b7486-d886-41d5-9ed5-115603b2032f.png)\n\n+ R3可做策略\n\n```plain\nip as-path access-ist 1 permit _600$\nroute-map setCommu permit 10\n  match as-path 1\n  set community no-advertise\nroute-map setCommu permit 10\n\nrouter bgp 300\n  neighbor 10.1.23.2 route-map setcommu in\n```\n\n### 配置命令\n`Router(config)# ip as-path access-list num {permit|deny} regexp`\n\n+ 配置as-path access-list\n\n`Router(config-router)# neighbor x.x.x.x filter-list as-path-filter {inlout}`\n\n+ 关联as-path access-list到filter-list，起到路由过滤作用\n\n#### 验证及查看\n`Router# show ip as-path-access-list`\n\n+ 查看配置的 as-path access-list\n\n`Router# show ip bgp regexp xx`\n\n+ 显示BGP表中所有被该正则表达式匹配上的路由，这是一个非常不错的工具\n\n`Router# show ip bgp filter-list access-list-num`\n\n+ 显示BGP表中所有被该filter-list匹配的路由\n\n## 通告community操控路由\n### BGP Communities\n+ BGP communities是一种路由标记方法，用于确保路由过滤和选择的连续性\n+ 可选传递属性，不支持该属性的BGP router原封不动的将community值传递给下游BGP邻居\n\n### Community\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733124090787-e2d027b9-f95b-466a-b5e8-86d7bdb3805c.png)\n\n+ 使用全局配置命令切换：\n\n`ip bgp-community new-format`\n\n### BGP路径操纵\n#### 设置Community\n```plain\nroute-map test permit 10\nset community ?\n<1-4294967295>\t\tcommunity number\naa:nn\t\t\t\t\t\t\tcommunity number in aa:nn format\nadditive\t\t\t\t\tAdd to the existing community\ninternet\t\t\t\t\tInternet(well-known community)\nlocal-AS\t\t\t\t\tDo not send outside local AS (well-known community)\nno-advertise\t\t\tDo not advertise to any peer (well-known community)\nno-export\t\t\t\t\tDo not export to next AS (well-known community)\nnone\t\t\t\t\t\t\tNo community attribute\n```\n\n### 总所周知的值\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733124385448-cf61fcfb-a43e-4fb0-b8af-97b8e047e12d.png)\n\n**Route**\n\n+ Community=local-as\n+ 该路由只能在本AS内传递（如果定义了联邦，则为只在联邦成员AS传递）\n\n### 为路由前缀分配Community\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733124481538-4caea059-33d5-4c50-89d2-305d5b25bf67.png)\n\n+ R1配置如下：\n\n```plain\nip prefix-ist 11 permit 11.11.11.0/24\nroute-map test permit 10\n  match ip address prefix-list 11\n  set community 100:11\n  \nrouter bgp 100\n  network 11.11.11.0 mask 255.255.255.0\n  neighbor 10.1.12.2 remote-as 200\n  neighbor 10.1.12.2 send-community\n  neighbor 10.1.12.2 route-map test out\n```\n\n### 为路由前缀分配多个Community\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733124672973-08971d75-7687-4f0c-a733-782014d85b5c.png)\n\n+ R2的配置如下：\n\n```plain\nip community-ist 11 permit 100:11\nroute-map test permit 10\n  match community 11\n  set community no-export additive\n\nrouter bgp 200\n  neighbor 10.1.12.1 remote-as 100\n  neighbor 10.1.23.3 remote-as 300\n  neighbor 10.1.23.3 send-community\n  neighbor 10.1.23.3 route-map test out\n```\n\n### 为路由前缀分配多个Community（cont.）\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733124846029-37b26bce-3e5b-41e6-949a-f6f5eca0889c.png)\n\n+ R3上查看11.11.11.0的BGP路由：\n\n```plain\nR3#sh ip b 11.11.11.0\nBGP routing table entry for 11.11.11.0/24,version 5\nPaths:(1 available, best #1, table Default-P-Routing-Table, not advertised\nto EBGP peer)\nFlag:0x820\n  Not advertised to any peer\n  200 100\n    10.1.23.2 from 10.1.23.2 10.1.23.2)\n    Origin lGP, localpref 100, valid, external, best\n    Community:100:11 no-export\n```\n\n### 用community-list匹配团体属性\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733124981265-f03cbe06-2d35-4141-82f4-4bc934728879.png)\n\n`lp community-list 1 permit 100:11`\n\n+ 匹配。匹配community中包含100:11的路由\n\n`lp community-list 1 permit 100:11 no-adv`\n\n+ 不匹配。要求100:11及no-adv两者都有才匹配成立\n\n`lp community-list 1 permit 100:11`\n\n`Ip community-list 1 permit no-export(或将no-export换成no-adv)`\n\n+ 匹配。只要community中包含100:11或no-export\n\n### 用community-list匹配团体属性（cont.）\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733125149714-85e3e77c-fab0-4cb2-aae7-d89f093f56c3.png)\n\n`ip community-list 12 permit internet`\n\n+ 所有路由默认都属于internet\n\n### 用community-list匹配团体属性 严格匹配\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733125250291-e5171d9b-624d-4446-b988-3117e17dd97d.png)\n\n```plain\nlp community-list 11 permit no-export\nroute-map test permit 10\nmatch community 11 exact-match\t\t// 严格匹配\n严格匹配community属性为no-export的路由，多一点，少一点都不行\n\nShow lp community-ist 1 [exact-match]\n查看community-list 1\n```\n\n### 删除某个或多个community值\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733125335491-71efe10e-6c26-4e45-afe6-6f30821e8c97.png)\n\n+ **一条路由，允许携带多个community值，构成一个community列表，那么如何删除某个或者某几个community值?譬如只想删除11路由的no-export属性**\n\n```plain\nip community-list standard del permit no-export\t\t// 匹配要删除的commu值\nroute-map test permit 10\n  set comm-list del delete\t\t// 用这条命令删除\n```\n\n### 删除多个community值\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733125474298-a0ab0f1a-bc22-46f8-bce2-e8fcd77cebf0.png)\n\n```plain\nip community-list standard del permit no-export\t\t// 用多行community-list\nip community-list standard del permit 100:11\t\t// 用多行community-list\nroute-map test permit 10\n  set comm-list del delete\n```\n\n### 配置community-list\n`lp community-list 1-99 permit|deny value [value...]`\n\n定义标准的community-list，使用internet关键字匹配任何community\n\n`lp community-list 100-199 permit|deny regexp`\n\n定义扩展的community-list，可使用正则表达式匹配community\n\n`show ip community-list`\n\n查看配置的community-list\n\n`show ip bgp x.x.x.x`\n\n查看BGP路由的详细信息，包括community\n\n## Prefix-list\n### 配置实例\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733125724825-5fc79afd-ba57-4220-a7e3-c07cbc16d21f.png)\n\n+ R2上，过滤掉12.12.12.0/24路由，其他放行\n\n```plain\nR2(config)# ip prefix-list 12 deny 12.12.12.0/24\nR2(config)# ip prefix-list 12 permit 0.0.0.0/0 le 32\nR2(config)# router bgp 12\nR2(config-router)# neighbor 10.1.23.3 prefix-list 12 out\n```\n\n## distribute-list\n### 配置实例\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733125796770-bb717766-917b-4aca-9dce-e03e43310a11.png)\n\n+ R2上，过滤掉12.12.12.0/24路由，其他放行\n\n```plain\nR2(config)# access-ist 1 deny 12.12.12.0\nR2(config)# access-list 1 permit any\nR2(config)# router bgp 12\nR2(config-router)# neighbor 10.1.23.3 distribute-list 1 out\n```\n\n## Route-map\n### 可以在以下的BGP命令中使用route-map关键字\n+ neighbor\n+ bgp dampening\n+ network\n+ redistribute\n\n### 可以为特定的目的在不同的命令中调用定义好的route-map\n+ suppress-map\n+ unsuppress-map\n+ advertise-map\n+ inject-map\n+ exist-map\n+ non-exist-map\n+ tabel-map\n\n### match语句能匹配\n+ Access-list\n+ Ip prefix-list\n+ Ip next-hop\n+ local-preference\n+ metric\n+ Tag\n+ AS PATH\n+ BGP community\n+ IGP route-type(internal/external)\n\n### set语句能设置\n+ Origin\n+ Weight\n+ BGP community\n+ LOCAL PREFERENCE\n+ MED\n\n### 配置实例 关联network 执行策略\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733126321432-30b4a9e2-5670-4e5c-b28e-b11d6398051b.png)\n\n+ _**R1上，network引入路由时设置路径属性**_\n\n```plain\nip prefix-list 11 permit 11.11.11.0/24\nip prefix-ist 12 permit 12.12.12.0/24\nroute-map RP1 permit 10\n  set community 100:11\nroute-map RP2 permit 20\n  set community 100:12\nrouter bgp 100\n  network 11.11.11.0 mask 255.255.255.0 route-map RP1\n  network 12.12.12.0 mask 255.255.255.0 route-map RP2\n  neighbor 10.1.12.2 send-community\n```\n\n+ **该策略对所有BGP邻居有效**\n\n### 关联neighbor，针对特定邻居执行策略\n**R1上，对R2传递路由时，设定MED属性值**\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733126749376-550e409c-c6c6-419c-8ca7-fa6ec14c3a1d.png)\n\n```plain\nip prefix-list 11 permit 11.11.11.0/24\nip prefix-list 12 permit 12.12.12.0/24\nroute-map RP permit 10\n  match ip address 11\n  set metric 1000\nroute-map RP permit 20\n  match ip address 12\n  set metric 2000\nrouter bgp 100\n  neighbor 10.1.12.2 route-map RP out\n```\n\n### 配置实例 重发布关联route-map\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733126794524-8909f174-b61c-467b-9e8e-4a56528ab197.png)\n\n**R2上，将OSPF路由重发布进BGP**\n\n```plain\nrouter bgp 200\nredistribute ospf 1 route-map RP match ?\nneighbor 10.1.12.1 remote-as 100\nno auto-summary\n```\n\n**redistribute ospf 1**\n\n+ 默认只重发布Intra-Area及Inter-Area路由\n+ match extemnal只重发布E1及E2\n+ match external 1只重发布E1;external 2只重发布E2\n+ match nssa-external 只重发布NSSA外部路由\n\n### Policy-list\n+ 可预先将包含一组match语句的route-map定义成一个命令列表，这个列表称为policy-list\n+ 这些policy-list可以在route-map中被调用\n+ 一个policy-list就像个只包含match语句的route-map当route-map被执行，被其调用的policy-list中所包含的match语句将一并被遍历且执行match动作\n+ 这是一种在大中型网络中运用、使得配置“模块化”的特性\n\n#### 特性\n+ Ipv6不支持\n+ 12.0(22)S 和12.2(15)T之前的CISCOIOS版本不支持该特性，另外更老的IOS版本的路由器重启存在路由策略配置丢失的风险\n+ Policy-list中不能包含set语句，但是它被route-map调用后，该route-map中可以包含set语句\n+ Policy-list只在BGP中支持，其他的IP路由协议并不支持这个特性\n\n#### 配置\n```plain\nip policy-list as100 permit\n  match as-path 1\n  match community 1\n```\n\n+ 上述命令创建一个policy-list\n+ Policy-list只能包含match语句\n\n```plain\nroute-map RP permit 10\n  match policy-list as100\n  match ip address prefix-list 100\n  set local-preference 300\n```\n\n+ 上述命令在route-map中调用定义好的policy-list\n+ 一个route-map中可调用多个policy-list\n\n## ORF\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733127261820-c5da6b86-80e8-429d-bc1a-2a6100b878e4.png)\n\n### 配置\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733127420812-f87e5d92-541e-4e91-91ee-8da2c7342e7e.png)\n\n+ R2的配置（sender）\n\n```plain\nrouter bgp 12\n  address-family ipv4 unicast\n  neighbor 10.1.12.1 capability orf prefix-ist send\n  neighbor 10.1.12.1 prefix-list FILTER in\n\nip prefix-ist FlLTER deny 1.1.1.0/24\nip prefix-list FlLTER permit\n```\n\n+ R1的配置（receiver）\n\n```plain\nrouter bgp 12\n  address-family ipv4 unicast\n  neighbor 10.1.12.2 capability orf prefix-list receive\n```\n\n+ 注意：省去基本配置，如手工指定BGP邻居\n\n### 一些\n+ ORF消息包含以下内容\n    - AFl/SAFlipv4 unicast\n    - ORF TYPE\n    - When to refresh\n    - List of ORF entries\n+ ORF类型不同，ORFentries也不尽相同\n+ 每种ORF类型都需要进行ORF能力的协商\n\n## 路由拆分 BGP Deaggregation\n### 背景\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733127855820-e4b03bc3-1426-46bb-b770-6e35ac5f0b46.png)\n\n### 配置\n+ Conditional inject的配置如下(BGP路由选择进程模式下)\n\n`bgp inject-map map1 exist-map map2 [copy attributes]`\n\n+ 上述命令的意思是当map2所匹配的汇总路由正常时，在本地BGP RIB中注入map1中定义的明细路由。\n+ 当汇总路由挂掉，这条明细也就跟着消失，这就是所谓的条件注入-conditional injection。\n+ 下面我们在看来一下这两个route-map的详细内容，这些是需要格外注意的。\n+ exist-map使用的route-map最少具有以下两个match语句\n\n`match ip address prefix-list`\n\n+ 上面这条match语句用来匹配汇总路由\n\n`match ip route-source`\n\n+ 上面这条match语句用来匹配发送该汇总路由的邻居IP。如果指定了copyattributes选项，那么被inject的明细路由会继承汇总路由的路径属性，否则明细将被当成本地生成的路由。\n+ Inject-map使用的route-map中\n\n`Set ip address prefix-list`\n\n+ 上面的这条set命令用来定义将被注入到本地BGPRIB的明细路由。被注入的前缀可以使用\n\n`Show ip bgpinjected-path`\n\n+ 来显示\n\n## 路由反射器\n### 中转AS中的IBGP问题\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733138789405-9509b338-52b2-4cd0-b7b8-716ee84b829a.png)\n\n+ AS内要求IBGP全互联（IBGP水平分割）\n+ BGP routers\n    - 需维护大量的TCP和BGP链接\n    - 网络中充斥着BGP路由信息\n+ 解决方案\n    - 路由反射器\n    - BGP联邦\n\n### 背景\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733138923248-9e3c4eb2-ccea-4481-8feb-28e80a14bd4e.png)\n\n+ 因为IBGP水平分割原则，导致AS内部需要维护大量的BGP链接（要求IBGP全互联），从而影响网络性能，路由反射器可以“放宽”水平分割原则，缓解该问题\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733139053948-4ababdc6-fc58-4813-a03b-65e6b92fa662.png)\n\n+ Route Reflector\n+ Client\n\n### 联邦内的BGP路由路径属性\n+ 在联邦内部保留外部路由的NEXT_HOP属性\n+ 公布给联邦的路由的MED属性在整个联邦范围内予以保留\n+ 路由的LP属性在整个联邦范围内予以保留\n+ 在联邦范围内，将成员AS号压入AS PATH，但不公布到联邦外，并且使用TYPE3、4的AS PATH\n+ AS PATH中的联邦成员AS号用于在联邦内部避免环路;联邦内成员AS号不参与AS PATH长度计算\n\n### 路由反射原则\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733139094878-a409c072-6d0f-48f0-8f54-d88dc4810e2a.png)\n\n+ 如果路由学习自非client IBGP对等体，则反射给所有client\n+ 如果路由学习自—client，则反射给所有非client IBGP邻居和除了该client以外的所有client\n+ 如果路由学习自EBGP邻居，则发送给所有的client和非client IBGP邻居\n\n### 实例1\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733139249267-49816366-cad0-4367-bc94-0694daae41ae.png)\n\n+ 如果路由学习自一client，则反射给所有非client IBGP邻居和除了该client以外的所有client\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733139304799-ced25330-ed76-4b30-8385-39709a182131.png)\n\n+ 如果路由学习至自client IBG对等体，则反射给所有的client\n\n### 路由反射器下的防环\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733139376642-4f17a413-a0ac-4a12-b60a-b5f67e6af3da.png)\n\n+ 由于AS PATH属性在AS内部不会发生变化(仅当路由离开本AS才会被更新)，因此AS内才有水平分割的机制用于防止环路，而路由反射器实际上是放宽了水平分割原则，这个就会给环路带来一定的隐患，因此路由反射器需使用以下两个属性防止环路ORIGINATOR ID和CLUSTER LIST是路由反射器使用的可选非传递属性，用来防止环路。\n\n### Originator_ID、Cluster_list\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733140109190-57da2edc-e4e2-44dd-859d-498ca74c3909.png)\n\n#### Originator_ID\n+ 每当一条路由被路由反射器反射时，该路由的始发IBGP路由器的Router-ID将会被存在路由的originator_ID属性中\n+ 当一台路由器收到IBGP路由且其originatorID与该路由器的RouterID相同，则路由器忽略该条路由\n+ Originator_ID及Cluster-list属性将会影响BGP路径决策\n\n#### Originator_ID的值\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733140502948-58450af4-a6d4-4764-b425-43380d718b4b.png)\n\n### 路由反射原则\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733140292005-dd4b4b29-9070-492d-9038-64a94ac51f6e.png)\n\n+ 如果路由学习自非client lBGP对等体，则反射给所有client\n+ 如果路由学习自一client，则反射给所有非ctientIBGP邻居和除了该client以外的所有client\n+ 如果路由学习自EBGP邻居，则发送给所有client和非clientIBGP邻居\n\n### 路由反射簇\n+ 路由反射簇包括反射器及其Client\n+ 每一个簇都有唯一的簇ID\n+ 每当一条路由被反射器反射后，该反射器(该簇)的ClusterID就会被添加至路由的Cluster list属性中\n+ 每当反射器收到一条Cluster list属性已经包含该簇的ClusterID的路由时，该路由基于防环的目的将不被反射\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733140660257-05943ad7-9a7c-4dab-af52-05dac354ea2b.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733140718784-4731164f-0b69-4428-b4ff-cbeeaab41843.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733140920126-45d22e04-6ac7-4ea2-b433-4ecf734da20a.png)\n\n### 路由反射器冗余\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733141230441-a00716c4-3db4-4a6c-9fb7-535cd4ebe1d1.png)\n\n+ 冗余RR增加了网络的健壮性\n+ 使用Originator IDCluster_list属性来在冗余RR环境中避免路由环路。\n+ 例如将两个RR 的Cluster_ID配置为一样，那么可以起到进一步的防环作用\n+ 所有的RR之间建议采用IBGP全互联\n+ Client会收到来自两个RR反射的路由，如何决策 ?\n\n### BGP选路规则\n1. 优选具有最大Weight值的路由\n2. 优选具有最大Local Pref值的路由\n3. 优选起源于本地的路由(如本地networkaggregate或redistribute的)即下一跳是0.0.0.0(在BGP 表中,当前路由器通告的路由的下一跳为0.0.0.0)\n4. 优选AS-Path最短的路由\n5. Origin(IGP >EGP>Incomplete )\n6. 优选MED最小的路由，默认情况下仅有当所有的备选路由来自同一AS才会比较MED\n7. 优选EBGP邻居发来的路由(相对于IBGP邻居学过来的)，在联邦EBGP和IBGP中首选联邦EBGP 路由\n8. 优选到BGP NEXT HOP最近的邻居\n9. 如果有多条来自相同相邻AS的路由并通过Maximum-paths 使多条路径可用,则将所有开销相同的路由放入Loc-RIB\n10. 优选最老的EBGP路由，降低滚翻的影响(此条主要对EBGP路由起效，但是现在基本不用该条，因不确定性太大)\n11. BGP 邻居的RID越小越优先\n12. 优选Cluster-List 最短的路由\n13. 选择邻居ip地址(BGP的neighbor配置中的那个地址)最小的路由\n\n## 优选MED最小的路由\n### MED属性设置方法\n+ 将IGP路由引入BGP时关联Route-map进行设置\n+ 对BGP Peer应用IN/OUT方向的Route-map进行设置\n+ 非Route-map(自动)方式\n    - 使用network或redistribute方式将IGP路由引入BGP时,MED将继承IGP路由的Metric(直联路由及静态路由的Metric为0)\n    - 使用aggregate-address方式引入路由，则MED为空\n\n### MED注意事项\n+ 默认情况下，只比较来自同一邻居AS的BGP路由的MED值，就是说如果同一个目的地的两条路由来自不同的AS，则不进行MED值的比较。如果仍然希望比较来自不同邻接AS的路由，可使用如下命令\n+ `bgp always-compare-med`\n+ MED只是在直接相连的自治系统间影响业务量，而不会跨AS传递\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1733208543904-53fea48b-83db-441b-964d-f8c27e92a6ee.png)\n\n## BGP负载均衡\n+ 当前面的8条选路原则都无法优选出最优路由时，并且在BGP进程下面配置了maximum-paths[ibgp]n,n的取值为2-6,那么将执行等价负载均衡，也就是将这些等代价的BGP路径都放进IP路由表使用，但是要注意，虽然这些路径在本地都用了，最终却只有一条BGP路径是best最优的。具备等价负载均衡条件的候选路径需满足如下条件:\n    - 必须有相同的路径属性，如weight、LP、AS PATH(不仅是长度，整个AS PATH包括AS号都要相同)、origincode、MED及IGP的Distance值\n    - 每一条路径的下一跳都不相同\n\n__","tags":["网络","CCNP"],"categories":["思科"]},{"title":"EIGRP详解","slug":"CCNP/CCNP路由 EIGRP部分","url":"/CCNP/CCNP路由 EIGRP部分/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## 特点\n+ 思科私有的增强型的矢量路由协议\n+ 快速汇聚：采用DUAL来实现快速汇聚\n+ 触发更新\n+ 部分更新：EIGRP发送部分更新，把更新的部分传递给需要的路由器\n+ 使用多播和单播：使用多播和单播而不是广播，多播地址224.0.0.10\n+ 支持VLSM：支持无类\n+ 精密的度量值：能实现不等价的负载均衡\n\n## 关键技术\n+ 邻居发现协议\n    - 使用Hello包发现邻居，并动态的获悉其直连的网络中的其他路由器\n+ 可靠传输协议（RTP）\n    - 确保EIGRP分组按顺序以可靠的方式传输给所有邻居\n+ DUAL有限状态机\n    - 选择最低的度量值和无环的路径到达目的网段\n+ 协议无关模块\n    - EIGRP支持IP、IPv6、Appletalk和IPX，其都有独立EIGRP模块，负责处理网络层协议而异的需求。\n\n## EIGRP的三张表\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730161963616-a3e42c29-d0d2-4365-b3d0-f1e5f30550fc.png)\n\n+ 邻居表\n+ 拓扑表\n+ 路由表\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730162218489-49492311-099f-4492-ab81-1f7292fec172.png)\n\n## EIGRP数据包\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730162469491-ef6f6e0d-c93a-43a2-911c-db3f1413fa94.png)\n\n## Metric的计算\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730163258199-be43445b-6cd6-40ed-b80c-e8d37f27b360.png)![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730163274887-11941729-c27e-4e74-98e2-ef579f23049b.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730163485100-1b7af06d-b867-41af-a48c-05d2e96f2577.png)\n\n默认K1=1,K2=0,K3=1,K4=0,K5=0\n\n延迟取值沿路所有数据出接口(或路由入口)延迟的累加\n\nDLY= 延迟 (us) / 10 x 256\n\n带宽取值沿路所有数据出接口(或路由入口)带宽的最低值\n\nBW= [ 10000000 / 带宽 (Kbps) ] x 256\n\n**EIGRP路由metric默认为延迟+带宽**\n\n****\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730163876261-21d8ff7a-5ece-432c-bf72-da5da25f67d7.png)\n\nA路由器上，看到的3.3.3.0/24的路由metric(路径1)?\n\nBW=10^7/1544*256=6476(去掉小数)*256=1657856\n\nDLY=20000/10*256+5000/10*256=640000\n\nMetric=640000+1657856=2297856\n\n## 初始路由发现\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730164083165-6ad1f436-b29c-4e42-8178-0df9cd83b893.png)\n\n机翻过程\n\n+ Hello包 1.我是路由器A，链接上是谁?\n+ Hello包 2.你好，我是路由器B。\n+ Update包 3.下面是我完整的路由信息。\n+ ACK包 4.感谢提供的信息!\n+ Update包 5.下面是我完整的路线信息。\n+ ACK包 6.感谢提供的信息! （凝聚）\n\n## DUAL算法\n+ Diffusing Update Algorithm 用于计算最佳无环路径和备用路径\n\n### 实例1\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730165228311-05385374-7357-431e-968e-97b968881d03.png)![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730165266167-e22f9b6a-06d3-4daa-b10a-16b88ae48a9f.png)\n\n+ 将1.0的metric设置为不可达(-1表示不可达)\n+ 由于没有FS1.0被标记为Active状态\n+ D向C及E发送查询信息，询问去往1.0的替代路径\n+ D将C及E标记为未应答查询(q)\n+ 路由器C及E将经由D路由器前往网络1.0的路径标记为不可达\n+ 路由器C发送应答消息给D，指出到达1.0网段的路径没变\n+ D收到C的应答，将C的查询未应答标记删除\n+ 保持前往1.0路由的active状态，同时等待E的应答\n+ E由于从C前往1.0网段的AD值=3，不小于原来的FD=3，所以E将路由标记为active，且向C查询，并将C标记为查询未应答\n+ D收到E的应答消息\n+ 删除E的查询未应答标记\n+ 计算新的FD将后继路由加入到拓扑表\n+ 将1.0路由切换到passive\n\n## 几个术语\n后继路由器\n\n可行距离(FD)\n\n可行后继路由器(FS)\n\n通告距离(AD)\n\n可行条件，或称可行性条件(FC)\n\n## 配置和验证\n### Passive-interface配置\n`Router(config-router)#passive-interface {type number} | default`\n\n+ 该命令用于将特定接口设置为被动状态，defaut将所有路由器接白设置为被动状态\n\n被动接口作用如下\n\n+ 禁止通过被动接口建立邻接关系\n+ 禁止通过被动接口接收或发送路由更新让EIGRP进程通告被动接口连接的子网查看:\n\n`show ip protocols`\n\n`show ip eigrp neighbor`\n\n## EIGRP路由汇总\n### EIGRP自动汇总\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730170203332-86774a59-6816-4126-a00b-79a436b93c7e.png)\n\n**关闭自动汇总**\n\n`Router(config-router)# no auto-summary`\n\n**配置手工汇总**\n\n`Router(config-if)# ip summary-address eigrp as-number address mask [admin-distance]`\n\n+ 手工配置汇总时，仅当路由选择表中至少有一条该汇总路由的明细路由时，汇总路由才被通告出去。\n+ ip summary-address eigrp进行汇总的路由AD=5\n\n## 负载均衡\n+ 等价负载均衡\n+ EIGRP在度量值相同的所有路径之间分配数据流量，默认为4条等价路径之间均衡IP负载，最大可为16条\n+ `Router(config-router)# Maximum-paths maximum-path`\n\n### 非等价均衡\n**EIGRP也能在度量值不同的多条路径之间负载均衡**\n\n`Router(config-router)# Variance multiplier`\n\n+ multplier默认值为1，范围1~128\n+ 只有可行路径才被用于负载均衡，可行条件为：\n    - 路由必须是无环的。（即AD<FD min）\n    - FD<= FD min X multiplier\n+ 注：variance不指定最大路径，而指定了度量值的范围\n\n### 例：\n`Router(config-router)# Variance 2`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730188848991-445331a1-6714-448c-8a92-04f2e7af5376.png)![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730188866082-9c793dc2-be71-4394-9377-2c39b7231688.png)\n\n## EIGRP认证\n### 路由器使用两种身份验证方式\n+ 简单密码身份验证\n    - IS-IS\n    - OSPF\n    - RIPv2\n+ MD5身份验证\n    - OSPF\n    - BGP\n    - EIGRP\n    - RIPv2\n\n### EIGRP MD5身份验证配置\n+ 定义key chain（全局模式）\n    - `Key chain name-of-chain`\n    - `key key-id `\n    - `key-string text`\n    - `accept-lifetime start-time (infinite end-time duration seconds}`\n    - `send-lifetime start-time {infinite | end-time | duration seconds}`\n+ 关联key chain（接口模式）\n    - `ip authentication key-chain eigrp autonomous-system name-of-chain`\n+ 启用认证（接口模式）\n    - `ip authentication mode eigrp autonomous-system md5`\n\n#### 实例：\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730189387252-e032d95a-10b6-4916-a220-919f6941dd64.png)\n\n`show ip eigrp neighbors`\n\n`show ip route`\n\n`show ip eigrp interface detail`\n\n## 大型网络EIGRP的可扩展性\n大型EIGRP网络通常存在以下一些问题\n\n+ 需要处理的路由表很大\n+ 大量的邻居，要维护庞大的拓扑表\n+ 需要交换大量的路由更新，发送大量的查询和应答\n\n这使得影响网络的可扩展性的变量变多，如：\n\n+ 邻居间交换的信息量\n+ 路由器数量\n+ 拓扑深度\n+ 网络中的替代路径数\n\n## 陷入主动状态\n+ 路由器陷入主动状态并因此发起查询，仅当收到每个查询的应答后，该路由器才会脱离主动状态进入被动状态\n+ 如果路由器在3分钟肉没有收到查询应答，路由将陷入主动状态(SIA)此时路由器将重置与未应答的邻居之间的邻接关系。\n\n导致路由进入SIA的常见原因\n\n+ 路由器太忙无法回答查询\n+ 路由器之间的链路质量低劣\n+ 单向链路\n\n## 防范SIA\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730249689117-deda2787-45c7-4c17-93c9-5d4919815bb5.png)\n\n+ EIGRP分组新增加了SIA-查询和SIA-应答，是由主动过程改进的\n\n**改进前**:主动定时器到期后，A重置与B的邻接关系，但问题出在B和C之间的链路上\n\n**改进后**:主动定时器过半后，A发送SIA-查询，而B确认查询，从而保持邻接关系\n\n## 限制查询范围\n+ 确定好路由需求后，可提高EIGRP的可扩展性，使用以下两种方式\n    - 在合适的路由器上使用路由汇总\n    - 将远程路由器设置有末节EIGRP路由器\n+ 将远程路由器设置有末节EIGRP路由器\n+ 中央-分支网络拓扑中，stub路由器将所有非本地数据流转发给hub路由器，而无需保存完整的路由表。\n+ 对于hub路由器来说，不应将stub路由器最为中转路由器，禁止stub路由器将hub路由器通告给其他的hub。\n+ stub路由器不会收到查询，与stub区域相连的hub路由器将代表末节i由器对查询做出应答。\n+ 未节路由器时指:该路由器与网络核心相连，且不会被用来中转数据未节路由器的EIGRP邻居全部都是中央路由器:\n\n### 使用路由汇总\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730250750824-bcc81bb9-9bfe-45ec-a6ff-82e841cd2b18.png)\n\n+ 查询在收到汇总路由的路由器结束\n+ 仅当路由表中有被查询的网络完全匹配的路由时，远程路由器才会进一步传播查询\n\n\n\n## 基础配置\n```plain\nRouter(config)# router eigrp autonomous-system\t\n#EIGRP将autonomous-system参数称为“自治系统”编号。\nRouter(config-router)# network network-number [wildcard-mask]\n```\n\n```plain\nRouter(config)# lp default-network network-number\n#将路由表中某个网络宣告为缺省网络\nRouter(config-router)# network network-number\n#将指定的网络号通告给其他的路由器\n```","tags":["网络","CCNP"],"categories":["思科"]},{"title":"OSPF和LSA详解","slug":"CCNP/CCNP路由 OSPF和LSA部分","url":"/CCNP/CCNP路由 OSPF和LSA部分/","content":"\n# OSPF\n## 基础回顾\nOSPF（Open Shortest Path First，开放最短路径优先）是一种链路状态路由协议，无路由循环(全局拓扑)，属于IGP。RFC2328，“开放”意味着非私有的，对公众开放的。\n\n+ OSPF协议使用的组播地址\n    - 所有OSPF路由器224.0.0.5；DR BDR-224.0.0.6\n+ OSPF的报文封装\n    - OSPF协议包直接封装于IP，协议号89。\n+ OSPF路由协议的管理距离:110\n\n## 网络类型\n+ **点对点**\n+ **广播**\n+ **非广播**\n    - 非广播又包含了5种运行模式：\n        * NBMA（RFC）\n        * P2MP（RFC）\n        * P2MP nonbroadcast（CISCO）\n        * Broadcast（CISCO）\n        * P2P（CISCO）\n\n### 点对点类型\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729597653542-543c407b-5fbf-4a07-addb-ef4a220af580.png)\n\n+ 如果二层的协议为PPP、HDLC等，则OSPF网络类型为P2P\n+ 如果帧中继子接口类型为P2P的，则OSPF网络类型也为P2P\n+ 不选举DR、BDR\n+ 使用组播地址224.0.0.5\n+ OSPF能够根据二层封装自动检测到P2P网络类型\n\n### 广播型多路访问\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729597748803-b40f6f84-0db0-4015-b26a-7db24de3eec2.png)\n\n+ 通常出现在以太网\n+ 选举DR、BDR\n+ 所有路由器均与DR及BDR建立邻接关系\n+ 使用组播地址224.0.0.5及224.0.0.6\n\n### NBMA网络选择OSPF的模式\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729597933313-047b21b5-add8-4100-bfee-794b3879c1ab.png)\n\n+ 在帧中继主接口上，默认的OSPF模式为非广播\n+ 在点到点帧中继子接口上，默认的OSPF模式为点到点\n+ 在帧中继多点子接口上，默认的OSPF模式为非广播\n\n\n\n## 链路状态协议\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729582503246-0528dc00-6265-464a-a66c-0dbf9991d7f2.png)\n\n## 网络优化-Router-ID\n+ 为了提高路由器的RID的稳定性和网络的稳定性建议手动的设置路由器的Router-ID\n+ 在OSPF的进程下修改:router-id <x.x.x.x>\n+ 在项目实施中，一般是建立loopback口，并且手工指定loopback口地址为router-id\n\n## DR、BDR\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729583194925-732e5d65-058d-45b9-b919-c1a4e44723d4.png)\n\n+ DR的作用：多路访问中为了减少邻接关系（N平方的问题）和LSA的泛洪，采用DR机制，BDR提供了备份\n+ MA网络上所有的路由器均与DR、BDR建立邻居关系\n\n## DR选举比较顺序\n+ 接口优先级数字越大越优先（优先级为0不能参与DR的选举）、\n+ RouterID越大越好\n+ 稳定性压倒一切（非抢占）\n+ 通过控制接口优先级是控制DR选举的好办法\n+ DR的选举是基于接口的，如果说某个路由器是DR，这种说法是错误的\n\n## DR及BDR选举的控制\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729597316618-061a5e61-a25e-40b1-885d-8a2d9fbd2000.png)\n\n`ip ospf priority 10`\n\n比较次序\n\n+ 优先级\n+ 路由器ID\n+ 优先级为0的不能成为DR或者BDR\n\n## 链路的开销\n+ 自动计算:COST=参考带宽(10的8次方)/出口带宽\n+ 接口带宽为接口逻辑带宽，可以使用bandwith命令调整，主要用于路由计算而不是接口物理带宽，但一般情况:接口逻辑带宽=接口物理带宽。\n+ 手工修改开销的方法\n\n`Router(config)# int serial 1`\n\n`Router(config-if)# ip ospf cost 100\t//该命令在收路由的入口`\n\n+ 可修改参考带宽,来保障OSPF在现如今的网络中正常运转\n\n`auto-cost reference-bandwidth <参考带宽以Mbits为单位>`\n\n## 三张表\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729583395100-67ec4bc7-0287-42cc-8d1b-76f7f8ece3b8.png)\n\n+ 相邻的两台路由器运行OSPF协议\n+ 两台路由器直接连接\n+ 在同一自治系统\n+ Hello/Dead时间一致\n+ 区域ID一致\n+ 认证密码一致\n+ MTP值一致\n+ *网络类型一致\n+ *链路两端接口掩码一致\n\n## 报文类型\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729583532652-1fe547e6-7e27-4e76-bb58-191ed1d3961e.png)\n\n+ Hello\t建立和维护OSPF邻居关系\n+ DBD\t\t链路状态数据库描述信息(描述LSDB中LSA头部列表)\n+ LSR\t\t链路状态请求,向OSPF邻居请求链路状态信息\n+ LSU\t\t链路状态更新(包含一条或多条LSA)\n+ LSAck\t确认报文\n\n## OSPF邻居建立过程\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729584652052-d4b95daa-8884-47ae-920e-34ad316f4a3a.png)\n\n### 邻居发现\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729584326053-0256b458-b096-42dc-a8e0-e285f71dc6cd.png)\n\n### 路由发现阶段\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729584355522-638bec3d-ff82-4db9-90ba-3579b3a0f3f0.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729584499985-4d227371-bb64-4bbd-ba77-fdbe2784854c.png)\n\n## OSPF路由器建立邻接关系的过程详细描述\n+ OSPF路由器接口up，发送Hello包(NBMA模式时将进入Attempt状态)。\n+ OSPF路由器接口收到Hello包，进入Init状态;并将该Hello包的发送者的RouterID添加到Hello包(自己将要从该接口发送出去的Hello包)的邻居列表中。\n+ OSPF路由器接口收到邻居列表中含有自己RouterID的Hello包，进入Two-way状态形成OSPF邻居关系，并把该路由器的RouterID添加到自己的OSPF邻居表中\n+ 在进入Two-way状态后，广播、非广播网络类型的链路，在DR选举等待时间内进行DR选举。点对点没有这个过程。\n+ 在DR选举完成或跳过DR选举后，建立OSPF邻接关系，进入exstart(准启动)状态并选举DBD交换主从路由器，以及由主路由器定义DBD序列号，RouterID大的为主路由器。目的是为了解决DBD自身的可靠性。\n+ 主从路由器选举完成后，进入Exchange(交换)状态，交换DBD信息。DBD交换完成后，进入Loading状态，对链路状态数据库和收到的DBD的LSA头部进行比较，发现自己数据库中没有的LSA就发送LSR，向邻居请求该LSA;邻居收到LSR后，回应LSU;收到邻居发来的LSU，存储这些LSA到自己的链路状态数据库，并发送LSAck确认。\n+ LSA交换完成后，进入FULL状态，所有形成邻居的OSPF路由器都拥有相同链路状态数据库。\n+ 定期发送Hello包，维护邻居关系。\n\n## OSPF邻接关系\n+ 路由器之间链路状态信息必须同步，LSA具有以下特征：\n+ LSA（LSU）是可靠的传输，需要LSAck确认\n+ LSA有序列号和寿命，以确保是最新的LAS\n+ LSA被定期的刷新以确保拓扑信息的有效性\n\n## 链路状态数据的状态\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729585188616-4c4dd0cf-7eae-44df-8df2-4308bf761556.png)\n\n## OSPF多区域概念\n### 单区域\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729585216495-f1b2e4b6-e173-4b2d-9bd3-ec5d0a567d94.png)\n\n+ 收到的LSA通告太多了，OSPF路由器的负担很大\n+ 内部动荡会引起全网路由器的完全SPF计算\n+ 资源消耗过多，LSDB庞大，设备性能下降，影响数据转发\n+ 每台路由器都需要维护的路由表越来越大，单区域内路由无法汇总\n\n#### 解决方案\n+ 把大型网络分隔为多个较小，可管理的单元-区域 area;\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729585389704-f78a98ae-479f-43ea-882e-53cc2ffca7c3.png)\n\n+ 划分区域的好处\n+ 减少了LSA洪泛的范围，有效地把拓扑变化控制在区域内，提高了网络的稳定性拓扑的变化影响可以只限制涉及本区域\n+ 多区域提高了网络的扩展性，有利于组建大规模的网络\n+ 在区域边界可以做路由汇总，减小了路由表\n\n### OSPF路由器角色\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729585477757-23c7849f-09a3-4fee-b0a7-5e1fdd6742c5.png)\n\n## 在帧中继环境下的OSPF\n### NBMA网络选择OSPF模式 \n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729816380101-0577bb5b-d702-4859-8ad0-e5b784de728e.png)\n\n+ 在帧中继的主接口上，默认的OSPF模式为非广播\n+ 在点到点帧中继子接口中，默认的OSPF模式为点对点\n+ 在帧中继多点子接口上，默认的OSPF模式为非广播\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729818741701-a39e2439-6c8e-4b10-9bba-d886484fee5c.png)\n\n如果是非广播这一 OSPF 网络类型,则 OSPF 也不会主动发送组播包去发现邻居，因此邻居关系建立这\n\n里也有问题。\n\n### NBMA网络下OSPF的运行\n#### 方式一\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729818282720-8e8c7e7b-6548-41cd-b825-64c10f08f90b.png)\n\n+ 指定OSPF网络类型为broadcast\n+ 使用OSPF多播hello分组自动来自动发送邻居\n+ 选举DR和BDR\n+ DR和BDR必须与其他所有路由器直接相连\n\n```plain\nRouter(config)# interface serial 0/0\nRouter(config-if)# encapsulation frame-relay\nRouter(config-if)# ip ospf network broadcast\n```\n\n#### 方式二\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729818405731-56d45fde-6d9d-4394-b5a6-b9a317b9c04a.png)\n\n+ 网络类型为non-broadcast（默认）\n+ 手动指定邻居\n+ 选举DR和BDR\n+ DR和BDR必须与其他所有路由器直接相连\n\n```plain\nRouter(config)#interface serial 0/0\nRouter(config)#neighbor ip-address [priority number] [poll-interval number] [cost number] [database-filter all]\nRouter(config-if)#encapsulation frame-relay\nRouter(config-if)#ip ospf network non-broadcast\n```\n\n#### 方式三\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729818635272-2362be8e-2382-4c0a-94eb-f1f6c6f9ecca.png)\n\n```plain\ninterface serial0/0\nencapsulation frame-relay\nip ospf network point-to-multipoint\nrouter ospf 100\nnetwork 202.101.100.0 0.0.0.255 area 0\n```\n\n```plain\ninterface Serial0/0\nencapsulation frame-relay\nip ospf network point-to-multipoint\nip ospf priority 0\n```\n\n## 基础配置\n```plain\nRouter(config)# router ospf process-id [vrf vpn-name]\nRouter(config-router)# network ip-address wildcard-mask area area-id\n```\n\n```plain\nRouter(config-router)# router-id ip-address\nRouter# clear ip ospf process\n```\n\n```plain\nRouter(config-if)# ip ospf network [ {broadcast | non-broadcast | point-to-multipoint [non-broadcast] | point-to-point} ]\n```\n\n# LSA\n## LSA简介\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729819118059-283bca5c-1922-4be5-944a-07aaab2b1e10.png)\n\n+ **Link State Advertisement**（链路状态通告），这是在网络协议中，尤其是 OSPF（开放最短路径优先）和 IS-IS（中间系统到中间系统）中使用的一种消息类型。\n\n\n\n## LSA类型\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729819172881-af6ef12d-89f7-42af-9256-e129103f1207.png)\n\n### 类型1 路由器LSA Router LSA\n+ 每个路由器针对它所在的区域产生LSA1，描述区域内部与路由器直连的链路的信息(包括链路类型，Cost等)\n+ LSA1只允许在本区域内洪泛，不允许跨越ABR\n+ LSA中会标识路由器是否是ABR(B比特置位),ASBR(E比特置位)或者是Virtual-link(V比特置位)的端点的身份信息\n\n### 类型2 网络LSA Network LSA\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729821435220-c6372be2-8ace-40f8-9842-95f87f104bc8.png)\n\n### 类型1、2总结\n+ 通过LSA1，LSA2在区域内洪泛,使区域内每个路由器的LSDB达到同步计算生成标识为“O”的路由，解决区域内部的通信问题\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729821481351-2632bc17-429c-4770-aa0a-fcea98417f5c.png)\n\n### 类型3 网络汇总LSA Network Summary LSA\n+ 由ABR生成，实际上就是将区域内部的Type1Type2的信息收集起来以路由子网的形式扩散出去，这就是SummayLSA中sunmay的含义(注意这里的summary与路由汇总没有关系)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729821558294-c0336486-6143-4997-b4c4-c9602d37a3b7.png)\n\nType3 的链路状态ID是目的网络地址。\n\n+ 如果一台ABR路由器在与它本身相连的区域内有多条路由可以到达目的地,那么它将只会始发单一的一条网络汇总LSA到骨干区域,而且这条网络汇总LSA是上述多条路由中代价最低的。\n+ ABR收到来自同区域其它ABR传来的Type3 LSA后重新生成新的Type3 LSA（Advertising Router 改为自己）然后继续在整个OSPF系统内扩散\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729822506797-293ae502-10d7-49ed-a0ab-b1733b5c626e.png)\n\n### 类型4 ASBR Summary LSA\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729822619398-8be5539d-1f33-4d4e-9031-46f359fc9edb.png)\n\n+ ASBR Summary LSA由ABR生成，用于描述ABR能够到达的ASBR它的链路状态ID为目的ASBR的RID。\n\n### 类型5 自治系统外LSA AS external LSA\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729823363172-eff49501-c34f-42fe-a0c6-64d4b5b2b16e.png)\n\n+ Autonomous System External LSA由ASBR生成用于描述OSPF自治域系统外的目标网段信息链路状态ID是目的地址的IP网络号\n+ 外部路由通过重发布，引入OSPF路由域，相应信息(路由条目)由ASBR以LSA5的形式生成然后进入OSPF路由域\n+ 缺省情况下，LSA5生成路由用OE2表示，可强行指定为OE1\n    - OE2 开销=外部开销\n    - OE1 开销=外部开销+内部开销\n+ LSA5不允许进入特殊区域——stub存根区& NSSA区\n\n#### OE1、OE2的区别\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729823569011-bb805760-c712-4ac8-8c02-a7cb40961599.png)\n\n### 类型7 NSSA中的外部LSA NSSA External LSA\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729823624411-2bc6ff8e-a565-4ddc-b641-e6f34501a7b2.png)\n\n+ 在NSSA(非完全存根区域)not-so-stubby area中ASBR针对外部网络产生类似于LSA5的LSA类型7\n+ LSA类型7只能在NSSA区域中洪泛，到达NSSA区域ABR后，NSSAABR将其转换成LSA类型5外部路由，传播到Area0，从而传播到整个OSPF路由域\n+ 生成路由缺省用ON2表示，也可指定为ON1\n\n# 其他\n## OSPF LSDB和路由表\n+ 查看路由表 `show ip route ospf`\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729823720364-54258c69-3cd1-4901-b51f-4a5a1878d36e.png)\n\n+ O  > O IA > O E1 > O E2\n\n## 特殊区域的配置nssa\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730100982306-4a28f112-d02a-4537-be77-83245f365f85.png)\n\n+ R1的配置\n\n```plain\nrouter ospf 1\nnetwork 192.168.12.0 0.0.0.255 area 1\narea 1 nssa\n```\n\n+ R2的配置\n\n```plain\nrouter ospf 1\nnetwork 192.168.12.0 0.0.0.255 area 1\nnetwork 192.168.23.0 0.0.0.255 area 0\narea 1 nssa \narea 1 nssa default-information-orginate #设置默认区域\n```\n\n## 特殊区域的配置 特殊区域在工程中的运用\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730101580835-773919f9-0729-4bd0-87b3-657e709babd1.png)\n\n+ 区域划分（含特殊区域）\n+ 路由汇总\n+ 默认路由传递\n+ Passive-interface\n\n## OSPF高级功能配置及验证\n+ Passive-interface\n    - ![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730103668216-946f3d0c-b38a-44c0-b683-614f039a47ee.png)\n\n```plain\nrouter ospf 1\nnetwork 192.168.1.0 0.0.0.255 area 0\nnetwork 192.168.12.0 0.0.0.255 area 0\npassive-interface fa 0/0\n```\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730104286308-472055dd-f8c1-43d5-882d-bbf2abc09ea6.png)\n\n```plain\nrouter ospf 1 \nnetwork 192.168.1.0 0.0.0.255 area 0\nnetwork 192.168.2.0 0.0.0.255 area 0\nnetwork 192.168.3.0 0.0.0.255 area 0\nnetwork 192.168.12.0 0.0.0.255 area 0\npassive-interface default\nno passive-interface fa 2/0\n```\n\n+ 注入默认路由\n    - ![](https://cdn.nlark.com/yuque/0/2024/jpeg/44908083/1730104513770-3af86fb7-7636-46e3-bd19-cc3e78dbdf41.jpeg)\n\n```plain\nrouter ospf\nnetwork 192.168.1.0 0.0.0.255 area 0\nnetwork 192.168.2.0 0.0.0.255 area 0 \nnetwork 192.168.3.0 0.0.0.255 area 0\ndefault-information originate\n```\n\n+ 自动汇总\n    - ![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730105593346-f49940e9-7c5d-4a2a-a6f5-a4838f33aa88.png)\n\n```plain\nrouter ospf 1\nsummary-address 10.1.0.0 255.255.0.0\n```\n\n    - ![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730113712965-2913d333-5783-4fa0-b276-eb37021add99.png)\n\n```plain\nrouter ospf 1\narea 2 range 172.16.0.0 255.255.0.0 cost ?\n```\n\n+ Virtual-link\n    - ![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730114278625-137e8159-3d3f-440f-a631-622f2624109a.png)\n\n```plain\nrouter ospf 1\narea area-id virtual-link router-id [authentication[message-digest | null]] [hello-interval seconds] [retransmit-interval seconds] [transmit-delay seconds] [dead-interval seconds] [fauthentication-key key] | [message-digest-key key-id md5 key]\n```\n\n## OSPF身份验证\n+ Null\n+ 简单密码身份验证\n+ MD5身份验证\n+ 接口认证\n+ 区域认证\n\n### 明文\n接口认证\n\n```plain\nRouter(config-if)#ip ospf authentication-key password\nRouter(config-if)#ip ospf authentication\n```\n\n区域认证\n\n```plain\nRouter(config-if)#ip ospf authentication-key password\nRouter(config-router)#area area-id authentication\n```\n\n### 密文\n接口认证\n\n```plain\nRouter(config-if)#ip ospf message-digest-key key-id md5 key\nRouter(config-if)#lp ospf authentication message-digest\n```\n\n区域认证\n\n```plain\nRouter(config-if)#ip ospf message-digest-key key-id md5 key\nRouter(config-router)#area 0 authentication messae-digest\n```","tags":["网络","CCNP"],"categories":["思科"]},{"title":"路由和路径","slug":"CCNP/CCNP路由 路由和路径","url":"/CCNP/CCNP路由 路由和路径/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 路由部分\n## 网络中使用多种IP路由协议\n需要使用多种IP路由协议的原因-多厂商的路由环境\n\n+ 网络合并(同一协议或是不同协议)\n+ 从旧的路由协议过渡到新的路由协议\n+ 路由策略的需要(可靠性、冗余性、分流模型等)\n\n路由重分发(多个重分发点，双向重分发)\n\n## 路由重发布\n### 概念\n路由重分发是指连接到不同路由域(自治系统)的边界路由器在他们之间交换和通告路由选择信息的能力。\n\n+ 从一种协议到另一种协议\n+ 同一种协议的多个实例\n\n注意\n\n+ 重分发总是向外的，执行重分发的路由器不会修改其路由表\n+ 路由必须要位于路由表中才能被重分发\n\n### 路由重发布\n+ 重发布要考虑的因素\n    - 路由回馈\n    - 路由信息不兼容（度量值信息不一致）\n    - 收敛时间不一致（不同路由协议的收敛速度不同）\n+ 如果选择最佳路由\n    - 管理距离\n    - 度量值\n\n### 路由回馈\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730252795715-71f9fcc0-544c-41e7-94a1-cdde5265b108.png)\n\n-\n\n+ 度量值--种子度量值\n+ 路由器通告与其接口直接相连的链路时，使用的初始度量值叫做种子度量值(也叫做默认度量值)，是根据接口的特征得到的。\n+ 种子度量值或默认度量值是在重分发配置期间定义的，并在自治系统内部正常递增，除了OSPF E2路由。\n+ 可使用命令default-metric或是redistribute中使用metric来指定种子度量值\n\n### 度量值——默认种子度量值\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730253536563-710553ac-ca47-4ce5-9027-a64118280c8e.png)\n\n### 单点重分发\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730256948062-64555df9-3f06-41ec-b0c2-9c14cd5cc025.png)\n\n单向重分发\n\n双向重分发\n\n### 多点单向重发布\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730257151571-18b8b2e8-3c79-40ea-b97c-d622e5dc20b8.png)\n\n### 多点双向重发布\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730257180586-f3f245e3-f240-4044-b59e-b2154fde1431.png)\n\n# Passive-interface\n+ RIP/IGRP——在指定接口不向外发送路由更新，但是接收路由更新\n+ EIGRP——在指定接口不向外发送Hello消息，而且通过这个接口不与其他路由器建立邻接关系，不发送其它EIGRP的数据流\n+ OSPF——在指定接口不向外发送Hello消息，而且通过这 个接口不与其他路由器建立邻接关系，不发送和接收路由信息。(有些IOS版本中OSPF在被动接口上发送Helo和DBD分组，但是不发送LSU。)\n\n## Tips\n+ 汇聚交换机上所有的三层接口都Network进相应的Area\n+ 汇聚交换机将向所有VLAN接口发送HELLO报文，尝试建立邻居关系，而底层的用户也会收到其并不需要的HELLO包\n\n## Passive-interface与单播更新\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730339033871-1958274b-9355-4326-a286-f9c3e31efd0e.png)\n\n配置RIP单播更新\n\n```plain\nRouter(config)# router rip\nRouter(config-router)# passive-interface int-type int-num\nRouter(config-router)# neighbor 192.168.123.3\n```\n\n## 常见路由协议管理距离\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730339568655-3eb7af04-e1a6-498c-85a3-f72f55fcd42a.png)\n\n# Route-map\n## 特点\n+ 使用的match命令匹配特定的分组或路由，set修改该分组或路由的相关属性\n+ Route-map中的语句相当于访问列表中的各行\n+ Route-map默认为permit，默认序列号为10，序列号不会自动递增，需要指定序列号\n+ 末尾隐含deny any\n+ 单挑match语句包括多个条件时，使用逻辑or运算；多条match语句时，使用逻辑and运算\n\n\n\n## 配置\n```plain\nmatch ip address 匹配访问列表或前缀列表\nmatch length 根据分组的第三层长度进行匹配\nmatch interface 匹配下一跳出接口为指定接口之一的路由\nmatch ip next-hop 匹配下一跳地址为特定访问列表中被允许的那些路由\nmatch metric 匹配具有指定度量值的路由\nmatch route-type 匹配指定类型的路由\nmatch community 匹配BGP共同体\nmatch tag 根据路由的标记进行匹配\n```\n\n# distribute-list\n## distribute-list 可根据下列因素过滤更新\n+ 入站接口\n+ 出站接口\n+ 从另一种路由协议重分发\n\n## 对于距离矢量路由协议\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730765382208-5939d7f3-0224-48a4-8bd2-4b38e06c0c22.png)\n\n## 对于链路状态路由协议\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730765432018-af56c92b-2a62-4a66-8430-79f752fc4a02.png)\n\n## 配置\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730768260182-2e14961d-ad68-4651-ae82-e9eebcc05966.png)\n\n```plain\nR2(config)# access-list 1 permit 192.168.1.0\nR2(config)# access-list 1 permit 192.168.2.0\nR2(config)# router rip\nR2(config-router)# distribute-list 1 out fa 1/0\n```\n\n# prefix-list\n## 背景\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730768421821-4f542729-31cd-484e-bd5c-0c7a22b12463.png)\n\n+ 外部路由172.16.32.0-39.0/24，以及汇总路由32.0/21被R1引入OSPF现在需在注入过程中，仅将汇总路由32.0/21过滤，所有明细放行，使用ACL匹配路由，该如何写?\n\n`R1(config)# access-list 1 deny 172.16.32.0\t#如果加上反掩码呢`\n\n`R1(config)# access-ist 1 permit any`\n\n## 前缀列表\n+ 前缀列表的可控性比访问列表高得多，支持增量修改，更为灵活\n+ 判断路由前缀与前缀列表中的前缀是否匹配\n+ 前缀列表包含序列号，从最小的开始匹配，默认序列为5，以5增加\n+ 如果前缀不与前缀列表中的任何条目匹配，将被拒绝\n\n## 配置\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730771586431-d5907351-8a3b-4875-bb63-9a586ef96637.png)\n\n`router(config)# **ip prefix-list** {list-name [**seq** number] {**deny | permit**} _network/length_ [**ge** _ge-value_] [**le** _le-value_]`\n\n输入条件：length < ge-value < le-value <= 32\n\n### 配置示例\n+ 匹配某条特定路由：192.168.1.0/24\n    - `ip prefix-list pxlist 192.168.1.0/24`\n+ 匹配默认路由：\n    - `ip prefix-list pxlist permit 0.0.0.0/0`\n+ 匹配所有主机路由：\n    - `ip prefix-list pxlist permit 0.0.0.0/0 ge 32`\n\n# 路径控制\n网络实现冗余，还需要考虑以下问题\n\n+ 弹性：实现链路的主动切换同时备用链路可用于负载均衡\n+ 可用性：从主链路切换到备用链路的时间\n+ 自适应：主链路拥塞时也可以使用冗余路径\n+ 性能：提高带宽的使用率\n\n## 路径控制工具\n+ 妥善的编制方案：VLSM和CIDR\n+ 重分发和路由协议的特征\n+ passive-interface\n+ distribute-list\n+ prefix-list\n+ AD的把控\n+ route-map\n+ 路由标记\n+ offset-list\n+ 路由标记\n+ 思科IOS IP SLAs\n+ PBR\n\n## offset-list的作用\n+ 用于在入站或出站时增大通过EIGRP或RIP获悉的路由度量值\n\n`router(config-router)# offset-list {access-list-number| name} {in|out} offset [interface-type interface-number]`\n\n## offset-list的配置\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730773350466-5d587359-93a3-41f8-ae95-2a94868aecb4.png)\n\n```plain\naccess-list 1 permit 10.1.1.0\nrouter rip\noffset-list 1 out 2 serial 0/0\n```\n\n# PBR策略路由\n## PBR\n+ 基于策略的路由比传统路由能力更强，使用更灵活，它使网络管理者不仅能够根据目的地址而且能够根据协议类型、报文大小、应用或IP源地址来选择转发路径。策略可以定义为通过多路由器的负载平衡或根据总流量在各线上进行报文转发的服务质量来定义策略路由。\n+ 策略路由主要对经过路由器的数据流进行分流和过滤以及感兴趣数据流匹配\n\n## 传统路由VS策略路由\n### 传统路由\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730775469785-37c97bda-3880-410d-bb4d-3def31028fb9.png)\n\n### 策略路由\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730775507016-b35087ed-da05-4558-aed6-aafa6e38c85e.png)\n\n## PBR对数据的处理\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730775547268-b569e647-03d1-41eb-b6f6-444d7cd1ac02.png)\n\n## 配置\n+ 设定分组的下一跳IP（必须为直连IP）\n    - `set ip next-hop ip-address [...ip-address]`\n+ 设定分组的出接口\n    - `set interface type number [...type number]`\n\n### 场景1\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1730788273052-453973f9-cb0f-4d85-a1a5-2ed89d2b898b.png)\n\n+ 当网络正常时，PC访问外网数据走ISP1\n+ 当ISP1宕机时(GW感知到)，数据切换至ISP2\n+ 当ISP1容机时(GW无感知)，数据仍然走ISP1\n\n```plain\naccess-list 1 permit any\nroute-map PBR permit 10\nmatch ip address 1\nset ip next-hop 10.1.1.2 10.2.2.2\n```","tags":["网络","CCNP"],"categories":["思科"]},{"title":"路由选择原理","slug":"CCNP/CCNP路由 路由选择原理","url":"/CCNP/CCNP路由 路由选择原理/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## 路由选择原理\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729556630961-3d015d9f-3ae5-4c13-80fd-44414035a0ed.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729556639379-05e1075f-512e-4609-9792-e21fcde11d20.png)\n\n+ 路由信息来源\n+ 管理距离（AD值）\n+ 有类及无类路由查找\n+ 最长匹配原则\n+ 递归查询\n\n## 路由信息的来源\n+ 直连路由\n    - 接口配置IP，该接口的物理层和数据链路层UP\n    - 通过接口感知到的直连网络\n+ 静态路由\n    - 使用静态路由命令手工配置的路由\n+ 动态路由\n    - 通过动态路由协议学习\n    - 常见路由协议：RIP、OSPF、IS-IS、EIGRP、BGP\n\n## 管理距离（AD值）\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729557010043-46b3011e-6b27-48c8-9f06-c8b053d29574.png)\n\n## 有类及无类路由查找\n+ **无类路由查找**：路由器不会注意目的地址的类别，它会在目的地址和所有己知的路由之间逐位(bit by bit)执行最长匹配\n+ **有类路由查找**（no ip classless）：路由器收到一个数据包时，先查找目的地址所属主类网络，如果路由表中存在该主类网络的路由，则继续找子网，如果没有子网路由则丢弃数据包（即使本地有默认路由，也同样丢弃），如果有则正常转发;而如果本地路由表里没有该目的地址所属主类网络的路由，则看是否有默认路由，如果有，则转发，如果没有，则丢弃。\n\n## 最长匹配原则\n+ 主机地址（主机路径）\n+ 子网\n+ 一组子网（汇总路由）\n+ 主网号\n+ 超网（CIDR）\n+ 缺省地址\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729557446146-ebde076d-6d67-4744-b602-f3af3c202b25.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729558543372-6f0ce184-42bb-46e0-b9de-9f3f89514936.png)\n\n## 路由表的查找\n+ 不同的前缀，在路由表中属于不同的路由\n+ 相同的前缀，先比AD，后比metric\n+ 匹配，转发；不匹配，丢弃\n+ 路由器的行为是逐跳的，到目标网络的沿路径每个路由器都必须有关于目标的路由\n+ 数据是双向的，考虑流量的时候，要关注流量的往返\n\n## 路由表的递归查询\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729558770399-0145f42d-3b34-47d4-8415-b50b98eeaf42.png)\n\n## 协议分类\n+ 有类路由选择协议：RIPv1、IGRP\n    - ![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729565436293-0236dbc1-1d8c-4bd1-a0c3-df14ecd55870.png)\n+ 无类路由选择协议：OSPF、EIGRP、ISIS、BGP等\n+ 根本区别在于：更新消息中是否含有网络掩码\n\n## 浮动的静态路由\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729566091093-7800b4ae-dc55-4da4-b7c4-0c96f54807fc.png)\n\n+ 通过修改缺省的管理具体实现路由冗余\n\n### 静态路由汇总\n+ 改变子网掩码，通过汇总路由匹配明细，从而简化路由表\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729578966077-6f787972-1326-45fc-b640-0408a427dc5e.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729580677499-e739e627-2e8e-4eb7-9a22-19a2caf8e673.png)\n\n## 基础配置\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729565692870-f2f68474-85ac-4f44-b6ff-8ff47e689483.png)\n\n`Ip route 192.168.10.0 255.255.255.0 192.168.1.1`\n\n使用指向下一跳的静态路由\n\n`Ip route 192.168.10.0 255.255.255.0 fa 0/0`\n\n使用指向出接口的静态路由该条目将作为直连网络输入到路由表中如果出接口为广播型接口，可能会给接口下的节点造成额外的负担(ARP)\n\n```plain\nRouter# show ip route\nGateway of last resort is not set \n9.0.0.0/2 4 is subnetted,2 subnets\nC\t\t9.9.12.0 is directly connected, FastEthernet0/0\nS\t\t9.9.23.0 is directly connected, FastEthernet0/0\n```","tags":["网络","CCNP"],"categories":["思科"]},{"title":"ACL基础","slug":"CCNA/ACL基础","url":"/CCNA/ACL基础/","content":"\n## 简介\n+ 访问控制列表ACL（Access Control List）是由一条或多条规则组成的集合。所谓规则，是指描述报文匹配条件的判断语句，这些条件可以是报文的源地址、目的地址、端口号等。\n+ ACL本质上是一种报文过滤器，规则是过滤器的滤芯。设备基于这些规则进行报文匹配，可以过滤出特定的报文，并根据应用ACL的业务模块的处理策略来允许或阻止该报文通过。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/ACL-image2be1cd78ae7434f9.png)\n\n## 为什么要用ACL\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/ACL-image-1ff33b348f14d7bdf.png)\n\n+ ACL的两大主要功能\n+ 流量控制\n+ 匹配感兴趣流量\n\n## ACL的类型\n### 标准访问控制列表\n+ 检查源地址\n+ 通常允许或拒绝整个协议套件\n\n### 扩展访问控制列表\n+ 检查源地址和目标地址\n+ 通常允许或拒绝特定的协议和应用\n\n### 用于识别标准ACL和扩展ACL的两种方法\n+ 编号ACL使用一个数字来识别\n+ 命名ACL使用描述性名称或数字来标识\n\n### 标准访问控制列表\n+ 只能根据源地址做过滤\n+ 针对整个协议采取相关动作（允许或禁止）\n\n![](https://img.picgo.net/2024/11/19/image-2575da0debcc560ea.md.png)\n\n## 扩展访问控制列表\n+ 能根据源、目的地地址、端口号等等进行过滤\n+ 能允许或拒绝特定的协议\n+ ![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/ACL-image-2575da0debcc560ea.png)\n\n## ACL的标示\n### IPv4 ACL\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/ACL-image-4ac2cc35cbdfcb46c.png)\n\n## 出站及入站 \n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/ACL-image-5e1632473fddc86b8.png)\n\n### 入方向的ACL操作\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/ACL-image-6d383172498686b6a.png)\n\n### 出方向的ACL操作\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/ACL-image-7042aa1fa1369eb38.png)\n\n## 通配符\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/ACL-image-8a0301b67a2235fc3.png)\n\n+ 0 表示严格匹配\n+ 1 表示无所谓\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/ACL-image-93289ca2dec660a11.png)\n\n### 通配符缩写\n192.168.1.1 0.0.0.0\t\t\t= host 192.168.1.1\n\n+ 精确匹配192.16.1.1这个IP\n\n---\n\n0.0.0.0 255.255.255.255 \t\t= any\n\n+ 匹配所有ip\n\n## 基础配置\n```plain\nRouter(config)# access-list access-list-number {permit|deny} source [wildcard mask]\nRouter(config-if)# ip access-group access-list-number {in|out}\n```\n\n+ 编号选择1-99\n+ 通配符若无，默认0.0.0.0\n+ `no access-list _access-list-number_`将会删除整个ACL列表\n+ 在接口中应用\n+ 应用时关联入或出站方向\n+ 默认出站\n+ `no ip access-group _access-list-number_`可移除接口上应用的访问列表\n\n```plain\nRouter(config)# access-list access-list-number {permit|deny} protocol source source-wildcard [operator port] destination destination-wildcard [operator port] [established] [log]\nRouter(config-if)# ip access-group access-list-number {in|out}\n```\n\n+ 在接口中应用\n+ 应用时关联入或出站方向","tags":["网络","CCNA"],"categories":["思科"]},{"title":"EIGRP基础","slug":"CCNA/EIGRP基础","url":"/CCNA/EIGRP基础/","content":"\n## 简介\nEIGRP是思科发明的一个私有路由协议，由IGRP发展而来，但是算法做了很大的改动。EIGRP和IGRP，RIP一样是一个采用D-V算法的动态路由协议，在收敛速度，占用网络带宽和系统资源等方面有了很大的改进，且有收敛快，无环路由计算，可以应用于大规模网络的优点。\n\n## 特点\n+ 高级距离矢量协议——具有距离矢量性和链路状态协议特征\n+ 无类路由协议——可划分子网、可聚合子网路由\n+ 支持VLSM与不连续子网\n+ 100%无环路——DUAL算法\n+ 快速收敛——路由条目用不更新，拥有备份路由\n+ 触发更新\n+ 低路由更新信息开销\n+ 配置简单\n+ 支持多种路由协议（IP、IPX、Appletalk、etc. ）\n\n## EIGRP的前身 IGRP\n懒得打字了，直接上图\n\n ![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/EIGRP%20(4).png)\n\n\n\n## 三张表\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/EIGRP%20(2).png)\n\n+ IP EIGRP Neighbor Table（EIGRP邻居表）\n+ IP EIGRP Topology Table（EIGRP技术表）\n+ The IP Routing Table（路由表）\n\n## EIGRP数据包\n### Hello分组\n\n以224.0.0.10发送，无需确认hello包\n\nEIGRP依靠分组来发现，验证和重新发现邻居router\n\n以固定时间发送hello包，改时间间隔与接口带宽有关\n\nLAN上默认为5S\n\n### 更新\n\nEIGRP协议的这些更新数据包只在必要的时候传递必要的信息,而且仅仅传递给需要路由信息的路由器。当只有某一指定的路由器需要路由更新时,更新数据包就是单播发送的;当有多台路由器需要路由更新时,更新数据包就是组播发送的以可靠的方式发送，需要确认\n\n### 查询\n\n当某条路由丢失，向邻居查询关于路由信息，通常靠组播方式发送，有时也用单播重传;可靠地发送\n\n### 应答\n\n响应查询分组，单播;可靠方式发送\n\n### 确认（ACK）\n\n以单播发送的HELLO包(不包含数据)，包含确认号。用来确认更新、查询和应答。ACK本身不需确认。\n\n## EIGRP的Metric\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/EIGRP%20(1).png)\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/EIGRP%20(3).png)\n\n+ 默认K1 = 1，K2 = 0，K3 = 1，K4 = 0，K5 = 0\n+ 延迟取值沿路所有数据出接口（或路由入口）延迟的累加\n    - DLY=延迟（US）/10 x 256\n+ 带宽取值沿路所有数据出接口（或路由入口）带宽的最低值\n    - BW=[10000000 / 带宽（Kbps）] x 256\n+ EIGRP路由metric默认为 延迟+带宽\n\n## DUAL算法\n+ Diffusing Update Algorithm 用于计算最佳无环路径和备用路径\n\n### 特点\n+ 无环拓扑\n+ 可立即使用的无环备用路径\n+ 快速收敛\n+ 低带宽利用率（通过限定更新实现）\n\n### 几个术语\n+ 后继路由器\n+ 可行距离（FD）\n+ 可行后继路由器（FS）\n+ 通告距离（AD）\n+ 可行距离，或称可行性条件（FC）\n\n### 后继与可行可行距离\n+ 后继路由器（Successors）：被实际选中作为到达一个目的地所使用的下一跳的路由器。该条路由保存在路由表中\n+ 可行距离（Feasible distance）：计算出通向目的网络的最小度量\n\n### 可行后继路由器及通告距离\n+ 可行后继（Feasible Successor）是一条备份路由，只保存在拓扑表中。要成为可行后继，下一跳路由器前往某个特定网络的AD必须比当前后继的FD小\n+ 通告距离（Advertise Distance）即为EIGRP邻居通向相同目的网络的他自己的可行距离\n\n`符合了可行性条件（Feasible Condition）是指当邻居通向一个网络的通告距离（AD）比本地路由器通向同一个目的网络的可行距离短时。`\n\n## EIGRP其他特性\n### 不等价负载均衡\n+ 最多支持等价的路径的条数不同的IOS版本不同进行负载（默认是4条）\n+ 可以通过maximum-paths修改\n\n\n\n## 基础配置\n```plain\nRouter(config)# router eigrp autonomous-system\nRouter(config-router)# network network-number [wildcard-mask]\n```","tags":["网络","CCNA"],"categories":["思科"]},{"title":"DOD（TCP/IP）","slug":"CCNA/DOD（TCP_IP）","url":"/CCNA/DOD（TCP_IP）/","content":"\n## 模型结构\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/DoD%20(11).png)\n\n+ 4层：应用层\n+ 3层：传输层\n+ 2层：网际层\n+ 1层：物理层\n\n## 各层级作用详解\n+ 4层： 与OSI模型中的应用层类似，为用户提供各种应用服务，如电子邮件、文件传输等</font>\n+  3层：与OSI模型中的传输层类似，负责端到端之间的通信，处理数据包的分段与重组，以及数据传输的可靠性和正确性</font>\n+  2层：在TCP/IP模型中相当于OSI模型的网络层，负责IP地址的分配和路由选择，实现不同网络之间的通信</font>\n+  1层：负责物理硬件设备间的通信，包括数据链路的操作、错误检测和纠正等功能</font>\n\n## 因特网层\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/DoD%20(8).png)\n\n网络层也叫Internet层\n\n+ 负责将分组报文从源端发送到目的端\n\n网络层作用\n\n+ 为网络中设备提供逻辑地址\n+ 负责数据包的寻径和转发\n\n### 因特网层协议\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/DoD%20(1).png)\n\n### 因特网层的工具\n+ Ping（ICMP）——测试ip与本机的连通性\n+ Traceroute/Tracert ——追踪数据包的每一跳\n\n### 因特网层ip报文\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/DoD%20(9).png)\n\n+ 简称TTL，作用是放置一个数据包在网络中无休无止的进行传输\n\n### ARP\nARP协议具有两种功能\n\n+ 将IPV4地址解析为MAC地址\n+ 维护映射的缓存\n\n### ARP报文详解\n+ IP与MAC的关联需要ARP配合实现\n+ 思科中使用` show arp `查看arp表\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/DoD%20(2).png)\n\n## 应用层\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/DoD%20(7).png)\n\n### 常见应用的端口\n+ HTTP 80端口\n+ HTTPS 443端口\n+ Telnet 23端口\n+ FTP 20、21端口\n+ SMTP 25端口\n+ POP3 110端口\n+ TFTP 69端口\n\n## TCP/IP协议簇简解\n+ 传输控制协议/IRI特网协议（TCP/IP）组是由关国国防部（DoD）所创建的，主要用来确保数据的完整性及毁灭战争中维持通讯\n+ 是由一组不同功能的协议组合在一起构成的协议簇、\n+ 利用一组协议完成OSI所实现的功能\n\n### 各层级代表协议\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/DoD%20(3).png)\n\n+ 4层：HTTP（Hypertext Transfer Protocol）、FTP（File Transfer Protocol）、SMTP（Simple Mail Transfer Protocol）\n+ 3层：TCP（Transmission Control Protocol）、UDP（User Datagram Protocol）\n+ 2层：IP（Internet Protocol）、ICMP（Internet Control Message Protocol）、ARP（Address Resolution Protocol）\n+ 1层：：Ethernet、PPP（Point-to-Point Protocol）、ARPANET\n\n## TCP & UDP\n+ TCP（传输控制协议） 属于面向连接的网络协议\n+ UDP（用户报文协议） 属于无连接的网络协议\n\n### TCP到UDP\n传统控制协议（TCP）\n\n+ 面向连接\n+ 可靠传输\n+ 控流\n\n用户数据报协议（UDP）\n\n+ 无连接\n+ 不可靠传输\n+ 尽力传输\n\n+ 使用TCP的应用：Web浏览器；电子邮件；文件传输程序\n+ 使用UDP的应用：域名系统（DNS）；视频流；IP语言（VoIP）\n+ 源端口随机分配，目标端口使用知名端口\n+ 应用客户端使用的源端口号一般为系统中未使用的且大于1023\n+ 目的端口号为服务器端应用服务的进程。如telnet为23\n\n### TCP包结构\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/DoD%20(4).png)\n\n### TCP的三次握手\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/DoD%20(10).png)\n\n+ 1.设备1发送 SYN 包\n+ 2.设备2收到了SYN包后再次发送回设备1带有ACK的包\n+ 3.设备1收到SYN包后验证成功\n\n### UDP包结构\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/DoD%20(5).png)","tags":["网络","CCNA"],"categories":["思科"]},{"title":"NAT基础","slug":"CCNA/NAT基础","url":"/CCNA/NAT基础/","content":"\n## 简介\n即Network Address Translation，网络地址转换。于1994年被提出。当在专业网内部的一些主机本来已经分配到了本地IP地址（即在本专用网内使用的专用地址），但现在又想和因特网上的主机通信（不需要加密的）的时候，就可以使用NAT技术。\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/NAT%20(4).png)\n\n## 为什么需要NAT\n+ 主要为了解决IPv4地址紧缺的问题，通过将一个公网IP地址和多个私网IP相对应，从而解决IP地址不够用的情况，但是这种技术只是起到了缓解的作用，真正的方法还是得使用IPv6来解决。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/NAT%20(5).pngg)\n\n## NAT技术的优缺点\n### 优点\n+ 节省合法的公有的IP地址\n+ 地址重叠时，提供一个较为完善的解决方法\n+ 网络发生变化时，避免重新编址\n\n### 缺点\n+ 无法进行端对端的ip追踪（破坏了端对端通讯的平等性）\n+ 很多应用层无法识别（例如FTP协议）\n\n## NAT的三种类型\n### 静态NAT\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/NAT%20(1).png)\n\n+ 将内部本地地址与内部全局地址进行一对一的明确转换。这种方法主要用于内部网络中有对外提供服务的服务器，如WEB、MAIL服务器时。该方法的缺点是需要独占宝贵的合法IP地址。即如果某个合法IP地址已经被NAT静态地址转换定义，即使该地址当前没有被使用，也不能用作其他的地址转换。\n\n### 动态NAT\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/NAT%20(2).png)\n\n+ 动态地址转换也是将内部本地地址与内部全局地址进行一对一的转换。但是，是从内部全局地址池中动态地选择一个未使用的地址对内部本地地址进行转换。该地址是由未被使用的地址组成的地址池中在定义时排在最前面的一个。当数据传输完毕后，路由器将把使用完的内部全局地址放回到地址池中，以供其它内部本地地址进行转换。但是在该地址被使用时，不能用该地址再进行一次转换。\n\n### 端口复用PAT\n+ 复用地址转换也称为端口地址转换(PortAddressTranslation，PAT)，首先是一种动态地址转换。路由器将通过记录地址、应用程序端口等唯一标识一个转换。通过这种转换，可以使多个内部本地地址同时与同一个内部全局地址进行转换并对外部网络进行访问。对于只申请到少量IP地址甚至只有一个合法IP地址，却经常有很多用户同时要求上网的情况，这种转换方式非常有用\n+ 理想状况下，一个单一的IP地址可以使用的端口数为4000个\n\n## 私有空间地址\n+ A类：10.0.0.0 - 10.255.255.255\n+ B类：172.16.0.0 - 172.31.255.255\n+ C类：192.168.0.0 - 192.168.255.255\n\n## NAT术语\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/NAT%20(3).png)\n\n+ 内部本地——转换之前内部源地址的名字\n+ 外部本地——转换之前目标主机的名字\n+ 内部全局——转换之后内部主机的名字\n+ 外部全局——转换之后外部目标主机名字\n\n## 基础配置\n```plain\nRouter(config)# ip nat inside source static local-ip global-ip\nRouter(config)# ip nat inside\nRouter(config)# ip nat outside\nRouter# show ip nat translations #查看配置情况\n```\n\n```plain\nRouter(config)# ip nat pool name start-ip end-ip {netmask netmask | prefix-length prefix-length}\nRouter(config)# access-list access-list-number permit source [source-wildcard]\nRouter(config)# ip nat inside source list access-list-number pool name\nRouter# show ip nat translations #查看配置情况\n```\n\n```plain\nRouter(conflg)# access-list access-list-number permit source source-wildcard\nRouter(config)# ip nat inside source list access-list-number interface interface overload\nRouter# show ip nat translations #查看配置情况\n```","tags":["网络","CCNA"],"categories":["思科"]},{"title":"OSI基础","slug":"CCNA/OSI基础","url":"/CCNA/OSI基础/","content":"\n---\n\n## 模型结构\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/image512f7952defa3ef1.png)\n\n---\n\n## 各层级作用详解\n+ **7层**\t为用户提供各种应用服务，如文件传输、电子邮件等，是用户直接接触的层级\n+ **6层**\t负责数据的格式化、加密和压缩，确保数据的可读性，以及在不同系统间的互操作性\n+ **5层**\t管理用户会话的建立、维护和结束，确保数据传输的顺序和完整性\n+ **4层**\t负责端到端之间的通信，处理数据包的分段与重组，以及数据包的传输可靠性和正确性\n+ **3层**\t根据数据包的网络地址进行路由选择，实现不同网络之间的通信\n+ **2层**\t 负责将比特流转化为具有意义的数据帧，同时进行物理地址寻址、错误检测和纠正等\n+ **1层**\t负责传输比特流，主要关注硬件设备间如何传输数据\n\n---\n\n## 各层级代表协议\n+ **7层**\tHTTP（Hypertext Transfer Protocol）、FTP（File Transfer Protocol）、SMTP（Simple Mail Transfer Protocol）\n+ **6层**\tSSL/TLS（Secure Sockets Layer/Transport Layer Security）、JPEG、ASCII\n+ **5层**\tNetBIOS（Network Basic Input/Output System）、RPC（Remote Procedure Call）\n+ **4层**\tTCP（Transmission Control Protocol）、UDP（User Datagram Protocol）\n+ **3层**\tIP（Internet Protocol）、ICMP（Internet Control Message Protocol）、ARP（Address Resolution Protocol）\n+ **2层**\tPPP（Point-to-Point Protocol）、HDLC（High-Level Data Link Control）、MAC（Media Access Control）\n+ **1层**\tEthernet、Token Ring、RS-232","tags":["网络","CCNA"],"categories":["思科"]},{"title":"OSPF基础","slug":"CCNA/OSPF基础","url":"/CCNA/OSPF基础/","content":"\n## 简介\n1.OSPF是一种链路状态路由协议，无路由循环（全局拓扑），RFC 2328\n\n2.OSPF采用开放的协议，并非EIGRP一类仅思科可用的专有协议，这意味着OSPF可以在所有支持的路由器上运行\n\n3.管理性距离：110\n\n### 采用SPF算法计算达到目的地的最短路径\n+ 什么是链路（link）？= 路由器的接口\n+ 什么叫状态（State）？= 是指接口以及其与邻居路由器之间的关系\n\n## 基本运行步骤\n1.建立邻接关系（Establish router adjacencies）\n\n2.必要的时候进行DR的选举（Elect the DR / BDR）\n\n3.发现路由（Discover routes）\n\n4.选择合适的路由器（Select appropriate routes）\n\n5.维护路由信息（Maintain routing information）\n\n## 网络类型\n### DMA\n DMA 广播型多路访问</span></summary><p id=\"ub2915ced\" class=\"ne-p\"><img src=\"https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/OSPF%20(9).png\" width=\"434\" id=\"uc4008158\" class=\"ne-image\"></p></details>\n### Point-To-Point\n Point-to-Point 点对点\n <img src=\"https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/OSPF%20(6).png\" width=\"413\" id=\"u0f335e14\" class=\"ne-image\"></p></details>\n### NBMA\n NBMA 非广播型多路访问</span></summary><p id=\"u0783e427\" class=\"ne-p\"><img src=\"https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/OSPF%20(7).png\" width=\"432\" id=\"u22677836\" class=\"ne-image\"></p></details>\n\n\n### 报文类型\n+ **Hello** 建立和维护OSPF邻居关系\n+ **DBD** 链路状态数据库描述信息（描述LSDB中LSA头部信息）\n+ **LSR** 链路状态请求，向OSPF邻居请求链路状态信息\n+ **LSU** 链路状态更新（包含一条或多条LSA）\n+ **LSAck** 对LSU中的LSA进行确认\n\n## OSPF三张表类型\n### 邻居表（neighbor table）\n+ OSPF用邻居机制来发现和维持路由的存在，邻居表储存了双向通信的邻居关系OSPF路由器列表信息。\n\n### 拓扑表（topology table）\n+ OSPF用LSA（link state Advertisement 链路状态通告）来描述网络拓扑信息，然后OSPF路由器用拓扑数据库来存储网络的这些LSA。\n\n### OSPF路由表（routing table）\n+ 对链路状态数据库进行SPF（Dijkstra）计算，而得出OSPF路由表。\n\n## RouterID\n+ 用于标识OSPF路由器的ID，全网唯一性；可手动配置，也可以动态选举（有Loopback接口时，选择最高的Loopback IP地址；否则，选择最高活跃物理接口的IP地址）。\n\n> Router ID演示图![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/OSPF%20(5).png)\n>\n\n## DR和BDR\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/OSPF%20(12).png)\n\n+ 为减小多路访问网络中的OSPF流量，OSPF会选举一个指定路由器（DR）和一个备用指定路由器（BDR）。\n+ 选举规则：最高接口优先级被选作DR，如果优先级相等（默认为1），具有最高的路由器ID（Router-ID）的路由器被选举成DR，而且DR具有非抢占性\n+ 指定路由器（DR）：DR负责使用该变化信息更新其他所有OSPF路由器（DRouter）\n+ 备用指定路由器（BDR）：BDR会监控DR的状态，并在当前DR发生故障时接替其角色\n\n## 建立邻接关系-Hello包\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/OSPF%20(10).png)\n\n+ Hello包用来发现OSPF邻居并建立相邻关系，通过组播地址：224.0.0.5 发送给 ALLSPFRouters\n+ 通告两台路由器建立相邻关系所必须统一的参数\n+ 在以太网和帧中继网络等多路访问网络中选举指定路由器（DR）和备用指定路由器（BDR）\n\n## OSPF metric\n+ 每个路由器都把自己当作根，并且给予累积成本（Cost值）来计算到达目的地的最短路径。\n+ Cost = 参考带宽（10^8）/接口带宽（b/s）\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/OSPF%20(11).png)\n\n## LSA\n### LSU\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/OSPF%20(1).png)\n\n+ 路由器收到包含变化后的LSA的LSU后，更新自己的链路状态数据库，过一段时间（SPF延迟），对更新的链路状态数据库执行SPF算法，必要时更新路由表。\n\n### LSA的泛洪-示例1\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/OSPF%20(2).png)\n\n+ 路由器R3用224.0.0.6通知DR路由器及BDR的路由器\n+ DR、BDR监听224.0.0.6这一组播地址\n\n### LSA的泛洪-示例2\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/OSPF%20(3).png)\n\n+ DR利用组播地址224.0.0.5通知其它路由器\n+ 所有的OSPF路由器监听224.0.0.5这一组播地址\n\n## OSPF区域\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/OSPF%20(8).png)\n\n+ 在区域边界可以做路由汇总，减小了路由表\n+ 减少了LSA泛洪的范围，有效的把拓扑变化控制在区域内，提高了网络的稳定性\n+ 拓扑的变化影响可以只限制涉及本区域\n+ 多区域提高了网络的扩展性，有利于组建大规模的网络\n\n## 配置实践\n### 基本配置\n```plain\nRouter(config)# router ospf process-id #开启OSPF进程，process-id为进程id\nRouter(config-router)# network address wildcard-mask area area-id #宣告特定网络到OSPF区域\n```\n\n#### 通配符掩码\n+ 通配符是一个用于决定哪些IP地址位该精准匹配（0代表精准匹配）那些地址为被忽略的32位数值，通常用于处理访问控制列表（ACL）、OSPF、EIGRP等路由协议的网络通告。\n\n##### - 掩码</h5>\n1位表示网络位；0位表示主机位。掩码用于区分IP地址中的网络及主机部分\n\n##### - 通配符</h5>\n1位表示无所谓；0位表示需要严格匹配。通配符用于决定一个IP中的哪些位应该匹配\n\n### 基本配置 单区域-实例</h3>\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/OSPF%20(4).png)\n\n```plain\nRouter(config)# router ospf 1\nRouter(config-if)# network 192.168.12.0 0.0.0.255 area 0\n```\n\n```plain\nRouter(config)# router ospf 1\nRouter(config-if)# network 192.168.12.0 0.0.0.255 area 0\nRouter(config-if)# network 192.168.23.0 0.0.0.255 area 0\n```\n\n```plain\nRouter(config)# router ospf 1\nRouter(config-if)# network 192.168.23.0 0.0.0.255 area 0\n```\n\n最后，使用` show ip ospf neighbor `命令，可以查看ospf配置是否成功配置生效。","tags":["网络","CCNA"],"categories":["思科"]},{"title":"RIP基础","slug":"CCNA/RIP基础","url":"/CCNA/RIP基础/","content":"\n## 简介\nRIP是一种内部网关协议（IGP），是一种动态路由选择协议，用于自治系统（AS）内的路由信息传递。\n\nRIP协议基于距离矢量算法（Distance Vector Algorithms），使用“跳数”（metric）来衡量到达目的地址的路由距离。\n\nRIP通过UDP报文进行路由进行路由信息交换，使用的端口为520.\n\nRIP包括v1和v2两个版本\n\n## RIP的版本比较\n**<font style=\"background-color:#D8DAD9;\">RIP V1 **\n有类路由协议\n不支持VLSM\n广播更新255.255.255.255\n\n**<font style=\"background-color:#D8DAD9;\">RIP V2 **\n无类路由协议\n支持VLSM\n组播更新224.0.0.9\n\n\n## 基础运行步骤（四个定时器）\n+ 开启RIP进程，宣告接口，开始接收报文，发送UDP报文\n+ 根据收到的RIP报文构建自己的路由表\n+ 每隔30S发送更新报文来更新维护路由表“更新定时器”\n+ 路由器为自己的每条路由表项启动180S的“老化定时器”。180s内如果收到了更新报文，则重置定时器\n+ 如果上面180S到期，则启动120S的“垃圾收集定时器”，同时将该路由表项度量值置为16\n+ 120S过后，路由器仍未收到相应路由表项的更新，则路由器删除该表项\n+ 当RIP设备收到对端cost为16的路由更新时，为防止路由震荡，启动“抑制定时器”，在这个定时器超时前，不再接受对端任何路由\n\n## 触发更新\n可以缩短网络收敛时间，一个路由表最多等待120S才能被删除（垃圾收集时间）；如果不存在触发更新，最多需要等待300S（老化时间+垃圾收集时间）\n\n## 水平分割\n+ RIP从某个接口学到的路由，不会从该接口再回发给邻居路由器。\n+ 作用减少带宽损耗，防止路由环路。也解决了“坏消息传播得慢”\n\n## 毒化逆转\n+ 一个接口学来的路由项，把度量值改为16再原路发回去，也可以避免环路发生，实践中使用比较少。\n\n## 抑制计时\n+ 一条路由信息无效之后，一段时间内这条路由都处于抑制状态，即在一定时间内不再接收关于同一目的地址的路由更新。\n+ 如果，路由器从一个网段上得知一条路径失效，然后，立即在另一个网段上得知这个路由有效。这个有效的信息往往是不正确的，抑制计时避免了这个问题，而且，当一条链路频繁起停时，抑制计时减少了路由的浮动，增加了网络的稳定性。\n\n## 报文类型\n> RIPV1 引用至华为文档\n>\n> ![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/RIP%20(2).png)\n>\n\n+ **命令字段**（Command）：该字段用于标识RIP报文的类型。取值为1表示为Request报文，取值为2表示Response报文。 \n+ **版本字段** （Version）：在RIP-1中，该字段取值为1。 \n+ **址族标识符** （Address family identifier）：该字段值为2表示IP协议，如果该报文为Request报文并且用于向直连路由设备请求整张路由表，则该字段值被设置为0，同时这个Request报文中包含且仅包含一个路由条目，该路由的目的网络地址为0.0.0.0，度量值为16。 \n+ **IP地址** （IP address）：路由的目的网络地址。 \n+ **度量值** （Metric）：该路由的度量值。 \n\n> RIP V2 引用至华为文档\n>\n> ![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/RIP%20(1).png)\n>\n\n+ **命令字段** （Command）：该字段用于标识RIP报文的类型。取值为1表示为Request报文，取值为2表示Response报文。 \n+ **版本字段** （Version）：在RIP-2中，该字段取值为2。 \n+ **地址族标识符** （Address Family Identifier）：与RIP-1类似。 \n+ **路由标记**（Route Tag）：用于为路由设置标记信息，可以在路由策略中根据Tag对路由进行灵活的控制。例如，当一条外部路由被引入RIP从而形成一条RIP路由时，RIP可以为该路由设置路由标记，当这条路由在整个RIP路由域传播时，路由标记不会丢失。 \n+ **IP地址** （IP Address）：路由的目的网络地址。 \n+ **网络掩码** （Subnet Mask）：用于存储路由条目的目的网络掩码，RIP-2进而支持可变长子网掩码（VLSM，Variable Length Subnet Mask），支持路由聚合和CIDR（Classless Inter-Domain Routing）。 \n+ **下一跳** （Next Hop）：RIP-2定义了该字段，避免路由设备在多路访问网络上可以表面次优路径现象，在广播网上可以选择到最优下一跳地址。 \n+ **度量值** （Metric）：该路由的度量值。 \n\n## 配置实践\n### 基础配置\n```plain\nRouter(config)# router rip\nRouter(config-if)# network address #宣告网段\nRouter(config-if)# version 2 #使用RIPv2版本的RIP协议\n```\n\n                                                                          \n   \n ","tags":["网络","CCNA"],"categories":["思科"]},{"title":"STP基础","slug":"CCNA/STP基础","url":"/CCNA/STP基础/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## 简介\nSTP（Spanning Tree Protocol）是一个用于局域网中消除环路的协议，它的标准是IEEE 802.1D。STP通过将部分冗余链路强制为阻塞状态，其他链路处于转发状态，将环形网络结构修剪成无环路的树形网络结构，可实现消除环路。当处于转发状态的链路不可用时，STP重新配置网络，并激活合适的备用链路状态，恢复恢复网络连通性。</font>\n\n## 为什么需要STP\n+ 在一个复杂的网络环境中，由于冗余备份的需要，网络设计者都倾向于在设备之间部署多条物理链路，其中一条作为主要链路，其他链路作为备份，偶然或必然中都会导致环路产生。环路会产生广播风暴，最终会导致整个网络资源被耗尽，网络瘫痪不可用。环路还会引起MAC地址表震荡导致MAC表项被破坏。\n+ STP技术可以有效解决环路问题，将彼此交互信息发现网络中的环路，将部分冗余链路强制为阻塞状态，其他链路处于转发状态。最终将环形网络结构修剪成无环型的树形网络结构，从而防止报文在环形网络中不断增生和无限循环，避免设备由于重复接收相同的报文造成处理能力下降。\n\n## STP的操作\n![1](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727313654113-f40a48de-3711-42bf-9e50-fc309acbbd5b.png \"1\")\n\n+ 每个广播域选择一个根桥\n+ 每个非根桥选择一个根端口\n![2](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727316127820-ee941b9c-37ba-487d-99ec-32cac777b13f.png \"2\")\n\n根端口：具有最低根路径的接口\n\n要考虑的因素：\n\n1.最低的根桥ID\n\n2.最低的根路径代价\n\n3.最低发送者桥ID\n\n4.最低端口ID\n\n+ 每个段选择一个指定端口\n+ 选择一个非指定端口\n\n\n\n### 每个广播域选择一个根桥\n![3](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727314331920-e4946ffd-1366-4585-b677-8ebf8399181c.png \"3\")\n\n### BPDU\n![4](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727314583701-36bf04b5-c74c-427e-a2b9-9b9d7cb5bf47.png \"4\")\n\n+ Root ID：由2字节优先级和6字节MAC组成\n+ Cost of Path：路径开销是从Switch到Root Bridge的方向叠加的\n+ Port ID：端口信息由1字节端口优先级和1字节端口ID组成\n+ Maximum Time：当一段时间未收到任何BPDU，生存期达到Max Age时，网球则认为该端口连接的链路发生故障。默认20秒\n+ Hello Time：发送BPDU的周期，默认为2秒\n+ Forward Delay：BPDU全网传输延迟，默认15秒\n\n### STP路径开销\n![5](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727314963144-5d6709e4-d43e-47f7-be99-968a0fb0dc75.png \"5\")\n\n+ 最短路径是cost累加，而cost是基于链路的速率的\n\n\n\n## 广播风暴\n![6](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727312487194-1733d1ec-81ba-467c-bea1-76866d54f980.png \"6\") \n\n+ Host X发送广播帧\n+ 交换机继续没完没了的更新广播流量\n\n## 多帧复制\n![7](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727312759517-58f63db8-d92d-470c-ad67-dd757a1b61ff.png \"7\")\n\n+ Host X 发送一个单播数据帧给Router Y\n+ Router Y的Mac地址还没有被每个交换机学习到\n+ Router Y接收到两份相同的数据帧的拷贝\n\n## MAC表紊乱\n![8](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727313026522-4391813b-1ffe-44fd-b1a8-b991d93ae6e3.png \"8\")\n\n+ Host X 发送一个单播数据给Router Y\n+ Router Y的MAC地址还没有被每个交换机学习到\n+ switches A and B 在Port1上学习到Host X的MAC地址 \n+ 到达Router Y的数据帧被泛洪\n+ switches A and B 不正确的在Port2上学习到Host X的MAC地址\n\n## STP的端口状态\n![9](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727334117182-439a3d3b-da1e-4c91-9df5-4a9566bc64b3.png \"9\")\n\n+ 失效(disabled) - 该端口只是相应网管消息，并且必须先转到阻塞状态。这种状态可以是由于端口的物理状（如端口物理层没有up）态导致的，也可能是管理员手工讲端口关闭。\n+ 阻塞(blocking) - 处于这个状态的端口不能够参与转发数据报文，但可以接收BPDU配置消息，并交给CPU处理。不过不能发送配置BPDU消息，也不能进行地址学习。\n+ 监听(listening) - 处于这个状态的端口不参与数据转发，也不进行地址学习，但可以接收并发送BPDU配置消息。\n+ 学习(learning) - 处于这个状态的端口不能转发数据，但是开始地址学习，并可以接收、处理和发送BPDU配置消息。\n+ 转发(forwarding) -一旦端口进入该状态，就可以转发任何数据，同时也进行地址学习和BPDU配置消息的接 收、处理和发送。","tags":["网络","CCNA"],"categories":["思科"]},{"title":"STP高级","slug":"CCNA/Spanning Tree And More","url":"/CCNA/Spanning Tree And More/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## STP基础部分\n### 技术背景\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728646455824-e63f2ae6-4209-407f-9b5d-2350fc785fc8.png)\n\n+ 接入层交换机单链路上联，存在单链路故障\n+ 物理链路冗余，解决了单链路故障问题，但是二层环境存在环路\n+ 另一个问题的单点故障，如果任意一个汇聚设备宕机，将直接导致下联的接入网络挂掉\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728991853223-aeb82855-6fc2-4071-a881-6ef8cea0a009.png)\n\n+ 生成树可以有效的解决这个问题\n+ 通过生成树协议，在逻辑上将特定端口进行block，从而实现物理上存在冗余环境，而二层又阻止环路的产生\n+ 当拓扑发生变更的时候，生成树协议能够探测这些变化，并且及时自动的调整接口状态，从而适应网络拓扑的变化，实现链路冗余\n\n### 生成树的标准\n+ 802.1D\n+ **<font style=\"color:#DF2A3F;\">PVST+ 思科Cisco私有协议，每个VLAN拥有一颗单独的生成树实例</font>**\n+ **<font style=\"color:#DF2A3F;\">802.1W RSTP</font>**\n+ **<font style=\"color:#DF2A3F;\">802.1S MSTP</font>**\n+ PVRST+ Cisco私有，对RSTP的增强版\n\n### STP的操作\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728992604910-8b3f979a-e693-4e7e-9bf2-931a2daaa69c.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728992769109-d61b90f4-6537-495c-b1bf-23419d750677.png?x-oss-process=image%2Fformat%2Cwebp%2Fresize%2Cw_404%2Climit_0)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728993147373-c6c3f19e-038f-4f1b-a1b7-a3c112d6141f.png?x-oss-process=image%2Fformat%2Cwebp)\n\n+ 每个广播域选择一个根桥\n+ 每个非根桥上选择一个根端口\n+ 每个段选择一个指定端口\n+ 选择一个非指定端口\n    - 根端口：具有最低根路径的接口要考虑的因素：\n    - 1.最低根桥ID\n    - 2.到根桥的最低路径成本\n    - 3.最低的发送者网桥ID\n    - 4.最低的发送者端口ID\n\n### 端口的状态\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728993578313-21b82a1c-9151-47a9-b82f-ff5f9eb9e944.png)\n\n+ Disable\t\t不收发任何报文\n+ Blocking\t\t不接受也不转发帧，接收但不发送BPDU，不学习MAC地址\n+ Listening\t\t不接受也不转发帧，接收并且发送BPDU，不学习MAC地址\n+ Learning\t\t不接受也不转发帧，接受并且发送BPDU，学习MAC地址\n+ Forwarding\t接受并转发帧，接受并且发送BPDU，学习MAC地址\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728993852668-c4c616b2-00e0-47a0-b0ee-a1affc05056a.png)\n\n### STP 拓扑变更\n+ TCN BPDU概述\n+ 当网络拓扑出现变更的时候，最先意识到变化的交换机将发送TCN BPDU\n+ 在发生以下时间时，交换机将发送TCN：\n    - 对于正在处于转发和监听状态的接口，过渡到Block状态（链路故障的情况）\n    - 端口进入转发状态，并且网桥已经拥有指定端口\n    - 非root网桥在它指定的端口收到TCN\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728994204949-b55797be-552d-4227-9276-c7fbaea939b4.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728994221639-299017dc-8cba-42b7-badd-7c7c28a0e771.png)\n\n+ 1. SwitchA挂掉\n+ 2. SwitchB最先检测到拓扑变化，于是产生TCNBPDU并从根端口发送出去(因为根端口是朝着根桥的方向)，B将连续发送TCN BPDU直到指定交换机C发送TCNACK进行确认\n+ 3. SwitchB收到这个TCN BPDU，回送一个TCN ACK进行确认，同时向自己的根端口转发这个TCN BPDU\n+ 4. Root收到这个TCN，回送一个TCN ACK给C\n+ 5. Root修改自己的配置BPDU，以此来通告整个交换网络关于拓扑变更的情况。Root在配置BPDU中设置一段时间的拓扑变更(TC标志)，这段时间等于转发延迟+Max.Age，默认35S\n+ 6. 当交换机收到Root发出的这个TC标志置位的配置BPDU，它们使用转发延迟计时器(默认15S)来更新其MAC地址表中的条目。也就是说条目的寿命由原来的300S的默认值变成15S，这样能保证MAC地址条目更快速的刷新。交换机将持续这个过程，直到不再从Root收到TC BPDU消息为止。\n\n## PVST+\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728994621909-130e73a6-de80-47ad-ac46-64d0b5b29a38.png)\n\n### 扩展的SystemID\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728994870216-a6eb1a0d-74e6-4cab-ad8c-b2e3003d0e4b.png)\n\n+ CISCO CATALYST交换机的MAC地址池最多可以容纳1024个地址，交换机的型号决定了可用MAC的数目，并不是所有catalyst交换机都能支持到这么多个MAC\n+ 这些MAC地址作为VLAN生成树中的网桥ID的MAC地址部分。不同的交换机型号支持不同的可用MAC地址数目。交换机依照次序分配MAC地址\n+ `Show run int | include bia`能看到所有的MAC，其中第一个MAC将被生成树使用，也就是CPU的MAC。接下去就是每个以太网接口的MAC。\n+ 我们知道交换机能够支持的VLAN的数据是很庞大的，如果开启PVST+，每个VLAN-棵生成树，而没棵生成树都要有一个独立的标识，都需要耗费一个MAC的话，那么MAC地址池肯定是无法承受的。\n+ 因此需要使用到MAC地址缩减方案\n\n### Portfast\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729039809369-9c40389d-88da-496d-bca9-25a6d6234403.png)\n\n+ 在交换机上，将连接主机的接口配置为portfast\n+ Portfast接口可以绕过listening和learning状态直接进入forwarding状态\n\n\n## RSTP\n### 概述\n+ 802.1w\n+ 端口角色：根端口、指定端口、替代端口、备份端口\n+ 端口状态：转发、丢弃、学习\n+ 在思科catalyst交换机上，pvst+（pvrst+）是基于RSTP实现的perVLAN版本\n\n### BPDU\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729044484996-3b6cd7be-f733-4168-9777-129aea9b5f10.png)\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728992801739-4802c0b8-889f-443f-829d-086fd6a3fd90.png?x-oss-process=image%2Fformat%2Cwebp%2Fresize%2Cw_750%2Climit_0)\n\n+ 00\t未知\n+ 01\t替代/备份\n+ 10\t根端口\n+ 11\t指定端口\n\n### BPDUs检测过程\n![](https://cdn.nlark.com/yuque/0/2024/jpeg/44908083/1729045900649-8fc37524-c7fb-439f-b6ab-d3c728338bb8.jpeg)\n\n+ B丢失了到Root的路径\n+ 认为自己是Root\n+ 于是发送“我就是Root”的次优BPDU\n\n![](https://cdn.nlark.com/yuque/0/2024/jpeg/44908083/1729046055735-49f106e1-3921-4aa5-a6a3-a057c15dee87.jpeg)\n\n+ C知道Root还活着\n+ 立即发送包含Root信息的BPDU给B\n+ B接受BPDU，并且把连接C的接口设定为根端口\n\n### BPDUGuard\n+ 该接口收到BPDU报文后，会立即切换到err-disable状态\n+ 常搭配portfast特性在接口上一起使用，用于连接主机\n+ 可在接口上激活，也可在全局模式上配置，两者有所不同\n\n### 边缘端口edge-ports\n![](https://cdn.nlark.com/yuque/0/2024/jpeg/44908083/1729123357180-16fc75cb-fb7f-4044-a7d7-c22dc6304f23.jpeg)\n\n+ RSTP定义的端口类型与postfast十分类似\n+ 因为这些接口用于连接主机，所以一般不会产生环路。这写端口可以跳过LST或LRN直接过渡到转发状态\n+ 而且当这这些接口up down的时候不会引起拓扑变更\n+ 另外，边缘端口收到BPDU，则立即丢失边缘端口的特征，变成一个普通的Spanning Tree接口\n+ 在catalyst交换机上，可以用postfast关键字来进行手工配置\n\n### Rapid Transition to Fowarding State\n![](https://cdn.nlark.com/yuque/0/2024/jpeg/44908083/1729124004050-d0224907-d9d7-40ae-adfa-a6b2fd9994e7.jpeg)\n\n+ RSTP能够在边缘端口及P2P链路上快速过度。\n+ RSTP的链路类型是通过接口的双工状态自动获取到的，如果接口时半双工，那么链路类型是shared port，如果是全双工那么就是p2p。\n+ 当然，接口的链路类型可以通过命令修改，接口模式下：`spanning-tree link-type ？`\n\n#### 链路类型\n+ P2P（点对点）\n+ shared port（共享端口） \n\n收敛对比：802.1D\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729124300768-b593c142-1bfe-4859-a852-dbc976dad390.png)\n\n+ A及Root之间新增链路Link1\n+ A及root在link1两端的接口都进入Listening状态，A将收到Root发出来的BPDU\n+ A将BPDU从自己的指定端口发送出去，BPDU被泛洪到网络中\n+ B和C收到这个更优的BPDU，继续向网络中泛洪\n+ 数秒后，D收到这个BPDU，Block掉端口P1\n\nTips：**<font style=\"color:#DF2A3F;\">由于缺乏feednack机制，A连接root的接口从listening到Forwarding，需要经历15*2s的延迟。此时A、B、C下联的用户流量就出现了问题（因为D收到更优的BPDU后，将P1口block了，这时候ABC相当于在A的根端口过渡到forwarding之前都处于网络的“隔离地带”）</font>**\n\n### 收敛对比：RSTP\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729124922667-c1a64149-b6c9-4514-9853-820ffa2b3a3e.png)\n\n+ A及Root之前新增链路Link1\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729124961966-9914c0a0-fd55-4c36-aa6f-36f73a56c1c3.png)\n\n+ A及Root在Link1两端的接口在up之后进入designated blocking。然后双方交互BPDU消息。这个过程实际上是一个协商的过程\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729125063559-0f3a0c30-32df-4e60-a446-c1f2a3ca47dd.png)\n\n+ A在收到Root发送的BPDU后，将自己的所有非边缘端口Block（这个过程称为同步sync），并且回送一个agreement消息给Root\n+ 在此之后，Root及A在link1上的端口立即都过渡到转发状态。而网路目前是没有环路的，A往下的网路目前是切断的\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729125279663-95c22911-ebd8-44ab-b706-67c5fab68886.png)\n\n+ A与B和C之间，开始一轮新的协商，BC收到A发送的bPDU后，完成同步Sync过程，将自己的非边缘端口Block掉，然后都向A回送agreement信息。同时ABC互联的接口进入转发状态。在BC同步操作的过程中，B下联全是主机，因此没有端口被Blcok（已经完成同步）；而C要block掉连接D的端口\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729125689365-ecd8155a-fb87-4009-82a9-c104aafbd310.png)\n\n+ 完成上一步后，生成树状态如图\n+ 最终BPDU到达D，D将P1口Block掉\n\nTips：\n\n**<font style=\"color:#DF2A3F;\">在RSTP收敛过程中，耗费是时间仅仅是BPDU从Root泛洪到网络末端的时间，不用受到任何Timer的限制，直接绕过两个转发延迟时间。因此收敛速度更快。</font>**\n\n+ 有两点需注意:\n    - 交换机之间的这种协商机制只在P2P链路上被执行\n    - 边缘端口的配置非常重要，如果配置不当有可能会在同步过程中被BLOCK。\n\n### Proposal/Agreement Squence\n![](https://cdn.nlark.com/yuque/0/2024/jpeg/44908083/1729126908014-9ffda30f-cba3-4c31-8607-345dbd34c1e9.jpeg)![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729126942017-56bd8d43-41d8-457f-a4c2-18f7ec77ea7c.png)\n\n**<font style=\"color:#DF2A3F;\">Root和A之间新增了一条链路，链路两端的接口在收到对方发送的BPDU前是designated blocking状态</font>**\n\n+ 当一个被选举为指定端口的接口在discarding或learning状态(目只在这个状态)，它在其发送的BPDU中进行proposalbit置位。这就是步骤1的P0的情况\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1729127237066-9878cdaa-4a0b-46a8-b820-0687f9cb411e.png)\n\n+ 在A完成同步后，A就可以将新选出的根端口unblock并且发送一个agreement消息给Root。这个agreement消息是A的proposal消息的拷贝，但是agreement bit置位了。\n+ 如此一来，P0就收到了应答，立即转为forwarding。注意这时候P3接口仍处于designateddiscarding状态，于是它向它的邻居网桥去发送proposal，而且也在积极等待回传的agreement以便进入forwarding状态\n\n## Cisco STP toolkit\n+ Portfast\n+ BPDUGuard\n+ BPDUFilter\n+ UplinkFast\n+ BackboneFast\n+ RootGuard\n+ LoopGuard\n+ UDLD\n\n## 基础配置\n```plain\nSwitch(config)# spanning-tree vlan-id\t\t#激活特定VLAN的stp\nSwitch(config)# spanning-tree vlan vlan-id priorty pri\t\t#配置桥优先级，这里注意是perVLAN的，优先级默认3\nSwitch(config)# spanning-tree vlan vlan-id root {primary | secondary} [diameter diameter] #设置主根次根，该交换机在默认优先级的状态下vlan优先级为24576，如果是secondary，则为28672\n```\n\n```plain\nSwitch(config-if)# spanning-tree [vlan vlan-id] cost cost\nSwitch(config-if)# spanning-tree [vlan vlan-id] post-priority pri\nSwitch(config)# spanning-tree [vlan vlan-id] hello-time sec\nSwitch(config)# spanning-tree [vlan vlan-id] forward-time sec\nSwitch(config)# spanning-tree [vlan vlan-id] max-time sec\n```\n\n```plain\nSwitch(config)# spanning-tree postfast default\nSwitch(config-if)# spanning-tree portfast [trunk]\n```","tags":["网络","CCNP"],"categories":["思科"]},{"title":"VLAN基础","slug":"CCNA/VLAN基础","url":"/CCNA/VLAN基础/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## 简介\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727261880185-f61475a1-7523-4625-bd01-30f41e930bec.png)\n\n+ VLAN即虚拟局域网，是将一个物理的LAN在逻辑上划分成多个广播域的通讯技术\n+ 每个VLAN内可以互相通讯，而每个VLAN之间是完全隔离开的，并不能直接互通，每个VLAN间的广播报文就被隔离开来。\n\n## VLAN的作用\n+ **限制广播域：**广播域被限制在一个VLAN之中，节省了带宽，提升网络处理的效率\n+ **增强局域网的安全性：**不同VLAN之间的报文广播互相隔离，有效提升安全性\n+ **提升了局域网的稳定性：**单个VLAN局域网出问题下机时不会影响到其他的VLAN正常运行\n+ **灵活构建虚拟工作组：**不同需求的用户划分到不同的VLAN之间，各个VLAN间发挥不同作用\n\n## VLAN的特点\n+ 一个VLAN中所有设备都是在同一广播域内；广播不能跨越VLAN传播\n+ 一个VLAN为一个逻辑子网；由被配置为此VLAN成员的设备组成，不同VLAN间需通过路由器实现互相通讯\n+ VLAN中成员多基于Switch端口号码，划分VLAN就是对Switch接口划分\n+ VLAN工作于OSI参考模型的第二层\n\n## VLAN的范围\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727261984139-0609b985-a483-4055-bdee-b2c57a47cba0.png)\n\n+ VLAN 1-1001皆可正常使用，1范围无法进行删除，1001无法进行创建使用和删除\n\n## 接口类型\n### Trunk接口\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727261657279-d246491a-12c9-465a-9ad7-2bdcddc31dee.png)\n\nTrunk一般用于路由器，交换机，AP间以及可同时收发Tagged帧和Untagged帧的终端之间支持互连，它可以允许多个VLAN的帧带Tag通过，但只允许一个VLAN的帧从该类接口上发出时不带Tag（即剥除Tag）。\n\n### Access接口\nAccess接口一般用于和不能识别Tag的用户终端（如用户主机、服务器等）相连，或者不需要区分不同VLAN成员时使用。它只能收发Untagged帧，且只能为Untagged帧添加唯一VLAN的Tag。\n\n### Hybird接口\nHybrid接口既可以用于连接不能识别Tag的用户终端（如用户主机、服务器等）和网络设备（如Hub），也可以用于连接交换机、路由器以及可同时收发Tagged帧和Untagged帧的语音终端、AP。它可以允许多个VLAN的帧带Tag通过，且允许从该类接口发出的帧根据需要配置某些VLAN的帧带Tag（即不剥除Tag）、某些VLAN的帧不带Tag（即剥除Tag）。\n\n## Mac硬件地址\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727261710061-f3a8792b-648d-4b3e-a4f9-9658ce187a77.png)\n\n+ MAC地址有48位，通常表示为点十六进制数。\n+ MAC地址全球唯一，有IEEE对这些地址进行管理的和分配。\n+ 每个地址由两部分组成，分别是供应商代码和序列号。其中前24位二进制代表该供应商代码。剩下的24位由厂商自己分配。\n\n## 802.1Q Tag\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727253192833-a4d3a08b-6a08-473c-89f5-a728f93219aa.png)\n\n### 802.1Q 帧标记\n+ 默认情况下，在802.1Q Trunk上对所有的VLAN打Tag，除了Native VLAN；\n+ 交换机根据以太网帧头信息来转发数据包；\n\n### Tag标记字段详细信息\n+ Tag标记字段包含一个2 bytes EtherType（以太类型）字段、一个3Bits的PRi字段、1bit的CFI字段、12bits的VLAN ID字段；\n\n## ISL\n### 特点\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727232795002-f91da91e-f3d1-4769-90f7-5a1f695d9f6b.png)\n\n+ 思科私有协议，仅可在思科的设备上互通\n+ 通过硬件（ASIC）实现\n+ ISL标识不会出现在工作站，客户端并不知道ISL的封装信息\n+ 在交换机或路由器与交换机之间，在交换机与具有ISL网卡的服务器之间可以实现；\n\n### 报文形式\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727232857479-d7dc114a-8b8b-411a-95d9-30e0df6bbadf.png)\n\n## VTP\n+ 一个能够宣告VLAN的配置信息的信息系统；\n+ 通过一个共有的管理域，维持VLAN配置信息的一致性；\n+ VTP只能在主干端口发送要宣告的信息；\n+ 支持混合的介质主干链接（快速以太网，FDDI，ATM）；\n\n### VTP的运作\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727262262150-ca39be19-8d3a-4ca5-9740-affe0d19cdb1.png)\n\n+ VTP协议通过组播地址01-00-0C-CC-CC-CC在Trunk链路上发送VTP通告；\n+ VTP Server和Clients通过最高的修订号来同步数据库；\n+ VTP协议每隔五分钟发送一次VTP通告或者有变化时发生；\n\n### VTP模式\n#### Server\n+ 删除vlan\n+ 发送/转发信息宣告\n+ 同步\n+ 存储于NVRAM中\n+ Catalyst交换机默认是server模式\n\n#### Client\n+ 发送/转发信息宣告\n+ 同步\n+ 不会存储于NVRAM\n\n#### Transparent\n+ 创建修改删除VLAN\n+ 转发\n+ 信息宣告\n+ 不同步\n+ 存储于NVRAM\n\n### VTP Pruning（修剪）\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1727262775728-359c02e7-1c19-4ed2-8757-71c88d6e1b6c.png)\n\n## 基础配置\n```plain\nSW1(config)# vlan vlan-id\nSW1(config-vlan)# switchport mode [mode]\nSW1(config-vlan)# switchport access vlan [vlan-id | none]\n```","tags":["网络","CCNA"],"categories":["思科"]},{"title":"VLSM和子网划分基础","slug":"CCNA/VLSM和子网划分基础","url":"/CCNA/VLSM和子网划分基础/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## 什么是IP（v4）地址？\n+ 32位\n+ 点分十进制\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728346483856-c5afe761-4939-4551-9121-403cde372526.png)\n\n+ 十进制与二进制的转换\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728346736794-9facc6d2-b099-4632-ba63-1fff0cc06538.png)\n\n## IP地址的类别\n+ 详解见附件表格\n\n### 特殊地址\n+ 127.0.0.1 回环\n+ 0.0.0.0 空地址\n\n### 通讯类型\n+ 单播\n+ 组播\n+ 广播\n\n### 地址类型\n+ **<font style=\"color:#DF2A3F;\">网络地址：</font>** 代指网络的地址。在网络的IPv4地址范围内，最小地址保留为网络地址。此地址的主机部分的每个主机位为0\n+ **<font style=\"color:#DF2A3F;\">广播地址：</font>** 用于向网络中的所有主机发送数据的特殊地址。广播地址使用该网络范围内的最大地址。即主机部分的各比特位全部为1的地址\n+ **<font style=\"color:#DF2A3F;\">主机地址：</font>** 分配给网络中终端设备的地址\n\n### 公网、私有地址\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728351711647-589eb4fc-6491-4c49-a018-a5f006366124.png)\n\n## 为什么要划分子网？\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728348829408-7687d102-2ca3-4736-9b17-d553c72c65df.png)\n\n+ 一个A或B类地址，网络主机过多，划分子网可以有效解决管理的问题\n+ 划分子网也可以解决效率和性能的问题\n\n### 掩码的作用\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728349082195-118bf88e-93f0-4dba-9d1b-32d81556acea.png)\n\n### 如何划分\n+ 向主机位借位\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728349853356-7a427b0e-819e-4cf5-9194-66190b055562.png)\n\n+ 判断类别 找掩码\n+ 变更掩码 找子网\n+ 得出子网号\n+ 得出主机段\n+ 得出广播号","tags":["网络","CCNA"],"categories":["思科"]},{"title":"WAN广域网和PPP","slug":"CCNA/WAN广域网和PPP","url":"/CCNA/WAN广域网和PPP/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n## WAN广域网简介\n### 为什么需要WAN？\n+ 分区或分支结构的员工需要与总部通信并共享数据\n+ 组织经常需要与其他组织远距离共享信息\n+ 经常出差的员工需要访问公司网络信息\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728352642968-6c903617-d770-4e08-a656-48689e47b8ba.png)\n\n### 什么是广域网网络\n+ 用于连接LAN的，跨地理位置的数据通信链路，例如同属一个公司的不同分支机构（处于不同的地理位置）之间的互联链路。\n+ WAN链路一般需要向运营商购买\n+ WAN链路的地理跨越范围比LAN更广\n+ 链路类型多样，用户可以根据自己的需要选择\n\n### WAN在OSI\n+ WAN操作主要集中在第一层和第二层上\n    - 物理层（OSI第一层）协议描述链接通信服务提供商提供的服务所需的电器，机械，操作和功能特性\n    - 数据链路层（OSI第二层）协议定义如何封装传向远程位置的数据以及最终数据帧的传输机制\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728353337164-42582bff-217e-454d-8dbc-fe1f3bc85c06.png)\n\n## WAN广域网接入方式\n### 专线\n+ 如DDN、POS、E1、以太网专线等\n+ 点对点的专有连接（安全、高传输质量）\n+ 支持多种物理介质与物理接口标准\n+ 稳定可靠，配置与维护见到\n+ 适合长时间的业务流量需求；流量相对较高\n+ ![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728353876877-28916c58-781f-47d9-ba12-635cb027e336.png)\n\n### 电路交换\n+ 定义：由SP为企业原创网络节点间通讯提供的临时数据传输通道，其操作特性类似电话拨号技术\n+ 最常见的如ISDN，ADSL\n+ 逻辑连接持久有效，按需拨号\n+ 传输介质主要为电话线，也可以为光纤\n+ 带宽主要为56Kbps，64Kbps，128Kbps，2mbps\n+ 稳定性较差，配置和维护较复杂\n+ PSTN模拟拨号（异步）\n    - 利用传统承载语音模拟信号的电话线来承载数字信号业务的拨号技术\n    - 数/模信号转换\n    - 带宽小，信号质量取决于电话介质信号质量\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728354678348-2904e2c4-ddf7-4932-8d38-37832016b8e1.png)\n\n\n\n### 分组交换（包交换）\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728354731782-d6d2ee9b-6c6d-4a97-8643-f73a2264092a.png)\n\n+ 分组交换设备根据数据帧的二层地址来进行路径的选择\n+ **PVC永久虚电路**\t在交换开始时就已经建立了路由\n+ **SVC交换虚电路**\t根据需要建立\n+ 常用业务如x.25、FrameRelay\n\n### VPN\n暂时搁置\n\n### 无线\n暂时搁置\n\n### WAN物理层\n+ WAN物理层协议描述连接WAN服务所需的电气、机械、操作和功能特性。\n+ WAN物理层还描述DTE和DCE之间的接口\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728354974355-5ce0a711-97a2-4f7d-a876-9e26997bfcfe.png)\n\n## 常见的封装协议\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728355030117-4df0f986-8894-4697-9f68-e6b08ddde778.png)\n\n+ 专用线路\tPPP、HDLC\n+ 电路交换\tTelephone company\n+ 分组交换\tFrameRelay\n\n### HDLC\n+ 专用线路在数据链层一般采用HDLC或PPP封装\n+ 专用线路是一条永久的点对点线路\n+ HDLC（High-Level Data Link Control）高级数据链路控制协议是一种在同步链路上传输数据的二层协议\n+ HDLC由SDLC协议发展而来\n+ 每个厂家的HDLC可能有所不同，因此不同厂家之间的HDLC未必能够兼容\n\n#### 普通HDLC\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728369039384-68b71f94-66c2-4fe0-9cfc-ece2a5e2c406.png)\n\n+ 传统ISO HDLC只支持单协议环境\n\n#### 思科HDLC\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728369091407-173357fe-3f75-43a2-8634-b3a83b477383.png)\n\n+ 思科HDLC支持多协议\n+ 增加了Proprietary私有字节用于识别\n\n## PPP简介\nPPP协议是目前使用最广泛的广域网点对点链路封装协议之一，它具有以下特性\n\n+ 能够控制数据链路的建立\n+ 能够对IP地址进行分配和使用\n+ 支持多种网络层协议\n+ 能够配置和测试数据链路\n+ 能够进行错误检测\n+ 提供身份验证\n+ 有协商选项，能够对网络层的地址和数据压缩等进行协商、\n\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728369245419-e64a57e6-5864-4b17-9f6f-203c0a850654.png)\n\n+ PPP使用基于数据链路层的点对点传输，即PPP封装\n+ PPP上层支持三层协议，分别为TCP/IP、IPX、AppleTalk\n\n## PPP的层次结构\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728369696975-78542e05-1ace-451b-894c-8ad9e6e115ce.png)\n\n+ PPP工作在数据链路层\n+ PPP主要由NCP和LCP两个协议配合组合而来\n\n### PPP的组件\n+ 链路控制协议LCP（Link Control Protocol)\n    - LCP负责创建，维护或终止一条数据链路\n+ 网络控制协议NCP（Network Control Protocol)\n    - NCP是一个协议族，负责解决物理连接上运行什么网络协议，以及解决上层网络协议发生的问题。\n+ 认证协议\n    - 最常用的包括口令验证协议PAP（PasswordAuthenticationProtocol）和挑战握手验证协议CHAP（Challenge-HandshakeAuthentication Protocol）\n\n## PPP会话的建立\n+ 链路的建立和配置协商\n    - 通信的发起方发送LCP frame来配置和检测数据链路\n+ 链路质量检测，认证阶段(可选)\n    - 判断链路的质量是否能携带网络层信息。 如果使用身份验证的话，那么验证过程发\n    - 生在这步\n+ 网络层协议的配置协商\n    - 通信的发起方发送NCP frame用以选择和配置网络层协议。配置完毕，通信双方可以发送各自的网络展协议数据分组\n\n## PAP认证（单向）\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728371375625-0300c2f8-8136-45e5-8923-6bd1f53e11da.png)\n\n+ 2次握手\n+ 密码以明文的形式直接发送\n\n## CHAP认证（单向）\n![](https://cdn.nlark.com/yuque/0/2024/png/44908083/1728371472275-484410a9-4d45-4013-ba20-6350f19a1f34.png)\n\n\n\n## 基础配置\n```plain\nRouter(config)# int s0/0\t#进入接口\nRouter(config)# hostname name\t#（可选）指定路由器名字\nRouter(config)# username name password password\t#（可选）标示远端路由的用户名和密码，配置在认证服务端\nRouter(config-if)# encapsulation ppp\t#修改接口类型为PPP协议\nRouter(config-if)# ppp authentication {chap|chap pap|pap chap|pap}\t#（可选）启用PAP或者CHAP认证，配置在认证服务端\n```","tags":["网络","CCNA"],"categories":["思科"]},{"title":"帧中继FrameDelay","slug":"CCNA/帧中继FrameDelay","url":"/CCNA/帧中继FrameDelay/","content":"\n## 简介\n![](https://img.picgo.net/2024/11/19/image78afa5a21ee4c356.png)\n\n+ 使用虚电路进行连接\n+ 提供面向对象的服务\n+ 应用非常广泛的WAN协议\n+ FR交换设备在用户路由器间建立虚电路，提供基于分组交换的二层通道\n+ 面向连接的数据链路技术\n+ 速率：56K - 2M\n\n## 帧中继术语VC\n![](https://img.picgo.net/2024/11/19/image-1822fb32e7964aa45.md.png)\n\n### 虚电路（VC）\n+ 通告帧中继实现的逻辑连接叫做虚电路（VC）\n+ 利用虚电路，帧中继允许多个用户共享带宽，而无需使用多条专用物理路线，虚电路是以DLCI标识的\n\n### DLCI（Data Link Connection Identifilier）数据链路连接标识\n+ 通常由帧中继服务提供商（例如电话公司）分配\n+ 帧中继DLCI仅具有本地意义\n+ DLCI 0到15和1008到1023留作特殊用途。服务提供商分配的DLCI范围通常为16到1007\n\n### LMI（本地管理接口）\n+ 是一种信令标准，用作管理链路连接及keepalive的机制\n+ 终端路由器（DTE）和帧中继交换机（DCE）之间的帧中继设备没10秒（或大概如此）轮询一次网络\n+ 思科路由器支持三种LMI，分别是Cisco，Ansi和q933a\n\n路由器从帧中继交换机的帧封装接口接受LMI信息，并将虚链路状态更为下列3钟状态之一：\n\n+ Active State正常状态 \n+ Inactive State远程路由器没有在工作\n+ Delete State接口没有收到交换机的仍和LMI信息，可能是映射问题或者线路问题\n\n## 帧中继拓扑\n\n\n### 星型结构（Hub-and-spoke）\n![](https://img.picgo.net/2024/11/19/image-2376cc5397034bbb7.md.png)\n\n#### 特点\n\n+ 从一点连接到各处（集中点）\n\n\n\n### 全互联（Full Mesh）\n![](https://img.picgo.net/2024/11/19/image-329c02835daa6f3fe.md.png)\n\n#### 特点\n\n+ 互相连接\n\n#### 缺点\n\n+ 代价过大\n\n\n\n### 部分互联（Partial-Mesh）\n![](https://img.picgo.net/2024/11/19/image-42dad52386351e79e.md.png)\n\n#### 特点\n\n+ 节省成本的同时保证稳定性\n\n## 帧中继 地址映射\n![](https://img.picgo.net/2024/11/19/image-58ee3b624d6f870af.png)\n\n+ 帧中继映射条目，DLCI从运营商处获取，映射关系为远端的IP地址到本地DICI之间的联系\n+ 可以通过手工配置或Inverse ARP自动发现\n\n## Tips\n+ 帧中继虽不支持广播，但可以“模拟”广播的操作，做法即是通过向所有的PVC发送一份数据的拷贝\n+ 在建立PVC的时候，通过invers-arp自动建立映射，默认就开启上述特性，如果是手工映射，则必须加上boardcast关键字\n\n## 基础配置\n### 简单例子\n![](https://img.picgo.net/2024/11/19/image-6b7b1ff832a361354.md.png)\n\n```plain\nRouter(config)# int s0/0\nRouter(config-if)# ip add 10.1.123.1 255.255.255.0\nRouter(config-if)# encapsulation frame-relay\nRouter(config-if)# no frame-relay inverse-arp #关闭insverse-arp\nRouter(config-if)# frame-relay map ip 10.1.123.2 102 broadcast #手工配置帧中继映射\nRouter(config-if)# frame-relay map ip 10.1.123.3 103 broadcast\n```\n\n```plain\nRouter(config)# int s0/0\nRouter(config-if)# ip add 10.1.123.2 255.255.255.0\nRouter(config-if)# encapsulation frame-relay\nRouter(config-if)# no frame-relay inverse-arp  #关闭insverse-arp\nRouter(config-if)# frame-relay map ip 10.1.123.1 201 broadcast #手工配置帧中继映射\n```","tags":["网络","CCNA"],"categories":["思科"]},{"title":"静态路由+思科系统操作","slug":"CCNA/静态路由+思科系统操作","url":"/CCNA/静态路由+思科系统操作/","content":"\n# 静态路由部分\n## 简介\n路由是指从源主机到目的主机的转发过程\n\n## 路由器的工作内容\n+ 路由器知道目标地址\n+ 发现到达目标地址的可能的路由\n+ 选择最佳路径（路由表）\n+ 维护路由信息\n\n## 主要特点\n静态路由需要管理员根据实际需要一条条自己手动配置，路由器不会自动生成所需的静态路由的。静态路由中包括目标节点或目标网络的IP地址，还可以包括下一跳IP地址（通常是下一个路由器与本地路由器连接的接口IP地址），以及在本路由器上使用该静态路由时的数据包出接口等。\n\n### 路由路径相对固定\n因为静态路由是手动配置的，静态的，所以每个配置的静态路由在本地路由器上的路径基本上是不变的，除非由管理员自己修改。另外，当网络的拓扑结构或链路的状态发生变化时，这些静态路由也不能自动修改，需要网络管理员需要手工去修改路由表中相关的静态路由信息。\n\n### 永久存在\n也因为静态路由是由管理员手工创建的，所以一旦创建完成，它会永久在路由表中存在的，除非管理员自己删除了它，或者静态路由中指定的出接口关闭，或者下一跳IP地址不可达。\n\n### 不可通告性\n静态路由信息在默认情况下是私有的，不会通告给其它路由器，也就是当在一个路由器上配置了某条静态路由时，它不会被通告到网络中相连的其它路由器上。但网络管理员还是可以通过重发布静态路由为其它动态路由，使得网络中其它路由器也可获此静态路由。\n\n### 单向性\n静态路由是具有单向性的，也就是它仅为数据提供沿着下一跳的方向进行路由，不提供反向路由。所以如果你想要使源节点与目标节点或网络进行双向通信，就必须同时配置回程静态路由。\n\n### 递归性\n静态路由没有建立邻接关系的Hello包，静态路由也不会被通告邻居路由器，所以它的下一跳是路径中其它路由器中的任一一个接口，只是能保证到达下一跳就行了。这就是静态路由的“递归性”。\n\n### 适用于小型网络\n静态路由一般适用于比较简单的小型网络环境，因为在这样的环境中，网络管理员易于清楚地了解网络的拓扑结构，便于设置正确的路由信息。同时小型网络所需配置的静态路由条目不会太多。如果网络规模较大，拓扑结构比较复杂，则不宜采用静态路由，因为这样的配置工作量实在太大。\n\n### 协议\n+ 被动路由协议（Routed protocols）：用来在路由器之间传递用户的信息\n+ 主动路由协议（Routing protocols）：用于维护路由器的路由表\n\n### 路由的来源\n+ 直连路由-直接连接到路由器上的网络\n+ 静态路由-管理员手工构建路由器表\n+ 动态路由-路由器之间动态学习到的路由表\n\n### 静态路由的配置\n```plain\nR1(config)# ip route network-address subnet-mask {ip-add|exit-interface}\n```\n### 故障排查\n+ Ping-测试连通性\n+ Traceroute-追踪两段中的每一跳\n+ Show IP route-用于显示路由表\n+ Show IP interface brief-接口信息摘要\n+ show cdp neighbors detail-用于收集毗邻信息\n\n# 思科系统操作\n## 路由器组件\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/image8c1410e694adfd3b.md.png)\n\n### 路由器的组成及功能\n+ CPU-执行操作系统的指令\n+ 随机访问存储器（RAM）-RAM中的内容断电丢失\n    - 运行操作系统\n    - 运行配置文件\n    - IP路由表\n    - ARP 缓存\n    - 数据包缓冲区\n+ 制度存储器（ROM）\n    - bootstrap指令\n    - 基本的自检软件\n    - 迷你版IOS\n+ 非易失RAM（NVRAM）\n    - 存储启动配置\n+ 运存（FLASH）\n    - 运行操作系统（Cisco IOS）\n+ Interfaces\n    - 拥有多种物理接口用于连接网络接口类型举例\n\n### 路由器启动多个主要步骤\n+ 检测路由器硬件\n    - Power-On self Test（POST）\n    - 执行bootstrap\n+ 定位加载Cisco IOS软件\n    - 定位IOS\n    - 加载IOS\n+ 定位加载启动配置文件或进入配置模式\n    - 启动程序搜寻配置文件\n\n### 访问CLI的方法\n![](https://img.picgo.net/2024/11/19/imageeff692d72ed7c5bb.md.png)\n\n+ 控制台\n+ Telnet或者SSH\n+ 辅助端口\n\n### 使用CLI的帮助\n+ 命令提示及补全\n+ 命令语法检查\n+ 热键和快捷方式\n\n## Cisco IOS主要模式\n![](https://img.picgo.net/2024/11/19/image3e21dadccda03905.md.png)\n\n+ 用户执行模式 \">\"\n+ 特权执行模式 \"#\"\n+ 全局配置模式\n+ 其他特定配置模式\n\n### 全局配置模式\n+ 从全局配置模式可进入多种不同的配置模式。其中每种模式可以用于配置IOS设备的特定部分或特定功能。下表列出了这些模式中的一小部分\n\n### 接口模式\n+ 用于配置一个网络接口（Fa0/0、s0/0/0等）\n\n### 线路模式\n+ 用于配置一条线路（实际线路或者虚拟线路）（例如控制台、aux或vty等等）\n\n### 路由配置模式\n+ 用于配置一个路由选择协议进程的相关参数\n\n## 模式的切换\n![](https://img.picgo.net/2024/11/19/image72ccdef2cf22f781.md.png)\n\n### 基础指令\n```plain\nRouter(config)# hostname device-name #配置设备名称\n```\n\n```plain\nRouter(config)# line console 0\nRouter(config-line)# password password \nRouter(config)# login\n```\n\n```plain\nRouter(config)# enable password password\nRouter(config)# enable secret password\n```\n\n```plain\nRouter(config)# line vty 0 4\nRouter(config-line)# password password \nRouter(config)# login\n```\n\n```plain\nR1# write\nR1# copy running-config startup-config\n```\n\n```plain\nR1# erase startup-config\nR1# delete flash:config.text\n```","tags":["网络","CCNA"],"categories":["思科"]},{"title":"Lay2 Switching and VLAN","slug":"CCNP/CCNP交换 Lay2 Switching and VLAN","url":"/CCNP/CCNP交换 Lay2 Switching and VLAN/","content":"\n## Lay2 Switching\n### 简介</h3>\n+ 基于硬件的交换\n+ 线速转发性能\n+ 低延迟\n+ 定义MAC地址\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/Lay2sw%26vlan%20(10).png)\n\n### Lay2 Frame\n+ 类型字段取值为0800的帧代表IP协议\n+ 类型字段取值为0806的帧代表ARP协议帧\n+ 类型字段取值为0835的帧代表RARP协议帧\n+ 类型字段取值为8137的帧代表IPX和SPX传输协议帧\n\nEthernet II帧\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/Lay2sw%26vlan%20(9).png)\n\n802.3帧\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/Lay2sw%26vlan%20(8).png)\n\nMAC\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/Lay2sw%26vlan%20(7).png)\n\n+ MAC地址有48位，通常被表示为点分十六进制数\n+ MAC地址全球唯一，由IEEE对这些地址进行管理和分配\n+ 每个地址由两部分组成，分别是供应商代码和序列号。其中前24位二进制代表该供应商代码。剩下的24位由厂商自己分配\n\n## VLAN概率回顾\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/Lay2sw%26vlan%20(6).png)\n\n\n\n+ 形成逻辑的广播域，不同之间的VLAN互相隔离\n+ 一个VLAN中所有设备都是在同一广播域内，不同的VLAN为不同的广播域VLAN之间互相隔离，广播不能跨越VLAN传播，因此不同VLAN之间的设备一般无法互访，不同VLAN间需通过三层设备实现相互通信\n+ 一个VLAN一般为一个逻辑子网，由被配置为此VLAN成员的设备组成VLAN中成员多基于交换机的端口分配，划分VLAN就是对交换机的接口划分\n+ VLAN工作于OSI参考模型的第二层\n+ VLAN是二层交换机的一个非常根本的工作机制\n\n\n\n## Trunk概念回顾\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/Lay2sw%26vlan%20(5).png)\n\n+ 当一条链路，需要承载多VLAN信息的时候，需使用trunk来实现\n+ Trunk两端的交换机需擦用相同的干道协议\n+ 一般见于交换机之间或交换机与路由器、服务器之间\n\n## ISL与802.1Q\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/Lay2sw%26vlan%20(4).png)\n\n### ISL\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/Lay2sw%26vlan%20(3).png)\n\n+ 思科私有协议\n+ 支持PVST\n+ 在原始数据帧基础上封装ISL头及新的FCS\n+ 没有修改原始的数据帧，因此处理效率比802.1Q高\n+ VLAN字段，15分比特目前用了十个，那么最多支持2的10次方=1024个VLAN\n\n### 802.1Q\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/Lay2sw%26vlan%20(2).png)\n\n+ IEEE共有协议\n+ 插入Tag字段，同时重新计算FCS\n\n## Native VLAN\n+ Native VLAN所属的帧在经过trunk时不打标签\n+ Native VLAN在Trunk两端必须匹配，否则会出现VLAN流量互串\n+ 默认native vlan是vlan1\n+ 建议将一个生僻的VLAN配置成Native VLAN\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/Lay2sw%26vlan%20(1).png)\n\n### 基础配置\n```plain\nRouter(config-if)# switchport trunk native vlan ? #在trunk设置native vlan\nRouter(config)# vlan dot1q tag native #也对native vlan打标签\n```","tags":["网络","CCNP"],"categories":["思科"]},{"title":"Trunk VTP and pVLAN","slug":"CCNP/CCNP交换 Trunk VTP and pVLAN","url":"/CCNP/CCNP交换 Trunk VTP and pVLAN/","content":"\n## VLAN范围（Dot1Q）\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/vtppvlan%20(4).png)\n\n+ 0，4095\t保留，系统使用\n+ 1\t思科默认vlan\n+ 2-1001\tFor Ethernet VLANs\n+ 1002-1005\t思科默认为FDDI及TokenRing\n+ 1006-4094\t只能为Ethernet使用，在一些特殊平台使用\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/vtppvlan%20(2).png)\n\n## Trunking配置\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/vtppvlan%20(3).png)\n\n+ Trunk可以手工静态配置或者通过DTP进行协商\n+ DTP是的交换机之间能够进行trunk协商\n\n\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/vtppvlan%20(5).png)\n\n## Trunk相关配置\n```plain\nSwitch(config)# switchport mode access\t#接口设置access模式\nSwitch(config)# switchport mode encapsulation {dot1q | ISL}\t#如果接口是trunk，设置干道协议类型\nSwitch(config)# switchport mode dynamic {auto | desirable}\t#将接口设置为DTP动态协商，可选auto或者desirable\nSwitch(config)# switchport nonegotiate\t#将接口设置为nonegotiate，不发送DTP帧，如果配置非协商，那么就必须手工配置接口模式，为access或者trunk\n```\n\n## VTP（VLAN Trunking Protocol）\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/vtppvlan%20(7).png)\n\n+ 思科的私有协议\n+ 只能传递VLAN信息\n+ 简化大型园区网中VLAN信息库同步的问题（同一个VTP管理域中）\n+ 只同步VLAN信息\n+ 需要交换机之间的trunk链路支持\n\n## VTP模式\n### Server\n+ 可创建修改删除VLAN\n+ 发送/转发信息宣告\n+ 同步\n+ VLAN信息存储于NVRAM\n+ Catalyst交换机默认是server模式\n\n### Client\n+ 不能创建修改删除VLAN\n+ 发送/转发信息宣告\n+ 同步\n+ VLAN信息不会存贮于NVRAM\n\n### Transparent\n+ 可创建修改删除VLAN \n+ 转发信息宣告\n+ 不同步 不始发\n+ VLAN信息存贮于NVRAM\n\n### Tips：\n+ 删除VLAN配置请使用`delete flash:config.text`，切勿使用`delete flash:`，这将会清除flash中的IOS固件\n\n## VTP的运作\n+ VTP协议通过组播地址0100-0CCC-CCCC在trunk链路上发送VTP通告\n+ VTP Server和clients通过最高的修订号来同步数据部\n+ VTP协议每隔5分钟发送一次VTP通告或者有变化时发生\n\n![](https://img.picgo.net/2024/11/19/image-5b89cbafacef6088c.png)\n\n## VTP的配置\n```plain\nSwitch(config)# vtp domain cisco\t#配置VTP域名\nSwitch(config)# vtp mode { server | client | transparent }\t#配置本机VTP模式\nSwitch(config)# vtp password x\t#（可选）配置密码\n```\n\n## 私有VLAN（PVLAN）\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/vtppvlan%20(1).png)\n\n+ 主VLAN\n+ 辅助VLAN\n+ 团体VLANs\n+ 混杂端口\n\n## PVLANs\n+ 将一个VLAN划分成几个单独的VLAN，这些VLAN都使用同一个IP网段\n+ 可以提高安全性，降低子网数目，提高IP利用率\n+ 尽管网络设备处于同一个子网中，但是他们属于不同的pVlan，pVlans之间的通信还是必须通过默认网关来实现。 \n+ 每个pVLAN包括一个主VLAN以及多个辅助VLAN。\n+ 所有的辅助VLAN都映射到主VLAN。辅助VLAN分为团体VLAN和隔离VLAN。\n+ 相同团体VLAN能够互相通信(lay2)，但是团体VLAN之间必须通过设置SV或者路由器接口才能通信。\n+ 相同隔离VLAN内部(端口之间)以及隔离VLAN之间都是不能够互相通信的，只能与混杂接口通信。\n+ 一个主VLAN只能有一个Isolate vlan\n+ 混杂端口能够与PVLAN中的任何设备通信，不管对方是处于主VLAN，还是辅助VLAN.\n\n## VLAN port types\n+ 独立（Isolated）\n    - 仅与混杂端口通信\n+ 混杂（Promiscuous）\n    - 与所有其他端口通信\n+ 团体模式（Community）\n    - 与团体其他接口和所有混杂接口进行沟通","tags":["网络","CCNP"],"categories":["思科"]},{"title":"Linux Bash Shell 脚本编写","slug":"Linux/Linux Bash Shell 脚本编写","url":"/Linux/Linux Bash Shell 脚本编写/","content":"\n## &> /dev/null\n可放于echo末尾用于保持桌面整洁\n\n\n## shell脚本\n创建文件时在末尾添加 .sh\n\n在文件中首行写入#！/bin/bash后正常输入命令\n\n保存后可使用sh +路径执行\n\n也可给该文件添加执行权限x\n\n直接输入该路径即可执行\n\n\n\nread [用户输入数据] [变量名]:让用户输入数据并赋值到该变量（可在输入数据前加-p ”信息\",在输入数据时显示信息)\n\nlet 变量名++/--：使变量自增/自减1\n\n\n\n### 参数\n**'$#:'** 参数数量总和   \n**'$*:'** 所有参数  \n**'$?:'** 显示上一次命令的执行返回值    \n**'$num:'** 对应位置为第num的参数\n\n\n\n### 测试语句\n格式：[ 条件表达式  ](注意两边各有一个空格)\n```bash\n-d:测试文件是否为目录类型\n-e:测试文件是否存在\n-f:判断是否为一般文件\n-r/w/x:测试当前用户是否有r/w/x权限\n```\n若判断结果为真则返回0，若判断结果为假则返回其他非零值\n\n\n\n例:\n```bash\n[ -d /etc/abcde ] \n\necho $?\n```\n若该文件为目录类型则会输出\n```bash\n0\n```\n若该文件不为目录类型则会输出其他非零值\n\n\n\n### 整数比较：\n```bash\n格式：[ num1 运算符 num2 ]\n-eq:是否等于\n-ne:是否不等于\n-gt:是否大于\n-lt:是否小于\n-le:是否等于或小于\n-ge:是否大于或等于\n```\n\n如遇到报错\"[: -gt: unarg operator expected\"可用a=$((a))将变量转换为整数类型\n\n\n\n### 字符串比较:\n+ **=**:比较字符串内容是否相同（！=为不同）\n   + 例：[ $a =  $b ]:若相同则返回值为非零值，若不同则返回非零值\n+ **-z**：判断字符串内容是否为空\n  + 例：[ -z $a  ]:若字符串为空则返回0，若不空则返回非零值 \n\n\n\n### 逻辑语句：\n+ 一般基于测试结果进行，跟在测试语句后\n+ 逻辑与：&&：在测试结果为真时才会执行\n  + 例：[ -d /etc/a ] && echo \"执行成功\"\n+ 若判断为假则不会有输出，若判断为真则会输出执行成功\n+ 逻辑或：||：在测试结果为假时才会执行\n+ 逻辑非：! : 将判断结果取反，直接加在条件表达式的首位\n\n\n\n### if条件测试语句:\n单分支：\n```bash\nif[条件]为0则执行，不为0则不执行\nthen （指令）\nfi （结束）\n```\n\n\n#### 双分支：\n```bash\nif[条件]\nthen（指令）#若条件为0则会执行该指令\nelse（指令）#若条件不为0则会执行该指令\nfi\n```\n\n\n#### 多分支：\n```bash\nif[条件]\nthen （命令）\nelif[条件2]\nthen （命令2）\nelse （命令3）\nif\n```\n在条件中判断为0后会执行对应的then后的命令\n\n\n\n\n\n### for循环：\n```bash\nfor [变量] in [取值列表]\ndo\n      命令列表\ndone\n```\n不解释\n可配合cat遍历列表文件的所有行\n\n```bash\nfor a in $(cat “./列表文件\")\ndo \n    echo \"$a\"\ndone\n```\n\n\n\n### while循环：\nwhile 条件测试操作\n```bash\ndo \n    命令\ndone\n```\n\n用exit 0跳出循环\n\n\n```bash\ncase:\n\ncase “变量值” in\n模式1）\n\n    命令\n\n    ；；\n模式2）\n\n    命令\n\n    ；；\n............\n*）\n# 以上都无法匹配时执行该命令\nesac\n```\n\n\n例：\n\nread输入字符\n\n```bash\ncase \"输入的字符\" in\n\n[a-z] | [A-Z] )\n     echo  \"字母\"\n     ;;\n[0-9] )\n     echo \"数字\"\n     ;;\n*)\n     echo \"特殊字符\"\nesac\n```","tags":["Linux","指令"],"categories":["系统类"]},{"title":"Linux RAID","slug":"Linux/Linux RAID磁盘阵列","url":"/Linux/Linux RAID磁盘阵列/","content":"\n## 阵列基础策略\n### RAID 0：\n优点：有效提升硬盘数据的吞吐速度；\n缺点：不具备数据备份和错误修复能力\n\n### RAID 1：\n优点：数据安全性增加；\n缺点：磁盘设备读写速度降低，磁盘利用率降低，成本提高\n\n### RAID 5：\n优点：较为均匀的兼顾了读写速度，数据安全性，存储成本\n\n### RAID 10：\n优点：集合了RAID 0 和RAID 1的优点；\n缺点：成本大幅提高\n\n## 部署磁盘阵列：\n\n\n- 使用命令mdadm 模式 RAID设备名称 选项 磁盘成员\n\n### 选项：\n- -a：检测设备名称\n- -n：指定设备数量\n- -I：指定RAID级别\n- -C：创建\n- -v：显示过程\n- -f：模拟设备损坏\n- -r：移除设备\n- -Q：查看摘要信息\n- -D：查看详细信息\n- -S：停止RAID磁盘阵列\n- -x：有备份盘，后接备份盘数量\n\n例：`mdadm -Cv /dev/md0 -a yes -n 4 -l 10 /dev/sda ...`\n\n\n用命令mkfs将制作好的磁盘阵列格式转化为ext4格式：\n\n- mkfs.ext4 RAID文件\n- 创建文件夹用于挂载阵列文件\n- 用mount挂载\n- 可用`df -h`查看是否成功\n- 将其加入到磁盘配置文件中使其永久生效：\n- 可使用重定向或直接进入vim编辑\n\n输入以下内容：\n```bash\n磁盘文件         /RAID        ext4           defaults           0  0\n```\n\n\n- 在RAID 1和RAID10中若一个磁盘损坏可直接添加磁盘后用命令\n`mdadm 磁盘阵列 -a 新增磁盘`\n- 在使用mdadm 磁盘阵列 -D检测磁盘阵列\n- 全都为active sync即为成功\n- 若不为可等待一会，可能是它在往新磁盘同步数据\n\n\n\n### 模拟磁盘损坏：\n`mdadm 磁盘阵列 -f 损坏的磁盘`\n\n\n\n### 磁盘阵列+备份盘\n指令示例：\n\n`mdadm -Cv /dev/md0 -a yes -n 3 -l 5 -x 1 三个组成阵列的磁盘 一个备份盘`","tags":["Linux","指令"],"categories":["系统类"]},{"title":"Linux 服务器指令基础","slug":"Linux/Linux服务器基础","url":"/Linux/Linux服务器基础/","content":"\n## 基础指令\n```bash\n查看文件目录：pwd\n查看当前目录下的所有目录和文件：ls\n查看当前目录下的所有目录和文件（包括隐藏的文件）：ls -a\n列表查看当前目录下的所有目录和文件（列表查看，显示更多信息），与命令\"ll\"效果一样：ls -l\n查看指定目录下的所有目录和文件：ls /xxx/xxx\n进入文件目录：cd\n进入根目录：cd /\n进入当前用户目录：cd ~\n退出目录：cd ..\n```\n\n```bash\n创建文件夹：mkdir\n创建文件：touch\n设置权限：chmod xxx [文件目录]\n删除文件：rm [文件名]\n删除文件夹：rm -rf [文件目录]\n```\n\n```bash\n立刻关机：shutdown -h now 或者 poweroff\n两分钟后关机：shutdown -h 2\n立刻重启：shutdown -r now 或者 reboot\n两分钟后重启：shutdown -r 2 \n```\n\n```bash\ntype：查看指令信息\nalias 【别名】=‘原命令’：为原命令起别名（unalias 【别名】：删除该别名）\nvim /root/.bashrc：对当前用户设置永久别名\nvim /etc/bashrc：对所有用户设置永久别名\nman xx：查看xx命令的帮助（详细信息）（按q退出）{内容详情：（name：内容的名称）（synopsis：参数的大致使用方法）（descriotion：介绍说明）（examples：演示）（overview：概述）（defaults：默认的功能）（option：具体的可用选项）（environment：环境变量）（files：用到的文件）（see also：相关资料）（history：维护历史与联系方式）}\nhistory：显示历史执行过的命令（使用！编码数字可以重复执行一次该编码的命令）\nhistory -c：清空所有命令的历史记录\n```\n\n```bash\nctrl+r：快速搜索某命令\n！$：引用上一个命令的参数\n！【关键词】：重复上一个有此关键词的命令并执行\n【命令1】 && 【命令2】：先执行命令1后执行命令2，若命令1执行失败则不会执行命令2\nwhich 【命令】:查看命令所在的绝对路径\n```\n```bash\nsudo配置：（使用户a在xxx主机上可以以用户b的身份执行命令)\n用vim进入/etc/sudoers\n在末行按格式输入：用户a 主机=（用户b） 命令\n例子：user2 ALL=（ALL）ALL,!/usr/bin/passwd：使user2在所有主机上都可以使用除passwd以外的所有命令\nsudo的使用：sudo [完整的命令]\n```\n---\n\n## 软件源配置\n### 更新软件源：\nRPM/YUM系：`yum -y update`\nDEB/APT系：`apt -y update`\n\n\n\n### 安装软件： \nRPM/YUM系：`yum -y install [软件名]`\nDEB/APT系：`apt install -y [软件名]`\n\n\n\n### 搜索相应软件包：（以 sl 软件包作例子）\nRPM/YUM系：`yum search sl`\nDEB/APT系：`apt search sl`\n\n\n### rpm:(红帽软件包管理工具)\n```bash\n-i:安装，一般搭配vh\n-U：升级\n-v：输出详细详细\n-V:校验软件包内的所有文件\n-Va:校验所有安装的软件包\n-h：输出哈希值\n-e：卸载\n-q [软件包名称]:查询\n-qa：将所有rpm方式安装的软件全部列出\n-qi：查询软件包详细信息\n-ql：查询软件包相关目录和文件\n-qf [文件的绝对路径]：反查某个文件关联的rpm包\n```\n---\n\n## 定时任务\n### 1.使用yum命令安装Crontab：\n```bash\nyum install vixie-cron \nyum install crontabs\n注：vixie-cron软件包是cron的主程序；\ncrontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。\ncron是linux的内置服务，但它不自动起来，可以用以下的方法启动、关闭这个服务：\n/sbin/service crond start #启动服务\n/sbin/service crond stop #关闭服务\n/sbin/service crond restart #重启服务\n/sbin/service crond reload #重新载入配置\n```\n\n\n\n### <font style=\"color:rgb(77, 77, 77);\">2.查看Crontab状态：</font>\n```csharp\nservice crond status\nntsysv #查看crontab服务是否已设置为开机启动\nchkconfig –level 35 crond on #加入开机自动启动\n```\n\n\n\n### <font style=\"color:rgb(77, 77, 77);\">3.添加定时任务：</font>\n```ruby\ncrontab -e #编辑cron任务模式\ni #默认文字编辑器为vim，按i字母键即可添加cron任务\n30 3 * * * /usr/local/etc/rc.d/lighttpd restart #将命令代码放入，此命令意义为每天的03:30 重启apache\nESC #按ESC键退出编辑模式\n:wq #键入:wq保存\nservice crond restart #重启crontab服务\n```\n\n---\n\n\n\n## 网络操作基础指令\n```bash\nifconfig [网卡名称] [参数]:查看网络配置（down：关闭网卡；up：开启网卡）（特别的,利用ifconfig修改ip地址：ifconfig [网卡名称] [ip地址] netmask [掩码],同时可用vim进入/etc/sysconfig/network-scripts直接修改ip地址等网卡信息)\n修改后的网卡文件不会立即生效，需用命令：（nmcli connection up [网卡名称]）来重新连接网卡使配置生效\nping 网址：尝试连接该网站\n```\n\n```bash\nscp （要传送文件的绝对路径）（传输给的用户)(传送用户的ip）（要传送目录的绝对路径):将文件直接发送给目标用户\n```\n\n```bash\nnmcli：\nnmcli c show:用于表示当前系统中所有的网络连接\nnmcli c(=connection的简写) up [网卡名称]:启用connection（相当于ifup)\nnmcli c down [网卡名称]:停止connection（相当于ifdown）\n通过nmcil给[网卡名称]修改ip地址/掩码：nmcil connection modify [网卡名称] ipv4.address IP/掩码\n防火墙设置：(在6.5系统中systemctl为service)\n```\n\n\n```bash\nsystemctl status firewalld firewalld.service查看防火墙状态\nsystemctl stop firewalld：关闭防火墙\nsystemctl start firewalld：开启防火墙\nsystemctl disable firewalld:开机自动关闭\nsystemctl enable firewalld:开机自动启动\nsystemctl is-enabled firewalld:检测防火墙是否为自启动\nsystemctl iptables stop:关闭网络防火墙\nsystamctl :列出所有的系统服务\nsystemctl list-units:列出所有的unit\nsystemctl network restart\n```\n\n```bash\nwget [下载网址] -O [下载文件的存放位置]:从网络上下载文件\nnslookup [需要解析的域名]：测试能否解析到对应ip地址\ncurl [选项] [url]：从url上下载文件，访问网页，发送请求，上传文件等(-X:指定http请求方法，后接get，post，put等；-F：直接指定post指令要上传的文件;-u：设置用户名和密码进行HTTP基本认证;-o：将下载的内容保存到指定文件中;-O：将下载的内容保存到当前目录下的文件中，文件名与服务器端文件名相同)\nlsof -i:[端口号]:查看端口对应进程的状态，可用来判断端口是否可用\n```\n\niptables：\n链可用于限制流量通过\n```bash\niptables -L：查看规则链\niptables -F：清空规则链\niptables -P INPUT DROP/ACCRPT：将input的默认策略设置为拒绝/同意\niptables -D num INPUT：删除input的第num条规则\n在头部添加新策略：（-I改为-A则为在末尾添加）\niptables -I INPUT（处理流入数据包的结点） -p  tcp/udp(匹配协议）-s 需要限制的ip地址  --dport 端口号 -j  DROP/REJEC/ACCEPT（丢弃or拒绝or同意）\n```\n\n\nfirewall:\n\nfirewall-cmd [参数为一般格式]\n\n参数:\n```bash\n--get-default-zone   查询默认的区域名称\n--set-default-zone=<区城名称>    设置默认的区域，使其永久生效\n--get-zones         显示可用的区域\n--get-services      显示预先定义的服务\n--get-active-zones         显示当前正在使用的区域与网卡名称\n--add-source=               将源自此IP或子网的流量导向指定的区域\n--remove-sourCe=            不再将源自此IP或子网的流量导向某个指定区域\n--add-interface=<网卡名称>          将源自该网卡的所有流量都导向某个指定区域\n--change-interface=<网卡名称>            将某个网卡与区域进行关联\n--list-all                                  显示当前区域的网卡配置参数、资源、端口以及服务等信息\n--list-all-zones                     显示所有区域的网卡配置参数、资源、端口以及服务等信息\n```\n\n默认为运行时模式（rentime）重启后就会失效，可添加--permanent将改设置直接为永久生效，若设置永久生效需使用--reload使其立即生效\n\n`firewall-cmd --add-service=[需要放行的服务]：很实用的命令，可用于放行所需的服务，如http（移除：add改为remove）（也可将服务改为端口，端口后要加/tcp或udp`\n\n`firewall-cmd --add-rich-rule 'rule family=ipv4 source address=[需要同意/拒绝的主机的ip地址]/32 service name=[需要同意/拒绝的服务] reject/accept'同意/拒绝):拒绝来自该ip地址主机的流量对http服务的访问`\n\n若无法操作则按以下格式输入\n\n`firewall-cmd --zone=external --add-rich-rule 'rule family=ipv4 source address=192.168.10.11/32 service name=ssh accept'`\n\n`firewall-cmd --add-rich-rule 'rule family=ipv4 source address [需要同意/拒绝的网段，第四位为0] /24 port port [端口号范围，如20-22] protocol tcp/udp drop/accept/reject'拒绝来自该网段的流量对该范围端口的访问`\n\n`firewall-cmd --add-rich-rule 'rule family=ipv4 source address=[需要同意/拒绝的网段] protocol value=icmp accept/reject'：过滤来自该网段的icmp探测，即让该网段无法ping通（不输入family....网段即为拒绝所有网段)`\n\n---\n\n## 磁盘基础指令\n### mount 磁盘文件 \n- 挂目录：将磁盘临时挂载在目标路径上，重启后失效\n- 若要永久挂载需按格式将内容输入到/etc/fstab中\n- umount 挂载点/磁盘文件：撤销已经挂载的磁盘文件\n\n\n\n### fdisk 磁盘管理工具：\n#### 参数:\n```bash\nm:查看全部可用的参数\nn：添加新的分区\nd：删除某个分区信息\nl：列出所有可用的分区类型\np：查看分区信息\nw：保存并推出\nq：不保存直接退出\n```\n\n加入新磁盘后一定要设定分区后格式化\n\n设定分区流程：\n```bash\nfdisk 磁盘文件路径（在/dev下）\nq查看设备内已有的分区信息\nn尝试添加新的分区\np创建主分区\n输入1后enter回车\n创建一个磁盘分区，格式为+numG，num为数字\np来查看分区信息\nw保存退出\nfile 磁盘文件路径\n若输出不是block special则输入\npartprobe手动同步，连续执行两次该命令效果会更好\n```\n\n\n### mkfs格式化工具：\nmkfs后跟文件类型，这里我们用mkfs.xfs\n使用mkfs.xfs 磁盘文件路径\n\n创建一个文件，用mount将该磁盘挂载到该文件下\n使用`df -h`查看是否成功\n\n\n\nlsblk:查看系统已经挂载的块设备和挂载点\ndf -h/mount:查看当前系统已经挂载的文件系统及其挂载点\ndu 选项 文件:查看文件占用了多大的硬盘空间\n\n\n\n### 磁盘配额:\n对每个用户可使用的磁盘空间和创建最大文件个数进行限制\n进行配置前需先进行以下操作\n进入/etc/fstab在/boot /xfs后的参数defaults后添加,uquota\n作用是让磁盘支持uquota技术\n保存退出后重启\n可用`mount | grep boot`查看是否成功配置\n为了更好的显示效果可使用`chmod -Rf o+w /boot`为所有人赋予写入权限\n\n\n\n#### 命令：\n`xfs_quota -x -c 'limit bsoft=（需要软限制的大小，以m为单位）（空格）bhard=（需要硬限制的大小，以m为单位）(空格）isoft=（inode 的软限制数量）（空格）ihard=（inode的硬限制数量）（需要操作的用户）'  （需要操作的文件夹）`\n配置用户对指定文件夹的限额，其中所有参数不可更改\n\n\n\n`dd if=/dev/zero of=/（路径） bs=（需要创建的文件大小，以m为单位） count=（要复制的块数，即为inode数）`\n创建文件并用零字节将其填至指定大小，并复制指定数量的块\n\n\n\n`edquota -u/g 用户/组`\n在已经使用xfs_quota指令配置过限额后才可使用，在其中可修改配额\n\n\n\n\n\n### 软硬链接：\n#### 软连接：\n近似于创建源文件的快捷方式，源文件删除后该软链接也无法打开了\n\n#### 硬链接：\n直接指向磁盘中的存储位置，会增加文件的inode数，源文件删除后依然可以使用\n\n`ln 选项 源文件 链接文件 创建链接（选项为-s时为软连接，不加默认为硬链接）(其中链接文件不可提前创建否则会报错）（-f：强制创建文件或目录的链接，加了此参数可以无需在意是否提前创建链接文件；-i`\n覆盖前先询问；-v：显示创建链接的过程）\n\n---\n\n## 用户管理\n```bash\nuseradd [参数] [用户名]:创建用户（-c：指定用户的描述信息；-d：指定用户的主目录，该目录不用事先创建；-p:同时创建密码;-g：制定用户所属的主组，后接GID或组名；-G：制定用户所属的附属组，后接GID或组名；-s：指定用户的shell；-u：制定用户的uid）\nusermod [参数] [用户名]:修改用户(-l:修改用户名；其他参数与usedadd相同)\nuserdel [参数] [用户名]:删除用户(-r:同时删除其主目录和邮箱,没加则会保留)\npasswd [参数] [用户名]:管理用户密码（-d:删除用户密码；-l：锁定用户账户，即禁用账户;-u:解锁用户账户)\n特别的：echo [密码] | passwd --stdin [用户]:利用管道直接修改密码\nid [用户名]:查看用户信息\nsu [参数] [用户名]:切换用户（-或-l：初始化大部分环境变量，更改主目录，如同重新登陆一样，不加则为临时登陆）\nwhoami:查看当前用户\n```\n\n---\n\n\n\n## 用户组管理\n```bash\ngroupadd [参数] [组名]:创建组(-g:指定组的GID)\ngroupmod [参数] [组名]:修改组(-g:修改GID;-n:修改组名）\ngroupdel [参数] [组名]:删除组\ngpasswd [参数] [组名]:组的管理(不加参数:设置组的密码；-r：删除组的密码；-a：将用户加入到组中，成为组的成员；-d:将用户从组中移除；-A：将用户设置为组的管理员)\ngroups [组名]:查看用户隶属的组\nnewgrp：登录到其他组\n```\n\n---\n\n\n\n## 进程管理\n```bash\nps：查看系统中的进程状态\nps -a：显示所有进程\nps -u：用户以及其他详细信息\nps -x：显示没有控制终端的进程\ntop：用于动态监视进程活动与系统负载等信息\npidof：用于查询某个指定服务进程的PID值\nkill：终止此PID值的活动进程\nfree -h：显示当前系统中内存的使用量信息\nctrl+c：终止前台的程序\n```","tags":["Linux","指令"],"categories":["系统类"]},{"title":"华为eNSP基础指令","slug":"eNSP/eNSP指令及基础","url":"/eNSP/eNSP指令及基础/","content":"\n## 常见报错：\n```\nIncomplete command：命令不完整\nUnrecognized command：命令有误\nAmbiguous command：命令无法识别\n```\n\n## 基础指令：\n```\n防止交换机配置时一直弹出信息：un info e（un in e）\n进入特权模式：system-view（sy）\n返回：quit/q\nint   [端口]：进入该端口的配置\n进入某个console口：user-interface console 接口\n更换主机名称：sysname 主机名称\ninterface loopback：创建虚拟接口\ndisplay ip interface brief：查看所有端口的启用情况和ip地址\n```\n\n## 接口类型：\n```\n使用命令port link-type 【接口】来切换\naccess：用于连接终端，电脑等\ntrunk：用于连接另一台终端\n```","tags":["指令","ensp"],"categories":["系统类"]},{"title":"Project Treble | Android系统更新的革新之道","slug":"刷机/projecttreble","url":"/刷机/projecttreble/","content":"\n> 每次Android新版本发布后，那种漫长等待却迟迟收不到OTA更新的焦虑，Project Treble正是为了解决这一痛点而生。\n\n## 前话\n\n多年来，Android系统更新缓慢问题一直困扰着用户和制造商。每当Google发布新版本，设备制造商和芯片供应商都需要进行漫长而复杂的适配过程。\n\n这导致**Android设备升级率长期低迷**，甚至2025年仍有17%的设备无法及时获取安全补丁。\n\n2017年，Google在Android 8.0中引入了名为Project Treble的模块化架构设计，这是Android系统架构自诞生以来最重大的变革之一，旨在从根本上解决系统更新缓慢的问题。\n\n---\n\n## 01 传统Android更新的复杂流程\n\n在Project Treble之前，Android系统更新是一个复杂且耗时的过程。首先，Google将新系统源码发布至AOSP（Android开放源代码项目）。\n\n接着，芯片制造商（如高通、三星、联发科等）需要对源码进行针对性修改，以让自家芯片能够在新版本Android系统上正常启动和运行。\n\n然后，芯片制造商将修改后的源码交给OEM厂商，厂商根据自己的需求进一步定制新系统，加入特色功能和预装应用。\n\n最后，经过一系列测试后，新版系统才能通过OTA方式推送给用户。这个过程涉及多方协作，**任何一环出现延迟**都会导致更新推送缓慢。\n\n## 02 Project Treble的核心革新\n\nProject Treble最关键的变化是引入了**vendor interface（供应商接口）** 的概念，将Vender Implementation（由芯片制造商编写的设备专属底层软件）从Android系统框架中剥离出来。\n\n这种架构重组创建了一个稳定的接口，位于Android操作系统框架和设备的特定硬件组件之间。通过这个接口，Android框架可以独立于设备特定的底层软件进行更新。\n\n为了保证兼容性，Google还引入了**Vendor Test Suite（VTS）测试套件**，类似于兼容性测试套件（CTS），用于对vendor interface的合理性和兼容性进行检验。\n\n## 03 Treble架构的关键技术\n\nProject Treble引入了几项重要技术创新：HIDL（HAL接口定义语言）用于指定HAL和其他组件之间的接口；设备树叠加层（DTO）将设备树分割为主DT和叠加DT，使设备树更容易更新和修改；供应商原生开发套件（VNDK）提供了一组让供应商实现其HAL的专用库；供应商接口对象（VINTF）用于汇总设备相关信息并通过可查询的API提供这些信息。\n\nHIDL分为两种模式：Passthrough（直通式）和Binderized（绑定式）。直通式HAL主要用于兼容旧版HAL，而绑定式HAL则运行在独立的进程中，通过Binder机制与框架通信。\n\n## 04 对系统更新的实际影响\n\nProject Treble极大地简化了Android更新流程。在新架构下，Google发布新版本AOSP后，OEM厂商可以直接基于A源码进行定制，无需等待芯片制造商适配。\n\n芯片制造商编写的设备专属底层部分则由Google和芯片厂商共同维护，并被设计为不再面向特定版本的Android系统。\n\n这意味着**OEM厂商可以更快地适配和发布**新版本Android系统，显著降低开发成本和复杂度，同时延长了设备生命周期。\n\nGoogle Android软件工程部门副总理David Burke表示，Project Treble将“让制造商以更低的成本更轻松、更快速地将设备更新到新版Android系统”。\n\n## 05 对第三方ROM开发的影响\n\nProject Treble不仅对官方更新有益，也为第三方ROM开发带来了革命性变化。支持Treble的设备如果想要预装或升级Android 8.0，都必须先经过Project Treble认证。\n\n这意味着设备在OEM厂商对AOSP源码进行定制前，就已经能够运行AOSP系统并通过CDD、CTS、VTS等一系列测试。\n\n开发者通过AOSP代码编译的ROM几乎可以在任何支持Project Treble的新手机上运行，**第三方ROM适配工作变得异常简单**。\n\n像Lineage OS这样的自定义ROM可以更容易地适配各种设备，极大地丰富了Android生态系统的多样性。\n\n## 06 现实挑战与局限性\n\n尽管Project Treble带来了巨大改进，但Android碎片化问题并未完全解决。David Burke曾坦言，像中国、印度等新兴市场最好的手机并不一定采用最新版系统，而是选择相对稳定、成熟的版本。\n\n这种市场策略差异意味着**主要流通版本仍可能存在差异**。2025年的数据显示，仍有17%的Android设备无法及时获取安全补丁，碎片化问题依然存在。\n\n某些地区和市场环境下，厂商可能仍然基于商业考量选择不提供更新，尽管技术障碍已经大大降低。\n\n---\n\nPixel系列手机作为首批支持Project Treble的设备，率先体验到了这一技术带来的优势。\n\n随着时间推移，众多Android厂商也跟随谷歌步伐，将Project Treble应用到自己的设备中。\n\n**三星手机以往很少提供Android更新**，但现在获得的更新比谷歌手机更多。第三方ROM开发者也不再需要为每一款设备进行专门适配，只需要编译一个通用的系统镜像（GSI）就能在所有支持Treble的设备上运行。\n\nProject Treble的价值不仅体现在技术架构上，更是Android生态系统成熟的重要标志。它平衡了开放性与碎片化之间的矛盾，为Android的持续进化奠定了坚实基础。\n\n## Tips\n本文章使用Deepseek V3润色而成，如有错误，请指出，酥米将会及时更改。","tags":["Linux","系统","刷机","玩机"],"categories":["搞机类"]},{"title":"Linux的前世今生 | Linux简介","slug":"Linux/Linux简介","url":"/Linux/Linux简介/","content":"\nLinux，全称 GNU/Linux，是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 Unix 的多用户、多任务、支持多线程和多 CPU 的操作系统。伴随着互联网的发展，Linux 得到了来自全世界软件爱好者、组织以及公司的持续支持与合作。它并非由单一个人或公司开发，而是全球协同合作的典范，其核心在于开源共享的精神。\n\n# 一、历史渊源与开源精神\n\nLinux 的故事始于 1991 年，由芬兰大学生林纳斯·托瓦兹（Linus Torvalds）发起。当时，他为了个人学习和使用，基于 Minix 系统（一个用于教学的小型 Unix 系统）开发了一个新的操作系统内核，并将其源代码公布于互联网上，邀请志同道合者一同完善。这个最初只是业余爱好的项目，迅速吸引了全球众多开发者的目光。\n\n![linus](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/linus2.webp)\n\n严格来说，林纳斯最初发布的只是“操作系统内核”（Kernel），即负责管理硬件、内存、进程等最核心任务的程序。要让一个操作系统变得实用，还需要大量的外围工具，如编译器、 shell、库文件等。而此时，由理查德·斯托曼（Richard Stallman）发起的自由软件基金会（FSF）及其 GNU 项目，已经为此准备了近十年。GNU 项目旨在创建一个完全自由、类 Unix 的操作系统，但其自有内核（Hurd）开发进展缓慢。Linux 内核的出现与 GNU 项目的工具集完美结合，形成了一个完整的操作系统——GNU/Linux（简称 Linux）。这正是“全称 GNU/Linux”的由来，也是对无数贡献者劳动的尊重。\n\n![](https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/GNU.webp)\n\n其成功的根基在于采用了 GNU 通用公共许可证（GPL）。该许可证保证了用户运行、学习、修改和分发软件的自由。任何基于 GPL 代码的改进也必须以相同条款开源。这种“病毒式”的自由传播特性，确保了 Linux 的蓬勃发展不会受制于任何单一商业实体，形成了强大的社区驱动生态。\n\n# 二、核心特性与技术优势\n\nLinux 能取得今日之地位，与其自身卓越的特性密不可分：\n\n1.  **稳定性和高可靠性**：继承自 Unix 的优良基因，Linux 内核极其稳定，能够长时间连续运行而不宕机。这使得它成为运行关键任务应用（如服务器、数据库）的首选。\n\n2.  **强大的网络功能**：Linux 从诞生之初就与互联网紧密结合，其网络协议栈高效且完整，在性能和安全性方面表现出色，是构建网络基础设施的基石。\n\n3.  **多用户、多任务**：原生支持多个用户同时登录和操作，且彼此资源隔离，互不影响。系统能同时运行大量进程，并高效地进行调度和管理。\n\n4.  **跨平台硬件支持**：Linux 内核支持从嵌入式设备、手机到巨型超级计算机的几乎所有硬件平台。这种高度的可移植性使其应用场景无比广阔。\n\n5.  **安全性**：由于其开源特性，全球安全专家可以持续审查代码，发现并快速修复漏洞。相比闭源系统，其安全响应机制更为透明和高效。\n\n6.  **丰富的软件生态**：通过各种包管理系统（如 APT、YUM、DNF），用户可以轻松地安装、更新和卸载成千上万的免费开源软件，从开发工具到办公应用，一应俱全。\n\n\n\n# 三、广泛应用领域\n\n如今，Linux 已无处不在，渗透到数字世界的每一个角落：\n\n*   **服务器与云计算领域**：这是 Linux 的传统优势领域。全球超过 90% 的超级计算机、绝大多数互联网服务器（包括 Google、Facebook、Amazon 等巨头）、以及云计算平台（如 AWS、Azure、Google Cloud 的核心服务）都运行在 Linux 之上。Apache、Nginx、MySQL 等核心网络软件也首选 Linux 环境。\n\n*   **嵌入式系统与物联网（IoT）**：从智能电视、路由器、智能手表到汽车娱乐系统，Linux 因其小巧、灵活和可定制的特性，成为嵌入式设备的宠儿。\n\n*   **移动设备**：Android，这个全球市场占有率最高的移动操作系统，其底层核心正是 Linux 内核。\n\n*   **软件开发与科学计算**：Linux 是程序员和科研人员的乐园。它提供了强大的命令行工具链和原生开发环境，是进行人工智能、大数据分析、高性能计算等前沿研究的理想平台。\n\n*   **桌面系统**：虽然市场份额相对较小，但 Linux 桌面环境（如 GNOME、KDE）日益美观易用。出现了如 Ubuntu、Fedora、Deepin 等优秀的发行版，为用户提供了 Windows 和 macOS 之外的又一个高质量选择，特别受开发者和技术爱好者青睐。\n\n# 结语\n\n从一名芬兰大学生的个人项目，到支撑全球互联网技术的巨人，Linux 的成功是开源协作模式的一次伟大胜利。它证明了当来自世界各地的智慧为了一个共同目标自由汇聚时，所能迸发出的巨大能量。Linux 不仅仅是一个操作系统，更是一种哲学、一种文化。它代表着开放、共享、协作与创新，持续推动着整个信息技术产业向前发展，成为数字时代不可或缺的坚实基础。\n\n---\n\n# 类人版（Deepseek V3润色而成）\n\nLinux，这个名字你可能经常听到，但或许你从未真正了解过它的奇妙之处。说起来，它的诞生更像是一个偶然——1991年，芬兰大学生林纳斯·托瓦兹只是为了方便自己使用，写了一个小小的操作系统内核，并随手把它丢到了网上。就像在湖面投下一颗石子，他没想到这片涟漪竟会扩散至整个世界。\n\n而真正让Linux成长起来的，是一种被称为**开源**的奇妙模式。简单来说，就是所有人都可以看到、修改、分享它的源代码。这就像是一本公开的菜谱，每个厨师都可以根据自己的口味调整，并将改进后的配方再次分享出去。正是这种开放的精神，让全球无数开发者自发地加入进来，共同雕琢这个系统。\n\n你可能会问，这样一个由众人共同搭建的系统，究竟能有多厉害？答案可能超乎你的想象。\n\n每天早上，当你打开手机（如果用的是Android系统，那么你已经在使用Linux了）、浏览网页（绝大多数网站运行在Linux服务器上）、甚至使用共享单车（许多嵌入式设备都基于Linux），你都在不知不觉中与它打交道。从身边的小设备，到太空中火星探测车的控制系统，Linux的身影无处不在。\n\n更重要的是，Linux背后代表的一种理念：技术应该是开放、自由的。它不属于任何一家公司，而是属于全人类。正因为如此，我们才能看到无数基于Linux的创新诞生——无论是贫困地区学校使用的低成本电脑，还是科研机构中处理海量数据的超级计算机，都能见到它的身影。\n\n当然，Linux的世界并非完美无缺。对于普通用户来说，它的入门门槛可能稍高，图形界面虽然已经越来越友好，但依然需要一定的学习成本。不过，正是这种可定制性，让每个人都能打造属于自己的专属系统。\n\n如今，Linux已经走过了三十多个年头，但它依然保持着活力。每时每刻，来自世界各地的开发者仍在为它贡献代码，修复漏洞，添加新功能。这棵大树之所以能枝繁叶茂，正是因为它扎根于开放的土壤中。\n\n或许，Linux最大的启示不在于技术本身，而在于它向我们展示了一种可能性：当人们为了共同的目标而协作时，能够创造出怎样的奇迹。在这个意义上，Linux不仅仅是一个操作系统，更是一次关于合作与共享的伟大实践。\n\n---","tags":["Linux","系统"],"categories":["系统类"]},{"title":"另辟蹊径！荣耀畅玩5x任意版本使用Erec恢复官方最新系统","slug":"刷机/kiwi-downdate","url":"/刷机/kiwi-downdate/","content":"\n### 小贴士：\n+ 华为自带的Erecovery（类似于可以联网的小型救砖系统）会自动帮您恢复到设备的最新版本,所以我们可以搞点骚操作（bushi，利用EREC恢复到官方系统，因为大部分第三方的ROM都是基于低版本底包，EREC将无法使用，所以此教程诞生了！\n+ 由于华为的原因,恢复回去会*重新给Bootloader上锁*，*请备份好您的解锁码*再进行操作。\n\n### 正文\n+ 手机一台，数据线一个。\n\n+ 刷入一个属于自己机型emui4的官改卡刷包，必须是b422+以上的版本。\n+ 刷完别急着进系统，现在是无法进入系统的（会卡一屏无限重启或者二屏一直卡着）\n+ 先关机，然后接上充电器，*保持充电状态*，按音量键+和电源键，开机后松开电源键会进入华为的erecovery模式。\n![Erec模式](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/Huawei_kiwi%20(1).jpeg \"Erec模式\")\n\n+ 选择下载'最新版本并恢复'选项，连接WIFI，之后会自动下载官方全量包，下载之后会自动恢复，大约10分钟～15分钟，设备将会自动重启。\n![开机](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/Huawei_kiwi%20(2).jpeg \"开机！\")\n\n+ 等待进入系统，可以看到恢复到了最新的EMUI4 B443版本，本教程到这里就告一段落了。\n![关于](https://cdn.sumi233.top/gh/huang233893/blog-image-bed/top/huang233893/imgs/blog/Huawei_kiwi%20(2).jpeg \"关于界面\")\n\n> 此文章原文从酷安迁移过来，原文日期为2019-08-17","tags":["刷机","玩机"],"categories":["搞机类"]},{"title":"Hello World","slug":"测试/hello-world","url":"/测试/hello-world/","content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n测试","tags":["测试"],"categories":["杂项类"]}]