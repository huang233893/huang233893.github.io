{"title":"anzhiyu主题友链测速后端修复","slug":"教程/blogflinkcountfix","date":"2025-09-23T18:20:13.000Z","updated":"2025-09-25T03:01:26.723Z","comments":true,"path":"api/articles/教程/blogflinkcountfix.json","excerpt":null,"covers":["https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht1-1.png","https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht1-4.png","https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht1-2.png"],"content":"<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>最近在捣腾anzhiyu主题的友链延迟检测，前端使用了辰渊尘大佬的方法，后端则使用了LiuShen大佬的Github Action方法，但是大佬附带的友链提取js并不适配anzhiyu主题，提示格式错误，于是我投给豆包进行了修改。</p>\n<p>现已支持自动检测编码和自动修复并生成合适的友链json,也能检测出语法问题并且输出错误。</p>\n<p>脚本可以放在scripts文件夹也可以单独执行<code>node link.js</code>来生成</p>\n<p><strong>效果如图</strong>：</p>\n<p><img src=\"https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht1-1.png\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const YML = require(&#x27;yamljs&#x27;);</span><br><span class=\"line\">const fs = require(&#x27;fs&#x27;).promises;</span><br><span class=\"line\">const path = require(&#x27;path&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 路径配置</span><br><span class=\"line\">const LINK_YML_PATH = path.join(&#x27;source&#x27;, &#x27;_data&#x27;, &#x27;link.yml&#x27;);</span><br><span class=\"line\">const OUTPUT_JSON_PATH = path.join(&#x27;source&#x27;, &#x27;flink_count.json&#x27;);</span><br><span class=\"line\">const TAKE_COUNT = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">async function processLinks() &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    // 读取文件（二进制方式）</span><br><span class=\"line\">    const yamlBuffer = await fs.readFile(LINK_YML_PATH);</span><br><span class=\"line\">    console.log(&#x27;文件读取成功，大小:&#x27;, yamlBuffer.length, &#x27;字节&#x27;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理UTF-8 BOM头（移除BOM）</span><br><span class=\"line\">    let cleanBuffer = yamlBuffer;</span><br><span class=\"line\">    if (yamlBuffer[0] === 0xef &amp;&amp; yamlBuffer[1] === 0xbb &amp;&amp; yamlBuffer[2] === 0xbf) &#123;</span><br><span class=\"line\">      console.warn(&#x27;检测到UTF-8 BOM头，已自动移除&#x27;);</span><br><span class=\"line\">      cleanBuffer = yamlBuffer.slice(3); // 移除前3个BOM字节</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 转换为字符串</span><br><span class=\"line\">    const yamlContent = cleanBuffer.toString(&#x27;utf8&#x27;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 显示文件前100个字符用于调试</span><br><span class=\"line\">    console.log(&#x27;文件前100字符:&#x27;, yamlContent.substring(0, 100).replace(/\\n/g, &#x27;\\\\n&#x27;));</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 更安全的YAML处理 - 只处理确实为空的rss字段</span><br><span class=\"line\">    const processedContent = yamlContent</span><br><span class=\"line\">      .replace(/^\\s*rss:\\s*$/gm, &#x27;rss: &quot;&quot;&#x27;)  // 处理空的rss字段</span><br><span class=\"line\">      .replace(/\\t/g, &#x27;  &#x27;);  // 将制表符替换为两个空格（YAML不允许制表符缩进）</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 保存处理后的内容用于调试</span><br><span class=\"line\">    await fs.writeFile(&#x27;processed_yaml_debug.yml&#x27;, processedContent, &#x27;utf8&#x27;);</span><br><span class=\"line\">    console.log(&#x27;已保存处理后的YAML到 processed_yaml_debug.yml&#x27;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 尝试使用更严格的方式定位错误</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      console.log(&#x27;开始解析YAML...&#x27;);</span><br><span class=\"line\">      const data = YML.parse(processedContent);</span><br><span class=\"line\">      console.log(&#x27;YAML解析成功，根结构类型:&#x27;, Array.isArray(data) ? &#x27;数组&#x27; : typeof data);</span><br><span class=\"line\">      </span><br><span class=\"line\">      if (!Array.isArray(data)) &#123;</span><br><span class=\"line\">        throw new Error(&#x27;YAML文件的根结构不是数组&#x27;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      const linkList = [];</span><br><span class=\"line\">      for (let i = 0; i &lt; Math.min(TAKE_COUNT, data.length); i++) &#123;</span><br><span class=\"line\">        const item = data[i];</span><br><span class=\"line\">        if (item &amp;&amp; Array.isArray(item.link_list)) &#123;</span><br><span class=\"line\">          linkList.push(...item.link_list);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          console.warn(`第$&#123;i+1&#125;项不包含有效的link_list数组，已跳过`);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      const outputData = &#123;</span><br><span class=\"line\">        link_list: linkList,</span><br><span class=\"line\">        length: linkList.length</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      </span><br><span class=\"line\">      await fs.writeFile(</span><br><span class=\"line\">        OUTPUT_JSON_PATH,</span><br><span class=\"line\">        JSON.stringify(outputData, null, 2),</span><br><span class=\"line\">        &#x27;utf8&#x27;</span><br><span class=\"line\">      );</span><br><span class=\"line\">      </span><br><span class=\"line\">      console.log(`成功生成 $&#123;OUTPUT_JSON_PATH&#125;，共包含 $&#123;linkList.length&#125; 条友链`);</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125; catch (parseError) &#123;</span><br><span class=\"line\">      console.error(&#x27;\\n=== YAML解析错误 ===&#x27;);</span><br><span class=\"line\">      console.error(&#x27;错误信息:&#x27;, parseError.message);</span><br><span class=\"line\">      </span><br><span class=\"line\">      // 尝试定位错误行</span><br><span class=\"line\">      if (parseError.parsedLine) &#123;</span><br><span class=\"line\">        console.error(&#x27;错误位置: 第&#x27;, parseError.parsedLine, &#x27;行&#x27;);</span><br><span class=\"line\">        // 输出错误行附近的内容</span><br><span class=\"line\">        const lines = processedContent.split(&#x27;\\n&#x27;);</span><br><span class=\"line\">        const errorLine = parseError.parsedLine - 1; // 转换为数组索引</span><br><span class=\"line\">        // 显示错误行前后3行</span><br><span class=\"line\">        for (let i = Math.max(0, errorLine - 3); i &lt;= Math.min(lines.length - 1, errorLine + 3); i++) &#123;</span><br><span class=\"line\">          console.log(`$&#123;i + 1&#125;: $&#123;lines[i]&#125;`);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        console.error(&#x27;错误位置: 未知（可能是文件开头附近）&#x27;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      console.error(&#x27;请检查 processed_yaml_debug.yml 文件是否有格式问题&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125; catch (error) &#123;</span><br><span class=\"line\">    console.error(&#x27;\\n=== 处理过程出错 ===&#x27;);</span><br><span class=\"line\">    console.error(&#x27;错误信息:&#x27;, error.message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">processLinks();</span><br></pre></td></tr></table></figure>\n\n<p>运行脚本前请先安装yamljs <code>node install yamljs --save</code></p>\n<h1 id=\"后端Github-Action修复方案\"><a href=\"#后端Github-Action修复方案\" class=\"headerlink\" title=\"后端Github Action修复方案\"></a>后端Github Action修复方案</h1><div class=\"note warning flat\"><p>此修复方法仅经过本人测试正常运行，可否正常使用请自行测试</p>\n</div>\n\n<p>作者原版github actions运行后可能会出现找不到环境变量的问题，导致抓取失败。</p>\n<p>这里有个走偏门的方法，可以Fork后修改workflows文件夹里面的yaml文件夹的<strong>check_links.yml</strong>,将<code>env：</code>下面的</p>\n<p><code>SOURCE_URL: $&#123;&#123; secrets.SOURCE_URL &#125;&#125;</code></p>\n<p>改成自己的URL，例如：</p>\n<p><code>SOURCE_URL: https://www.sumi233.top/flink_count.json</code></p>\n<p><img src=\"https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht1-4.png\"></p>\n<p>然后在项目的Github Actions再次运行workflows即可。</p>\n<h1 id=\"引用教程\"><a href=\"#引用教程\" class=\"headerlink\" title=\"引用教程\"></a>引用教程</h1><ul>\n<li>谢谢大佬们的无私贡献！</li>\n</ul>\n<div calss=\"anzhiyu-tag-link\"><a class=\"tag-Link\" target=\"_blank\" href=\"https://blog.liushen.fun/posts/c2262998/\">\n    <div class=\"tag-link-tips\">引用站外地址</div>\n    <div class=\"tag-link-bottom\">\n        <div class=\"tag-link-left\" style>\n          <i class=\"anzhiyufont anzhiyu-icon-link\" style></i>\n        </div>\n        <div class=\"tag-link-right\">\n            <div class=\"tag-link-title\">Github Action实现友链状态检测</div>\n            <div class=\"tag-link-sitename\">LiuShen</div>\n        </div>\n        <i class=\"anzhiyufont anzhiyu-icon-angle-right\"></i>\n    </div>\n    </a></div>\n\n<div calss=\"anzhiyu-tag-link\"><a class=\"tag-Link\" target=\"_blank\" href=\"https://blog.mcxiaochen.top/posts/p1c0fbc06/\">\n    <div class=\"tag-link-tips\">引用站外地址</div>\n    <div class=\"tag-link-bottom\">\n        <div class=\"tag-link-left\" style>\n          <i class=\"anzhiyufont anzhiyu-icon-link\" style></i>\n        </div>\n        <div class=\"tag-link-right\">\n            <div class=\"tag-link-title\">安知鱼主题实现友链状态前端显示</div>\n            <div class=\"tag-link-sitename\">辰渊尘の个人博客</div>\n        </div>\n        <i class=\"anzhiyufont anzhiyu-icon-angle-right\"></i>\n    </div>\n    </a></div>\n\n<h1 id=\"最终实现效果\"><a href=\"#最终实现效果\" class=\"headerlink\" title=\"最终实现效果\"></a>最终实现效果</h1><p><img src=\"https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht1-2.png\"></p>\n","more":"<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>最近在捣腾anzhiyu主题的友链延迟检测，前端使用了辰渊尘大佬的方法，后端则使用了LiuShen大佬的Github Action方法，但是大佬附带的友链提取js并不适配anzhiyu主题，提示格式错误，于是我投给豆包进行了修改。</p>\n<p>现已支持自动检测编码和自动修复并生成合适的友链json,也能检测出语法问题并且输出错误。</p>\n<p>脚本可以放在scripts文件夹也可以单独执行<code>node link.js</code>来生成</p>\n<p><strong>效果如图</strong>：</p>\n<p><img src=\"https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht1-1.png\"></p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><p>代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const YML = require(&#x27;yamljs&#x27;);</span><br><span class=\"line\">const fs = require(&#x27;fs&#x27;).promises;</span><br><span class=\"line\">const path = require(&#x27;path&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 路径配置</span><br><span class=\"line\">const LINK_YML_PATH = path.join(&#x27;source&#x27;, &#x27;_data&#x27;, &#x27;link.yml&#x27;);</span><br><span class=\"line\">const OUTPUT_JSON_PATH = path.join(&#x27;source&#x27;, &#x27;flink_count.json&#x27;);</span><br><span class=\"line\">const TAKE_COUNT = 2;</span><br><span class=\"line\"></span><br><span class=\"line\">async function processLinks() &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    // 读取文件（二进制方式）</span><br><span class=\"line\">    const yamlBuffer = await fs.readFile(LINK_YML_PATH);</span><br><span class=\"line\">    console.log(&#x27;文件读取成功，大小:&#x27;, yamlBuffer.length, &#x27;字节&#x27;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 处理UTF-8 BOM头（移除BOM）</span><br><span class=\"line\">    let cleanBuffer = yamlBuffer;</span><br><span class=\"line\">    if (yamlBuffer[0] === 0xef &amp;&amp; yamlBuffer[1] === 0xbb &amp;&amp; yamlBuffer[2] === 0xbf) &#123;</span><br><span class=\"line\">      console.warn(&#x27;检测到UTF-8 BOM头，已自动移除&#x27;);</span><br><span class=\"line\">      cleanBuffer = yamlBuffer.slice(3); // 移除前3个BOM字节</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 转换为字符串</span><br><span class=\"line\">    const yamlContent = cleanBuffer.toString(&#x27;utf8&#x27;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 显示文件前100个字符用于调试</span><br><span class=\"line\">    console.log(&#x27;文件前100字符:&#x27;, yamlContent.substring(0, 100).replace(/\\n/g, &#x27;\\\\n&#x27;));</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 更安全的YAML处理 - 只处理确实为空的rss字段</span><br><span class=\"line\">    const processedContent = yamlContent</span><br><span class=\"line\">      .replace(/^\\s*rss:\\s*$/gm, &#x27;rss: &quot;&quot;&#x27;)  // 处理空的rss字段</span><br><span class=\"line\">      .replace(/\\t/g, &#x27;  &#x27;);  // 将制表符替换为两个空格（YAML不允许制表符缩进）</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 保存处理后的内容用于调试</span><br><span class=\"line\">    await fs.writeFile(&#x27;processed_yaml_debug.yml&#x27;, processedContent, &#x27;utf8&#x27;);</span><br><span class=\"line\">    console.log(&#x27;已保存处理后的YAML到 processed_yaml_debug.yml&#x27;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    // 尝试使用更严格的方式定位错误</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      console.log(&#x27;开始解析YAML...&#x27;);</span><br><span class=\"line\">      const data = YML.parse(processedContent);</span><br><span class=\"line\">      console.log(&#x27;YAML解析成功，根结构类型:&#x27;, Array.isArray(data) ? &#x27;数组&#x27; : typeof data);</span><br><span class=\"line\">      </span><br><span class=\"line\">      if (!Array.isArray(data)) &#123;</span><br><span class=\"line\">        throw new Error(&#x27;YAML文件的根结构不是数组&#x27;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      const linkList = [];</span><br><span class=\"line\">      for (let i = 0; i &lt; Math.min(TAKE_COUNT, data.length); i++) &#123;</span><br><span class=\"line\">        const item = data[i];</span><br><span class=\"line\">        if (item &amp;&amp; Array.isArray(item.link_list)) &#123;</span><br><span class=\"line\">          linkList.push(...item.link_list);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          console.warn(`第$&#123;i+1&#125;项不包含有效的link_list数组，已跳过`);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      const outputData = &#123;</span><br><span class=\"line\">        link_list: linkList,</span><br><span class=\"line\">        length: linkList.length</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      </span><br><span class=\"line\">      await fs.writeFile(</span><br><span class=\"line\">        OUTPUT_JSON_PATH,</span><br><span class=\"line\">        JSON.stringify(outputData, null, 2),</span><br><span class=\"line\">        &#x27;utf8&#x27;</span><br><span class=\"line\">      );</span><br><span class=\"line\">      </span><br><span class=\"line\">      console.log(`成功生成 $&#123;OUTPUT_JSON_PATH&#125;，共包含 $&#123;linkList.length&#125; 条友链`);</span><br><span class=\"line\">      </span><br><span class=\"line\">    &#125; catch (parseError) &#123;</span><br><span class=\"line\">      console.error(&#x27;\\n=== YAML解析错误 ===&#x27;);</span><br><span class=\"line\">      console.error(&#x27;错误信息:&#x27;, parseError.message);</span><br><span class=\"line\">      </span><br><span class=\"line\">      // 尝试定位错误行</span><br><span class=\"line\">      if (parseError.parsedLine) &#123;</span><br><span class=\"line\">        console.error(&#x27;错误位置: 第&#x27;, parseError.parsedLine, &#x27;行&#x27;);</span><br><span class=\"line\">        // 输出错误行附近的内容</span><br><span class=\"line\">        const lines = processedContent.split(&#x27;\\n&#x27;);</span><br><span class=\"line\">        const errorLine = parseError.parsedLine - 1; // 转换为数组索引</span><br><span class=\"line\">        // 显示错误行前后3行</span><br><span class=\"line\">        for (let i = Math.max(0, errorLine - 3); i &lt;= Math.min(lines.length - 1, errorLine + 3); i++) &#123;</span><br><span class=\"line\">          console.log(`$&#123;i + 1&#125;: $&#123;lines[i]&#125;`);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        console.error(&#x27;错误位置: 未知（可能是文件开头附近）&#x27;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      console.error(&#x27;请检查 processed_yaml_debug.yml 文件是否有格式问题&#x27;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125; catch (error) &#123;</span><br><span class=\"line\">    console.error(&#x27;\\n=== 处理过程出错 ===&#x27;);</span><br><span class=\"line\">    console.error(&#x27;错误信息:&#x27;, error.message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">processLinks();</span><br></pre></td></tr></table></figure>\n\n<p>运行脚本前请先安装yamljs <code>node install yamljs --save</code></p>\n<h1 id=\"后端Github-Action修复方案\"><a href=\"#后端Github-Action修复方案\" class=\"headerlink\" title=\"后端Github Action修复方案\"></a>后端Github Action修复方案</h1><div class=\"note warning flat\"><p>此修复方法仅经过本人测试正常运行，可否正常使用请自行测试</p>\n</div>\n\n<p>作者原版github actions运行后可能会出现找不到环境变量的问题，导致抓取失败。</p>\n<p>这里有个走偏门的方法，可以Fork后修改workflows文件夹里面的yaml文件夹的<strong>check_links.yml</strong>,将<code>env：</code>下面的</p>\n<p><code>SOURCE_URL: $&#123;&#123; secrets.SOURCE_URL &#125;&#125;</code></p>\n<p>改成自己的URL，例如：</p>\n<p><code>SOURCE_URL: https://www.sumi233.top/flink_count.json</code></p>\n<p><img src=\"https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht1-4.png\"></p>\n<p>然后在项目的Github Actions再次运行workflows即可。</p>\n<h1 id=\"引用教程\"><a href=\"#引用教程\" class=\"headerlink\" title=\"引用教程\"></a>引用教程</h1><ul>\n<li>谢谢大佬们的无私贡献！</li>\n</ul>\n<div calss=\"anzhiyu-tag-link\"><a class=\"tag-Link\" target=\"_blank\" href=\"https://blog.liushen.fun/posts/c2262998/\">\n    <div class=\"tag-link-tips\">引用站外地址</div>\n    <div class=\"tag-link-bottom\">\n        <div class=\"tag-link-left\" style>\n          <i class=\"anzhiyufont anzhiyu-icon-link\" style></i>\n        </div>\n        <div class=\"tag-link-right\">\n            <div class=\"tag-link-title\">Github Action实现友链状态检测</div>\n            <div class=\"tag-link-sitename\">LiuShen</div>\n        </div>\n        <i class=\"anzhiyufont anzhiyu-icon-angle-right\"></i>\n    </div>\n    </a></div>\n\n<div calss=\"anzhiyu-tag-link\"><a class=\"tag-Link\" target=\"_blank\" href=\"https://blog.mcxiaochen.top/posts/p1c0fbc06/\">\n    <div class=\"tag-link-tips\">引用站外地址</div>\n    <div class=\"tag-link-bottom\">\n        <div class=\"tag-link-left\" style>\n          <i class=\"anzhiyufont anzhiyu-icon-link\" style></i>\n        </div>\n        <div class=\"tag-link-right\">\n            <div class=\"tag-link-title\">安知鱼主题实现友链状态前端显示</div>\n            <div class=\"tag-link-sitename\">辰渊尘の个人博客</div>\n        </div>\n        <i class=\"anzhiyufont anzhiyu-icon-angle-right\"></i>\n    </div>\n    </a></div>\n\n<h1 id=\"最终实现效果\"><a href=\"#最终实现效果\" class=\"headerlink\" title=\"最终实现效果\"></a>最终实现效果</h1><p><img src=\"https://cdn.sumi233.top/gh/huang233893/blog-image-bed@main/top/huang233893/imgs/blog/ht1-2.png\"></p>\n","categories":[{"name":"教程类","path":"api/categories/教程类.json"}],"tags":[{"name":"博客","path":"api/tags/博客.json"},{"name":"教程","path":"api/tags/教程.json"}]}